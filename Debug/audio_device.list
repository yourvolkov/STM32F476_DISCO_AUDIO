
audio_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b288  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800b458  0800b458  0001b458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b594  0800b594  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800b594  0800b594  0001b594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b59c  0800b59c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b59c  0800b59c  0001b59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5a0  0800b5a0  0001b5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800b5a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c74  20000010  0800b5b4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20004c84  0800b5b4  00024c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002445f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a47  00000000  00000000  0004449f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ef8  00000000  00000000  00048ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf8  00000000  00000000  0004ade0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005b98  00000000  00000000  0004cad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025c80  00000000  00000000  00052670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105e7c  00000000  00000000  000782f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017e16c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008318  00000000  00000000  0017e1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b440 	.word	0x0800b440

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800b440 	.word	0x0800b440

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	f5ad 5d87 	sub.w	sp, sp, #4320	; 0x10e0
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fe02 	bl	8001126 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f8b7 	bl	8000694 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000526:	f000 f925 	bl	8000774 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 fb05 	bl	8000b38 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 800052e:	f000 fa57 	bl	80009e0 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000532:	f005 f977 	bl	8005824 <MX_FATFS_Init>
  MX_RTC_Init();
 8000536:	f000 f985 	bl	8000844 <MX_RTC_Init>
  MX_SAI2_Init();
 800053a:	f000 f9a9 	bl	8000890 <MX_SAI2_Init>
  MX_TIM1_Init();
 800053e:	f000 fa6f 	bl	8000a20 <MX_TIM1_Init>
  MX_I2C3_Init();
 8000542:	f000 f93f 	bl	80007c4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FIL fil_2;
  fil_2 = fil;
 8000546:	f241 03f0 	movw	r3, #4336	; 0x10f0
 800054a:	443b      	add	r3, r7
 800054c:	f5a3 624a 	sub.w	r2, r3, #3232	; 0xca0
 8000550:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8000554:	443b      	add	r3, r7
 8000556:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 800055a:	4610      	mov	r0, r2
 800055c:	4619      	mov	r1, r3
 800055e:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000562:	461a      	mov	r2, r3
 8000564:	f00a ff56 	bl	800b414 <memcpy>
  FILINFO fno; // Fileinfo
  FRESULT fres; //Result after operations
  BYTE work[1024]; /* Work area (larger is better for processing time) */
  DIR directory;

  fres = f_mount(&FatFs, "", 1); //1=mount now
 8000568:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 800056c:	2201      	movs	r2, #1
 800056e:	4942      	ldr	r1, [pc, #264]	; (8000678 <main+0x164>)
 8000570:	4618      	mov	r0, r3
 8000572:	f006 ffed 	bl	8007550 <f_mount>
 8000576:	4603      	mov	r3, r0
 8000578:	f241 02ed 	movw	r2, #4333	; 0x10ed
 800057c:	443a      	add	r2, r7
 800057e:	7013      	strb	r3, [r2, #0]
  for(uint8_t i = 0 ; i < 50; i++){
 8000580:	2300      	movs	r3, #0
 8000582:	f241 02ef 	movw	r2, #4335	; 0x10ef
 8000586:	443a      	add	r2, r7
 8000588:	7013      	strb	r3, [r2, #0]
 800058a:	e015      	b.n	80005b8 <main+0xa4>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1 ^ HAL_GPIO_ReadPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin));
 800058c:	2102      	movs	r1, #2
 800058e:	483b      	ldr	r0, [pc, #236]	; (800067c <main+0x168>)
 8000590:	f001 f9a2 	bl	80018d8 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	f083 0301 	eor.w	r3, r3, #1
 800059a:	b2db      	uxtb	r3, r3
 800059c:	461a      	mov	r2, r3
 800059e:	2102      	movs	r1, #2
 80005a0:	4836      	ldr	r0, [pc, #216]	; (800067c <main+0x168>)
 80005a2:	f001 f9b1 	bl	8001908 <HAL_GPIO_WritePin>
  for(uint8_t i = 0 ; i < 50; i++){
 80005a6:	f241 03ef 	movw	r3, #4335	; 0x10ef
 80005aa:	443b      	add	r3, r7
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	3301      	adds	r3, #1
 80005b0:	f241 02ef 	movw	r2, #4335	; 0x10ef
 80005b4:	443a      	add	r2, r7
 80005b6:	7013      	strb	r3, [r2, #0]
 80005b8:	f241 03ef 	movw	r3, #4335	; 0x10ef
 80005bc:	443b      	add	r3, r7
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b31      	cmp	r3, #49	; 0x31
 80005c2:	d9e3      	bls.n	800058c <main+0x78>
  }
  if (fres != FR_OK) {
 80005c4:	f241 03ed 	movw	r3, #4333	; 0x10ed
 80005c8:	443b      	add	r3, r7
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00b      	beq.n	80005e8 <main+0xd4>
//	  fres = f_mkfs("", NULL, 0, work, sizeof(work));
	  if(fres){
 80005d0:	f241 03ed 	movw	r3, #4333	; 0x10ed
 80005d4:	443b      	add	r3, r7
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d03f      	beq.n	800065c <main+0x148>
		  uint8_t hui = 5;
 80005dc:	2305      	movs	r3, #5
 80005de:	f241 02eb 	movw	r2, #4331	; 0x10eb
 80005e2:	443a      	add	r2, r7
 80005e4:	7013      	strb	r3, [r2, #0]
 80005e6:	e039      	b.n	800065c <main+0x148>
	  }
  }else{
	  fres = f_opendir (&directory, "MUSIC");
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <main+0x16c>)
 80005ea:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80005ee:	f103 0310 	add.w	r3, r3, #16
 80005f2:	443b      	add	r3, r7
 80005f4:	4923      	ldr	r1, [pc, #140]	; (8000684 <main+0x170>)
 80005f6:	4618      	mov	r0, r3
 80005f8:	f007 f80e 	bl	8007618 <f_opendir>
 80005fc:	4603      	mov	r3, r0
 80005fe:	f241 02ed 	movw	r2, #4333	; 0x10ed
 8000602:	443a      	add	r2, r7
 8000604:	7013      	strb	r3, [r2, #0]
	  for(uint8_t i = 0 ; i < 50; i++){
 8000606:	2300      	movs	r3, #0
 8000608:	f241 02ee 	movw	r2, #4334	; 0x10ee
 800060c:	443a      	add	r2, r7
 800060e:	7013      	strb	r3, [r2, #0]
 8000610:	e01e      	b.n	8000650 <main+0x13c>

		  fres = f_readdir(&directory, &fno);
 8000612:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8000616:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <main+0x16c>)
 8000618:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800061c:	f103 0310 	add.w	r3, r3, #16
 8000620:	443b      	add	r3, r7
 8000622:	4611      	mov	r1, r2
 8000624:	4618      	mov	r0, r3
 8000626:	f007 f870 	bl	800770a <f_readdir>
 800062a:	4603      	mov	r3, r0
 800062c:	f241 02ed 	movw	r2, #4333	; 0x10ed
 8000630:	443a      	add	r2, r7
 8000632:	7013      	strb	r3, [r2, #0]
		  uint8_t hui = 5;
 8000634:	2305      	movs	r3, #5
 8000636:	f241 02ec 	movw	r2, #4332	; 0x10ec
 800063a:	443a      	add	r2, r7
 800063c:	7013      	strb	r3, [r2, #0]
	  for(uint8_t i = 0 ; i < 50; i++){
 800063e:	f241 03ee 	movw	r3, #4334	; 0x10ee
 8000642:	443b      	add	r3, r7
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	f241 02ee 	movw	r2, #4334	; 0x10ee
 800064c:	443a      	add	r2, r7
 800064e:	7013      	strb	r3, [r2, #0]
 8000650:	f241 03ee 	movw	r3, #4334	; 0x10ee
 8000654:	443b      	add	r3, r7
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b31      	cmp	r3, #49	; 0x31
 800065a:	d9da      	bls.n	8000612 <main+0xfe>
	  }
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800065c:	f007 f942 	bl	80078e4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000660:	4a09      	ldr	r2, [pc, #36]	; (8000688 <main+0x174>)
 8000662:	2100      	movs	r1, #0
 8000664:	4809      	ldr	r0, [pc, #36]	; (800068c <main+0x178>)
 8000666:	f007 f9f1 	bl	8007a4c <osThreadNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a08      	ldr	r2, [pc, #32]	; (8000690 <main+0x17c>)
 800066e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000670:	f007 f98e 	bl	8007990 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000674:	e7fe      	b.n	8000674 <main+0x160>
 8000676:	bf00      	nop
 8000678:	0800b464 	.word	0x0800b464
 800067c:	40022000 	.word	0x40022000
 8000680:	ffffef14 	.word	0xffffef14
 8000684:	0800b468 	.word	0x0800b468
 8000688:	0800b4cc 	.word	0x0800b4cc
 800068c:	08000c35 	.word	0x08000c35
 8000690:	20000270 	.word	0x20000270

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f00a fec4 	bl	800b430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006b8:	f001 fa82 	bl	8001bc0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006bc:	4b2b      	ldr	r3, [pc, #172]	; (800076c <SystemClock_Config+0xd8>)
 80006be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006c0:	4a2a      	ldr	r2, [pc, #168]	; (800076c <SystemClock_Config+0xd8>)
 80006c2:	f023 0318 	bic.w	r3, r3, #24
 80006c6:	6713      	str	r3, [r2, #112]	; 0x70

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <SystemClock_Config+0xd8>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a27      	ldr	r2, [pc, #156]	; (800076c <SystemClock_Config+0xd8>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <SystemClock_Config+0xd8>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <SystemClock_Config+0xdc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <SystemClock_Config+0xdc>)
 80006ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <SystemClock_Config+0xdc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80006fc:	2305      	movs	r3, #5
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000700:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000706:	2301      	movs	r3, #1
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000714:	230f      	movs	r3, #15
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000718:	2360      	movs	r3, #96	; 0x60
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000720:	230a      	movs	r3, #10
 8000722:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f001 fa59 	bl	8001be0 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000734:	f000 fa86 	bl	8000c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2102      	movs	r1, #2
 8000754:	4618      	mov	r0, r3
 8000756:	f001 fce7 	bl	8002128 <HAL_RCC_ClockConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000760:	f000 fa70 	bl	8000c44 <Error_Handler>
  }
}
 8000764:	bf00      	nop
 8000766:	3750      	adds	r7, #80	; 0x50
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b0a2      	sub	sp, #136	; 0x88
 8000778:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2284      	movs	r2, #132	; 0x84
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f00a fe55 	bl	800b430 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_CLK48;
 8000786:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800078a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800078c:	23c0      	movs	r3, #192	; 0xc0
 800078e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800079c:	2301      	movs	r3, #1
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80007a0:	2300      	movs	r3, #0
 80007a2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80007a4:	2300      	movs	r3, #0
 80007a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 fe6e 	bl	800248c <HAL_RCCEx_PeriphCLKConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <PeriphCommonClock_Config+0x46>
  {
    Error_Handler();
 80007b6:	f000 fa45 	bl	8000c44 <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3788      	adds	r7, #136	; 0x88
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_I2C3_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_I2C3_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00909BEB;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_I2C3_Init+0x74>)
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <MX_I2C3_Init+0x7c>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_I2C3_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_I2C3_Init+0x74>)
 80007dc:	2201      	movs	r2, #1
 80007de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_I2C3_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_I2C3_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_I2C3_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_I2C3_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_I2C3_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007fe:	480e      	ldr	r0, [pc, #56]	; (8000838 <MX_I2C3_Init+0x74>)
 8000800:	f001 f89c 	bl	800193c <HAL_I2C_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800080a:	f000 fa1b 	bl	8000c44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	4809      	ldr	r0, [pc, #36]	; (8000838 <MX_I2C3_Init+0x74>)
 8000812:	f001 f93d 	bl	8001a90 <HAL_I2CEx_ConfigAnalogFilter>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800081c:	f000 fa12 	bl	8000c44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000820:	2100      	movs	r1, #0
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_I2C3_Init+0x74>)
 8000824:	f001 f97f 	bl	8001b26 <HAL_I2CEx_ConfigDigitalFilter>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 fa09 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000002c 	.word	0x2000002c
 800083c:	40005c00 	.word	0x40005c00
 8000840:	00909beb 	.word	0x00909beb

08000844 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_RTC_Init+0x44>)
 800084a:	4a10      	ldr	r2, [pc, #64]	; (800088c <MX_RTC_Init+0x48>)
 800084c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_RTC_Init+0x44>)
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_RTC_Init+0x44>)
 8000856:	227f      	movs	r2, #127	; 0x7f
 8000858:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_RTC_Init+0x44>)
 800085c:	22ff      	movs	r2, #255	; 0xff
 800085e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_RTC_Init+0x44>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_RTC_Init+0x44>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_RTC_Init+0x44>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_RTC_Init+0x44>)
 8000874:	f002 fb3e 	bl	8002ef4 <HAL_RTC_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800087e:	f000 f9e1 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000078 	.word	0x20000078
 800088c:	40002800 	.word	0x40002800

08000890 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000894:	4b4d      	ldr	r3, [pc, #308]	; (80009cc <MX_SAI2_Init+0x13c>)
 8000896:	4a4e      	ldr	r2, [pc, #312]	; (80009d0 <MX_SAI2_Init+0x140>)
 8000898:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800089a:	4b4c      	ldr	r3, [pc, #304]	; (80009cc <MX_SAI2_Init+0x13c>)
 800089c:	2200      	movs	r2, #0
 800089e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80008a0:	4b4a      	ldr	r3, [pc, #296]	; (80009cc <MX_SAI2_Init+0x13c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80008a6:	4b49      	ldr	r3, [pc, #292]	; (80009cc <MX_SAI2_Init+0x13c>)
 80008a8:	2240      	movs	r2, #64	; 0x40
 80008aa:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80008ac:	4b47      	ldr	r3, [pc, #284]	; (80009cc <MX_SAI2_Init+0x13c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80008b2:	4b46      	ldr	r3, [pc, #280]	; (80009cc <MX_SAI2_Init+0x13c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80008b8:	4b44      	ldr	r3, [pc, #272]	; (80009cc <MX_SAI2_Init+0x13c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80008be:	4b43      	ldr	r3, [pc, #268]	; (80009cc <MX_SAI2_Init+0x13c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80008c4:	4b41      	ldr	r3, [pc, #260]	; (80009cc <MX_SAI2_Init+0x13c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80008ca:	4b40      	ldr	r3, [pc, #256]	; (80009cc <MX_SAI2_Init+0x13c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80008d0:	4b3e      	ldr	r3, [pc, #248]	; (80009cc <MX_SAI2_Init+0x13c>)
 80008d2:	4a40      	ldr	r2, [pc, #256]	; (80009d4 <MX_SAI2_Init+0x144>)
 80008d4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80008d6:	4b3d      	ldr	r3, [pc, #244]	; (80009cc <MX_SAI2_Init+0x13c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80008dc:	4b3b      	ldr	r3, [pc, #236]	; (80009cc <MX_SAI2_Init+0x13c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80008e2:	4b3a      	ldr	r3, [pc, #232]	; (80009cc <MX_SAI2_Init+0x13c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80008e8:	4b38      	ldr	r3, [pc, #224]	; (80009cc <MX_SAI2_Init+0x13c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80008ee:	4b37      	ldr	r3, [pc, #220]	; (80009cc <MX_SAI2_Init+0x13c>)
 80008f0:	2208      	movs	r2, #8
 80008f2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80008f4:	4b35      	ldr	r3, [pc, #212]	; (80009cc <MX_SAI2_Init+0x13c>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80008fa:	4b34      	ldr	r3, [pc, #208]	; (80009cc <MX_SAI2_Init+0x13c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000900:	4b32      	ldr	r3, [pc, #200]	; (80009cc <MX_SAI2_Init+0x13c>)
 8000902:	2200      	movs	r2, #0
 8000904:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000906:	4b31      	ldr	r3, [pc, #196]	; (80009cc <MX_SAI2_Init+0x13c>)
 8000908:	2200      	movs	r2, #0
 800090a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800090c:	4b2f      	ldr	r3, [pc, #188]	; (80009cc <MX_SAI2_Init+0x13c>)
 800090e:	2200      	movs	r2, #0
 8000910:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000912:	4b2e      	ldr	r3, [pc, #184]	; (80009cc <MX_SAI2_Init+0x13c>)
 8000914:	2200      	movs	r2, #0
 8000916:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000918:	4b2c      	ldr	r3, [pc, #176]	; (80009cc <MX_SAI2_Init+0x13c>)
 800091a:	2201      	movs	r2, #1
 800091c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800091e:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <MX_SAI2_Init+0x13c>)
 8000920:	2200      	movs	r2, #0
 8000922:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000924:	4829      	ldr	r0, [pc, #164]	; (80009cc <MX_SAI2_Init+0x13c>)
 8000926:	f002 fbcb 	bl	80030c0 <HAL_SAI_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000930:	f000 f988 	bl	8000c44 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <MX_SAI2_Init+0x148>)
 8000936:	4a29      	ldr	r2, [pc, #164]	; (80009dc <MX_SAI2_Init+0x14c>)
 8000938:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800093a:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <MX_SAI2_Init+0x148>)
 800093c:	2200      	movs	r2, #0
 800093e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000940:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <MX_SAI2_Init+0x148>)
 8000942:	2203      	movs	r2, #3
 8000944:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000946:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <MX_SAI2_Init+0x148>)
 8000948:	2240      	movs	r2, #64	; 0x40
 800094a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_SAI2_Init+0x148>)
 800094e:	2200      	movs	r2, #0
 8000950:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <MX_SAI2_Init+0x148>)
 8000954:	2200      	movs	r2, #0
 8000956:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_SAI2_Init+0x148>)
 800095a:	2201      	movs	r2, #1
 800095c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <MX_SAI2_Init+0x148>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_SAI2_Init+0x148>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MX_SAI2_Init+0x148>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_SAI2_Init+0x148>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_SAI2_Init+0x148>)
 8000978:	2200      	movs	r2, #0
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800097c:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_SAI2_Init+0x148>)
 800097e:	2200      	movs	r2, #0
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_SAI2_Init+0x148>)
 8000984:	2208      	movs	r2, #8
 8000986:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_SAI2_Init+0x148>)
 800098a:	2201      	movs	r2, #1
 800098c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_SAI2_Init+0x148>)
 8000990:	2200      	movs	r2, #0
 8000992:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_SAI2_Init+0x148>)
 8000996:	2200      	movs	r2, #0
 8000998:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_SAI2_Init+0x148>)
 800099c:	2200      	movs	r2, #0
 800099e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80009a0:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <MX_SAI2_Init+0x148>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_SAI2_Init+0x148>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_SAI2_Init+0x148>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_SAI2_Init+0x148>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80009b8:	4807      	ldr	r0, [pc, #28]	; (80009d8 <MX_SAI2_Init+0x148>)
 80009ba:	f002 fb81 	bl	80030c0 <HAL_SAI_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80009c4:	f000 f93e 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000098 	.word	0x20000098
 80009d0:	40015c04 	.word	0x40015c04
 80009d4:	0002ee00 	.word	0x0002ee00
 80009d8:	2000011c 	.word	0x2000011c
 80009dc:	40015c24 	.word	0x40015c24

080009e0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_SDMMC1_SD_Init+0x38>)
 80009e6:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <MX_SDMMC1_SD_Init+0x3c>)
 80009e8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_SDMMC1_SD_Init+0x38>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_SDMMC1_SD_Init+0x38>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_SDMMC1_SD_Init+0x38>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_SDMMC1_SD_Init+0x38>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <MX_SDMMC1_SD_Init+0x38>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <MX_SDMMC1_SD_Init+0x38>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	200001a0 	.word	0x200001a0
 8000a1c:	40012c00 	.word	0x40012c00

08000a20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b096      	sub	sp, #88	; 0x58
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]
 8000a42:	615a      	str	r2, [r3, #20]
 8000a44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	222c      	movs	r2, #44	; 0x2c
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f00a fcef 	bl	800b430 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a52:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <MX_TIM1_Init+0x110>)
 8000a54:	4a37      	ldr	r2, [pc, #220]	; (8000b34 <MX_TIM1_Init+0x114>)
 8000a56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 8000a58:	4b35      	ldr	r3, [pc, #212]	; (8000b30 <MX_TIM1_Init+0x110>)
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5e:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <MX_TIM1_Init+0x110>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 906;
 8000a64:	4b32      	ldr	r3, [pc, #200]	; (8000b30 <MX_TIM1_Init+0x110>)
 8000a66:	f240 328a 	movw	r2, #906	; 0x38a
 8000a6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6c:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <MX_TIM1_Init+0x110>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a72:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <MX_TIM1_Init+0x110>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a78:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <MX_TIM1_Init+0x110>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000a7e:	482c      	ldr	r0, [pc, #176]	; (8000b30 <MX_TIM1_Init+0x110>)
 8000a80:	f003 fb72 	bl	8004168 <HAL_TIM_OC_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a8a:	f000 f8db 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4823      	ldr	r0, [pc, #140]	; (8000b30 <MX_TIM1_Init+0x110>)
 8000aa2:	f004 f881 	bl	8004ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000aac:	f000 f8ca 	bl	8000c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000abc:	2300      	movs	r3, #0
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000acc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4816      	ldr	r0, [pc, #88]	; (8000b30 <MX_TIM1_Init+0x110>)
 8000ad6:	f003 fcbd 	bl	8004454 <HAL_TIM_OC_ConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ae0:	f000 f8b0 	bl	8000c44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_TIM1_Init+0x110>)
 8000b1a:	f004 f8d3 	bl	8004cc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000b24:	f000 f88e 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	3758      	adds	r7, #88	; 0x58
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000224 	.word	0x20000224
 8000b34:	40010000 	.word	0x40010000

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	4b36      	ldr	r3, [pc, #216]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a35      	ldr	r2, [pc, #212]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b33      	ldr	r3, [pc, #204]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	61bb      	str	r3, [r7, #24]
 8000b64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b30      	ldr	r3, [pc, #192]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a2f      	ldr	r2, [pc, #188]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a29      	ldr	r2, [pc, #164]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b84:	f043 0308 	orr.w	r3, r3, #8
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b96:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a23      	ldr	r2, [pc, #140]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a1d      	ldr	r2, [pc, #116]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2102      	movs	r1, #2
 8000be2:	4812      	ldr	r0, [pc, #72]	; (8000c2c <MX_GPIO_Init+0xf4>)
 8000be4:	f000 fe90 	bl	8001908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000be8:	2340      	movs	r3, #64	; 0x40
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <MX_GPIO_Init+0xf8>)
 8000bfe:	f000 fcbf 	bl	8001580 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <MX_GPIO_Init+0xf4>)
 8000c1a:	f000 fcb1 	bl	8001580 <HAL_GPIO_Init>

}
 8000c1e:	bf00      	nop
 8000c20:	3730      	adds	r7, #48	; 0x30
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40022000 	.word	0x40022000
 8000c30:	40020c00 	.word	0x40020c00

08000c34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f006 ffab 	bl	8007b98 <osDelay>
 8000c42:	e7fb      	b.n	8000c3c <StartDefaultTask+0x8>

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <Error_Handler+0x8>
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	210f      	movs	r1, #15
 8000c8a:	f06f 0001 	mvn.w	r0, #1
 8000c8e:	f000 fba6 	bl	80013de <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b0ac      	sub	sp, #176	; 0xb0
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb8:	f107 0318 	add.w	r3, r7, #24
 8000cbc:	2284      	movs	r2, #132	; 0x84
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f00a fbb5 	bl	800b430 <memset>
  if(hi2c->Instance==I2C3)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a37      	ldr	r2, [pc, #220]	; (8000da8 <HAL_I2C_MspInit+0x108>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d166      	bne.n	8000d9e <HAL_I2C_MspInit+0xfe>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cdc:	f107 0318 	add.w	r3, r7, #24
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f001 fbd3 	bl	800248c <HAL_RCCEx_PeriphCLKConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000cec:	f7ff ffaa 	bl	8000c44 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf0:	4b2e      	ldr	r3, [pc, #184]	; (8000dac <HAL_I2C_MspInit+0x10c>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	4a2d      	ldr	r2, [pc, #180]	; (8000dac <HAL_I2C_MspInit+0x10c>)
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfc:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <HAL_I2C_MspInit+0x10c>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d08:	4b28      	ldr	r3, [pc, #160]	; (8000dac <HAL_I2C_MspInit+0x10c>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	4a27      	ldr	r2, [pc, #156]	; (8000dac <HAL_I2C_MspInit+0x10c>)
 8000d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d12:	6313      	str	r3, [r2, #48]	; 0x30
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <HAL_I2C_MspInit+0x10c>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PH7     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d28:	2312      	movs	r3, #18
 8000d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d44:	4619      	mov	r1, r3
 8000d46:	481a      	ldr	r0, [pc, #104]	; (8000db0 <HAL_I2C_MspInit+0x110>)
 8000d48:	f000 fc1a 	bl	8001580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d52:	2312      	movs	r3, #18
 8000d54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d64:	2304      	movs	r3, #4
 8000d66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4810      	ldr	r0, [pc, #64]	; (8000db4 <HAL_I2C_MspInit+0x114>)
 8000d72:	f000 fc05 	bl	8001580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <HAL_I2C_MspInit+0x10c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <HAL_I2C_MspInit+0x10c>)
 8000d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_I2C_MspInit+0x10c>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2105      	movs	r1, #5
 8000d92:	2048      	movs	r0, #72	; 0x48
 8000d94:	f000 fb23 	bl	80013de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000d98:	2048      	movs	r0, #72	; 0x48
 8000d9a:	f000 fb3c 	bl	8001416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	37b0      	adds	r7, #176	; 0xb0
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40005c00 	.word	0x40005c00
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020800 	.word	0x40020800
 8000db4:	40021c00 	.word	0x40021c00

08000db8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b0a4      	sub	sp, #144	; 0x90
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2284      	movs	r2, #132	; 0x84
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f00a fb31 	bl	800b430 <memset>
  if(hrtc->Instance==RTC)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <HAL_RTC_MspInit+0x54>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d114      	bne.n	8000e02 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dd8:	2320      	movs	r3, #32
 8000dda:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 fb50 	bl	800248c <HAL_RCCEx_PeriphCLKConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000df2:	f7ff ff27 	bl	8000c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_RTC_MspInit+0x58>)
 8000df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <HAL_RTC_MspInit+0x58>)
 8000dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e00:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3790      	adds	r7, #144	; 0x90
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40002800 	.word	0x40002800
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b0ac      	sub	sp, #176	; 0xb0
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e2c:	f107 0318 	add.w	r3, r7, #24
 8000e30:	2284      	movs	r2, #132	; 0x84
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f00a fafb 	bl	800b430 <memset>
  if(hsd->Instance==SDMMC1)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a34      	ldr	r2, [pc, #208]	; (8000f10 <HAL_SD_MspInit+0xfc>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d161      	bne.n	8000f08 <HAL_SD_MspInit+0xf4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8000e44:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8000e48:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e56:	f107 0318 	add.w	r3, r7, #24
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 fb16 	bl	800248c <HAL_RCCEx_PeriphCLKConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8000e66:	f7ff feed 	bl	8000c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <HAL_SD_MspInit+0x100>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a29      	ldr	r2, [pc, #164]	; (8000f14 <HAL_SD_MspInit+0x100>)
 8000e70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <HAL_SD_MspInit+0x100>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e82:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <HAL_SD_MspInit+0x100>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a23      	ldr	r2, [pc, #140]	; (8000f14 <HAL_SD_MspInit+0x100>)
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <HAL_SD_MspInit+0x100>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <HAL_SD_MspInit+0x100>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a1d      	ldr	r2, [pc, #116]	; (8000f14 <HAL_SD_MspInit+0x100>)
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <HAL_SD_MspInit+0x100>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8000eb2:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000eb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ecc:	230c      	movs	r3, #12
 8000ece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480f      	ldr	r0, [pc, #60]	; (8000f18 <HAL_SD_MspInit+0x104>)
 8000eda:	f000 fb51 	bl	8001580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ef6:	230c      	movs	r3, #12
 8000ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f00:	4619      	mov	r1, r3
 8000f02:	4806      	ldr	r0, [pc, #24]	; (8000f1c <HAL_SD_MspInit+0x108>)
 8000f04:	f000 fb3c 	bl	8001580 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000f08:	bf00      	nop
 8000f0a:	37b0      	adds	r7, #176	; 0xb0
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40012c00 	.word	0x40012c00
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020800 	.word	0x40020800
 8000f1c:	40020c00 	.word	0x40020c00

08000f20 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <HAL_TIM_OC_MspInit+0x44>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d113      	bne.n	8000f5a <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_TIM_OC_MspInit+0x48>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <HAL_TIM_OC_MspInit+0x48>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_TIM_OC_MspInit+0x48>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2105      	movs	r1, #5
 8000f4e:	2019      	movs	r0, #25
 8000f50:	f000 fa45 	bl	80013de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f54:	2019      	movs	r0, #25
 8000f56:	f000 fa5e 	bl	8001416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40010000 	.word	0x40010000
 8000f68:	40023800 	.word	0x40023800

08000f6c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a2b      	ldr	r2, [pc, #172]	; (8001028 <HAL_SAI_MspInit+0xbc>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d124      	bne.n	8000fc8 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	; (800102c <HAL_SAI_MspInit+0xc0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10b      	bne.n	8000f9e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000f86:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <HAL_SAI_MspInit+0xc4>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a29      	ldr	r2, [pc, #164]	; (8001030 <HAL_SAI_MspInit+0xc4>)
 8000f8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b27      	ldr	r3, [pc, #156]	; (8001030 <HAL_SAI_MspInit+0xc4>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8000f9e:	4b23      	ldr	r3, [pc, #140]	; (800102c <HAL_SAI_MspInit+0xc0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	4a21      	ldr	r2, [pc, #132]	; (800102c <HAL_SAI_MspInit+0xc0>)
 8000fa6:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 8000fa8:	23f0      	movs	r3, #240	; 0xf0
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000fb8:	230a      	movs	r3, #10
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	481c      	ldr	r0, [pc, #112]	; (8001034 <HAL_SAI_MspInit+0xc8>)
 8000fc4:	f000 fadc 	bl	8001580 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a1a      	ldr	r2, [pc, #104]	; (8001038 <HAL_SAI_MspInit+0xcc>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d125      	bne.n	800101e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <HAL_SAI_MspInit+0xc0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10b      	bne.n	8000ff2 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_SAI_MspInit+0xc4>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	4a14      	ldr	r2, [pc, #80]	; (8001030 <HAL_SAI_MspInit+0xc4>)
 8000fe0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_SAI_MspInit+0xc4>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_SAI_MspInit+0xc0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	4a0c      	ldr	r2, [pc, #48]	; (800102c <HAL_SAI_MspInit+0xc0>)
 8000ffa:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800100e:	230a      	movs	r3, #10
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4808      	ldr	r0, [pc, #32]	; (800103c <HAL_SAI_MspInit+0xd0>)
 800101a:	f000 fab1 	bl	8001580 <HAL_GPIO_Init>

    }
}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40015c04 	.word	0x40015c04
 800102c:	20000274 	.word	0x20000274
 8001030:	40023800 	.word	0x40023800
 8001034:	40022000 	.word	0x40022000
 8001038:	40015c24 	.word	0x40015c24
 800103c:	40021800 	.word	0x40021800

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <NMI_Handler+0x4>

08001046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <MemManage_Handler+0x4>

08001052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <BusFault_Handler+0x4>

08001058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <UsageFault_Handler+0x4>

0800105e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001070:	f000 f896 	bl	80011a0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001074:	f009 f848 	bl	800a108 <xTaskGetSchedulerState>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	d001      	beq.n	8001082 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800107e:	f009 ff2b 	bl	800aed8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800108e:	f003 f8c2 	bl	8004216 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000224 	.word	0x20000224

0800109c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <I2C3_EV_IRQHandler+0x10>)
 80010a2:	f000 fcdb 	bl	8001a5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000002c 	.word	0x2000002c

080010b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <SystemInit+0x20>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <SystemInit+0x20>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800110c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010da:	490e      	ldr	r1, [pc, #56]	; (8001114 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010dc:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010f0:	4c0b      	ldr	r4, [pc, #44]	; (8001120 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010fe:	f7ff ffd7 	bl	80010b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001102:	f00a f963 	bl	800b3cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001106:	f7ff fa05 	bl	8000514 <main>
  bx  lr    
 800110a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800110c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001118:	0800b5a4 	.word	0x0800b5a4
  ldr r2, =_sbss
 800111c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001120:	20004c84 	.word	0x20004c84

08001124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC_IRQHandler>

08001126 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112a:	2003      	movs	r0, #3
 800112c:	f000 f94c 	bl	80013c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001130:	200f      	movs	r0, #15
 8001132:	f000 f805 	bl	8001140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001136:	f7ff fd8b 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x54>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x58>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f967 	bl	8001432 <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e00e      	b.n	800118c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d80a      	bhi.n	800118a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f000 f92f 	bl	80013de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4a06      	ldr	r2, [pc, #24]	; (800119c <HAL_InitTick+0x5c>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000000 	.word	0x20000000
 8001198:	20000008 	.word	0x20000008
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000278 	.word	0x20000278

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000278 	.word	0x20000278

080011e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff ffee 	bl	80011c8 <HAL_GetTick>
 80011ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f8:	d005      	beq.n	8001206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_Delay+0x44>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001206:	bf00      	nop
 8001208:	f7ff ffde 	bl	80011c8 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d8f7      	bhi.n	8001208 <HAL_Delay+0x28>
  {
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008

08001228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <__NVIC_SetPriorityGrouping+0x40>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001244:	4013      	ands	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 8001252:	4313      	orrs	r3, r2
 8001254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <__NVIC_SetPriorityGrouping+0x40>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	60d3      	str	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00
 800126c:	05fa0000 	.word	0x05fa0000

08001270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <__NVIC_GetPriorityGrouping+0x18>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	f003 0307 	and.w	r3, r3, #7
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0b      	blt.n	80012b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 021f 	and.w	r2, r3, #31
 80012a4:	4907      	ldr	r1, [pc, #28]	; (80012c4 <__NVIC_EnableIRQ+0x38>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	2001      	movs	r0, #1
 80012ae:	fa00 f202 	lsl.w	r2, r0, r2
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000e100 	.word	0xe000e100

080012c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db0a      	blt.n	80012f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	490c      	ldr	r1, [pc, #48]	; (8001314 <__NVIC_SetPriority+0x4c>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	0112      	lsls	r2, r2, #4
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	440b      	add	r3, r1
 80012ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f0:	e00a      	b.n	8001308 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4908      	ldr	r1, [pc, #32]	; (8001318 <__NVIC_SetPriority+0x50>)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	3b04      	subs	r3, #4
 8001300:	0112      	lsls	r2, r2, #4
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	440b      	add	r3, r1
 8001306:	761a      	strb	r2, [r3, #24]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000e100 	.word	0xe000e100
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	; 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f1c3 0307 	rsb	r3, r3, #7
 8001336:	2b04      	cmp	r3, #4
 8001338:	bf28      	it	cs
 800133a:	2304      	movcs	r3, #4
 800133c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3304      	adds	r3, #4
 8001342:	2b06      	cmp	r3, #6
 8001344:	d902      	bls.n	800134c <NVIC_EncodePriority+0x30>
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3b03      	subs	r3, #3
 800134a:	e000      	b.n	800134e <NVIC_EncodePriority+0x32>
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	f04f 32ff 	mov.w	r2, #4294967295
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	401a      	ands	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43d9      	mvns	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	4313      	orrs	r3, r2
         );
}
 8001376:	4618      	mov	r0, r3
 8001378:	3724      	adds	r7, #36	; 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001394:	d301      	bcc.n	800139a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001396:	2301      	movs	r3, #1
 8001398:	e00f      	b.n	80013ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139a:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <SysTick_Config+0x40>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a2:	210f      	movs	r1, #15
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f7ff ff8e 	bl	80012c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <SysTick_Config+0x40>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <SysTick_Config+0x40>)
 80013b4:	2207      	movs	r2, #7
 80013b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	e000e010 	.word	0xe000e010

080013c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ff29 	bl	8001228 <__NVIC_SetPriorityGrouping>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f0:	f7ff ff3e 	bl	8001270 <__NVIC_GetPriorityGrouping>
 80013f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	6978      	ldr	r0, [r7, #20]
 80013fc:	f7ff ff8e 	bl	800131c <NVIC_EncodePriority>
 8001400:	4602      	mov	r2, r0
 8001402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff5d 	bl	80012c8 <__NVIC_SetPriority>
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff31 	bl	800128c <__NVIC_EnableIRQ>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ffa2 	bl	8001384 <SysTick_Config>
 8001440:	4603      	mov	r3, r0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001460:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001468:	2b01      	cmp	r3, #1
 800146a:	d101      	bne.n	8001470 <HAL_DMA_Start_IT+0x26>
 800146c:	2302      	movs	r3, #2
 800146e:	e048      	b.n	8001502 <HAL_DMA_Start_IT+0xb8>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b01      	cmp	r3, #1
 8001482:	d137      	bne.n	80014f4 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2202      	movs	r2, #2
 8001488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2200      	movs	r2, #0
 8001490:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	68b9      	ldr	r1, [r7, #8]
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f000 f842 	bl	8001522 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a2:	223f      	movs	r2, #63	; 0x3f
 80014a4:	409a      	lsls	r2, r3
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 0216 	orr.w	r2, r2, #22
 80014b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	695a      	ldr	r2, [r3, #20]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014c8:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d007      	beq.n	80014e2 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f042 0208 	orr.w	r2, r2, #8
 80014e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f042 0201 	orr.w	r2, r2, #1
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e005      	b.n	8001500 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014fc:	2302      	movs	r3, #2
 80014fe:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001500:	7dfb      	ldrb	r3, [r7, #23]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001522:	b480      	push	{r7}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800153e:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b40      	cmp	r3, #64	; 0x40
 800154e:	d108      	bne.n	8001562 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001560:	e007      	b.n	8001572 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	60da      	str	r2, [r3, #12]
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	e175      	b.n	800188c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80015a0:	2201      	movs	r2, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	f040 8164 	bne.w	8001886 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d005      	beq.n	80015d6 <HAL_GPIO_Init+0x56>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d130      	bne.n	8001638 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	2203      	movs	r2, #3
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800160c:	2201      	movs	r2, #1
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	f003 0201 	and.w	r2, r3, #1
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b03      	cmp	r3, #3
 8001642:	d017      	beq.n	8001674 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d123      	bne.n	80016c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	08da      	lsrs	r2, r3, #3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3208      	adds	r2, #8
 8001688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	69b9      	ldr	r1, [r7, #24]
 80016c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0203 	and.w	r2, r3, #3
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80be 	beq.w	8001886 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	4b66      	ldr	r3, [pc, #408]	; (80018a4 <HAL_GPIO_Init+0x324>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a65      	ldr	r2, [pc, #404]	; (80018a4 <HAL_GPIO_Init+0x324>)
 8001710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b63      	ldr	r3, [pc, #396]	; (80018a4 <HAL_GPIO_Init+0x324>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001722:	4a61      	ldr	r2, [pc, #388]	; (80018a8 <HAL_GPIO_Init+0x328>)
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a58      	ldr	r2, [pc, #352]	; (80018ac <HAL_GPIO_Init+0x32c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d037      	beq.n	80017be <HAL_GPIO_Init+0x23e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a57      	ldr	r2, [pc, #348]	; (80018b0 <HAL_GPIO_Init+0x330>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d031      	beq.n	80017ba <HAL_GPIO_Init+0x23a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a56      	ldr	r2, [pc, #344]	; (80018b4 <HAL_GPIO_Init+0x334>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d02b      	beq.n	80017b6 <HAL_GPIO_Init+0x236>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a55      	ldr	r2, [pc, #340]	; (80018b8 <HAL_GPIO_Init+0x338>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d025      	beq.n	80017b2 <HAL_GPIO_Init+0x232>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a54      	ldr	r2, [pc, #336]	; (80018bc <HAL_GPIO_Init+0x33c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01f      	beq.n	80017ae <HAL_GPIO_Init+0x22e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a53      	ldr	r2, [pc, #332]	; (80018c0 <HAL_GPIO_Init+0x340>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d019      	beq.n	80017aa <HAL_GPIO_Init+0x22a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a52      	ldr	r2, [pc, #328]	; (80018c4 <HAL_GPIO_Init+0x344>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0x226>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a51      	ldr	r2, [pc, #324]	; (80018c8 <HAL_GPIO_Init+0x348>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00d      	beq.n	80017a2 <HAL_GPIO_Init+0x222>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a50      	ldr	r2, [pc, #320]	; (80018cc <HAL_GPIO_Init+0x34c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <HAL_GPIO_Init+0x21e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4f      	ldr	r2, [pc, #316]	; (80018d0 <HAL_GPIO_Init+0x350>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d101      	bne.n	800179a <HAL_GPIO_Init+0x21a>
 8001796:	2309      	movs	r3, #9
 8001798:	e012      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 800179a:	230a      	movs	r3, #10
 800179c:	e010      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 800179e:	2308      	movs	r3, #8
 80017a0:	e00e      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017a2:	2307      	movs	r3, #7
 80017a4:	e00c      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017a6:	2306      	movs	r3, #6
 80017a8:	e00a      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017aa:	2305      	movs	r3, #5
 80017ac:	e008      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017ae:	2304      	movs	r3, #4
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017b2:	2303      	movs	r3, #3
 80017b4:	e004      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e002      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017be:	2300      	movs	r3, #0
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	f002 0203 	and.w	r2, r2, #3
 80017c6:	0092      	lsls	r2, r2, #2
 80017c8:	4093      	lsls	r3, r2
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017d0:	4935      	ldr	r1, [pc, #212]	; (80018a8 <HAL_GPIO_Init+0x328>)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017de:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <HAL_GPIO_Init+0x354>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001802:	4a34      	ldr	r2, [pc, #208]	; (80018d4 <HAL_GPIO_Init+0x354>)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001808:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <HAL_GPIO_Init+0x354>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800182c:	4a29      	ldr	r2, [pc, #164]	; (80018d4 <HAL_GPIO_Init+0x354>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001832:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <HAL_GPIO_Init+0x354>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001856:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <HAL_GPIO_Init+0x354>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_GPIO_Init+0x354>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <HAL_GPIO_Init+0x354>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3301      	adds	r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	2b0f      	cmp	r3, #15
 8001890:	f67f ae86 	bls.w	80015a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3724      	adds	r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40013800 	.word	0x40013800
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40020800 	.word	0x40020800
 80018b8:	40020c00 	.word	0x40020c00
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40021400 	.word	0x40021400
 80018c4:	40021800 	.word	0x40021800
 80018c8:	40021c00 	.word	0x40021c00
 80018cc:	40022000 	.word	0x40022000
 80018d0:	40022400 	.word	0x40022400
 80018d4:	40013c00 	.word	0x40013c00

080018d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691a      	ldr	r2, [r3, #16]
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d002      	beq.n	80018f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018f0:	2301      	movs	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	e001      	b.n	80018fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
 8001914:	4613      	mov	r3, r2
 8001916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001918:	787b      	ldrb	r3, [r7, #1]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001924:	e003      	b.n	800192e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001926:	887b      	ldrh	r3, [r7, #2]
 8001928:	041a      	lsls	r2, r3, #16
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	619a      	str	r2, [r3, #24]
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e07f      	b.n	8001a4e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d106      	bne.n	8001968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff f99c 	bl	8000ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2224      	movs	r2, #36	; 0x24
 800196c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0201 	bic.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800198c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800199c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d107      	bne.n	80019b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	e006      	b.n	80019c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d104      	bne.n	80019d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6859      	ldr	r1, [r3, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_I2C_Init+0x11c>)
 80019e2:	430b      	orrs	r3, r1
 80019e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69d9      	ldr	r1, [r3, #28]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1a      	ldr	r2, [r3, #32]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	02008000 	.word	0x02008000

08001a5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	68f9      	ldr	r1, [r7, #12]
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	4798      	blx	r3
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b20      	cmp	r3, #32
 8001aa4:	d138      	bne.n	8001b18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e032      	b.n	8001b1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2224      	movs	r2, #36	; 0x24
 8001ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0201 	bic.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ae2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6819      	ldr	r1, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e000      	b.n	8001b1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b18:	2302      	movs	r3, #2
  }
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b085      	sub	sp, #20
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b20      	cmp	r3, #32
 8001b3a:	d139      	bne.n	8001bb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e033      	b.n	8001bb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2224      	movs	r2, #36	; 0x24
 8001b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0201 	bic.w	r2, r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	e000      	b.n	8001bb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001bb0:	2302      	movs	r3, #2
  }
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40007000 	.word	0x40007000

08001be0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001be8:	2300      	movs	r3, #0
 8001bea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e291      	b.n	800211a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8087 	beq.w	8001d12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c04:	4b96      	ldr	r3, [pc, #600]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d00c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c10:	4b93      	ldr	r3, [pc, #588]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d112      	bne.n	8001c42 <HAL_RCC_OscConfig+0x62>
 8001c1c:	4b90      	ldr	r3, [pc, #576]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c28:	d10b      	bne.n	8001c42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2a:	4b8d      	ldr	r3, [pc, #564]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d06c      	beq.n	8001d10 <HAL_RCC_OscConfig+0x130>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d168      	bne.n	8001d10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e26b      	b.n	800211a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x7a>
 8001c4c:	4b84      	ldr	r3, [pc, #528]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a83      	ldr	r2, [pc, #524]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	e02e      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd8>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x9c>
 8001c62:	4b7f      	ldr	r3, [pc, #508]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a7e      	ldr	r2, [pc, #504]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b7c      	ldr	r3, [pc, #496]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a7b      	ldr	r2, [pc, #492]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e01d      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd8>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0xc0>
 8001c86:	4b76      	ldr	r3, [pc, #472]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a75      	ldr	r2, [pc, #468]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b73      	ldr	r3, [pc, #460]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a72      	ldr	r2, [pc, #456]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd8>
 8001ca0:	4b6f      	ldr	r3, [pc, #444]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a6e      	ldr	r2, [pc, #440]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b6c      	ldr	r3, [pc, #432]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a6b      	ldr	r2, [pc, #428]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fa82 	bl	80011c8 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fa7e 	bl	80011c8 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e21f      	b.n	800211a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b61      	ldr	r3, [pc, #388]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xe8>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fa6e 	bl	80011c8 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fa6a 	bl	80011c8 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e20b      	b.n	800211a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	4b57      	ldr	r3, [pc, #348]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x110>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d069      	beq.n	8001df2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d1e:	4b50      	ldr	r3, [pc, #320]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2a:	4b4d      	ldr	r3, [pc, #308]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d11c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x190>
 8001d36:	4b4a      	ldr	r3, [pc, #296]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d116      	bne.n	8001d70 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x17a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e1df      	b.n	800211a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	4b41      	ldr	r3, [pc, #260]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	493d      	ldr	r1, [pc, #244]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	e040      	b.n	8001df2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d023      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d78:	4b39      	ldr	r3, [pc, #228]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a38      	ldr	r2, [pc, #224]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7ff fa20 	bl	80011c8 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8c:	f7ff fa1c 	bl	80011c8 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e1bd      	b.n	800211a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001daa:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4929      	ldr	r1, [pc, #164]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
 8001dbe:	e018      	b.n	8001df2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc0:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a26      	ldr	r2, [pc, #152]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001dc6:	f023 0301 	bic.w	r3, r3, #1
 8001dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f9fc 	bl	80011c8 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd4:	f7ff f9f8 	bl	80011c8 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e199      	b.n	800211a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d038      	beq.n	8001e70 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d019      	beq.n	8001e3a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0a:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e12:	f7ff f9d9 	bl	80011c8 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1a:	f7ff f9d5 	bl	80011c8 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e176      	b.n	800211a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x23a>
 8001e38:	e01a      	b.n	8001e70 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e3e:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <HAL_RCC_OscConfig+0x280>)
 8001e40:	f023 0301 	bic.w	r3, r3, #1
 8001e44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e46:	f7ff f9bf 	bl	80011c8 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4e:	f7ff f9bb 	bl	80011c8 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d903      	bls.n	8001e64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e15c      	b.n	800211a <HAL_RCC_OscConfig+0x53a>
 8001e60:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e64:	4b91      	ldr	r3, [pc, #580]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1ee      	bne.n	8001e4e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80a4 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7e:	4b8b      	ldr	r3, [pc, #556]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10d      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	4b88      	ldr	r3, [pc, #544]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a87      	ldr	r2, [pc, #540]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40
 8001e96:	4b85      	ldr	r3, [pc, #532]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea6:	4b82      	ldr	r3, [pc, #520]	; (80020b0 <HAL_RCC_OscConfig+0x4d0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d118      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001eb2:	4b7f      	ldr	r3, [pc, #508]	; (80020b0 <HAL_RCC_OscConfig+0x4d0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a7e      	ldr	r2, [pc, #504]	; (80020b0 <HAL_RCC_OscConfig+0x4d0>)
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff f983 	bl	80011c8 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec6:	f7ff f97f 	bl	80011c8 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b64      	cmp	r3, #100	; 0x64
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e120      	b.n	800211a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed8:	4b75      	ldr	r3, [pc, #468]	; (80020b0 <HAL_RCC_OscConfig+0x4d0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x31a>
 8001eec:	4b6f      	ldr	r3, [pc, #444]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	4a6e      	ldr	r2, [pc, #440]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef8:	e02d      	b.n	8001f56 <HAL_RCC_OscConfig+0x376>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x33c>
 8001f02:	4b6a      	ldr	r3, [pc, #424]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f06:	4a69      	ldr	r2, [pc, #420]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0e:	4b67      	ldr	r3, [pc, #412]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	4a66      	ldr	r2, [pc, #408]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001f14:	f023 0304 	bic.w	r3, r3, #4
 8001f18:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1a:	e01c      	b.n	8001f56 <HAL_RCC_OscConfig+0x376>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d10c      	bne.n	8001f3e <HAL_RCC_OscConfig+0x35e>
 8001f24:	4b61      	ldr	r3, [pc, #388]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f28:	4a60      	ldr	r2, [pc, #384]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f30:	4b5e      	ldr	r3, [pc, #376]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f34:	4a5d      	ldr	r2, [pc, #372]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3c:	e00b      	b.n	8001f56 <HAL_RCC_OscConfig+0x376>
 8001f3e:	4b5b      	ldr	r3, [pc, #364]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f42:	4a5a      	ldr	r2, [pc, #360]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4a:	4b58      	ldr	r3, [pc, #352]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4e:	4a57      	ldr	r2, [pc, #348]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001f50:	f023 0304 	bic.w	r3, r3, #4
 8001f54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d015      	beq.n	8001f8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5e:	f7ff f933 	bl	80011c8 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7ff f92f 	bl	80011c8 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e0ce      	b.n	800211a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7c:	4b4b      	ldr	r3, [pc, #300]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ee      	beq.n	8001f66 <HAL_RCC_OscConfig+0x386>
 8001f88:	e014      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8a:	f7ff f91d 	bl	80011c8 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7ff f919 	bl	80011c8 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e0b8      	b.n	800211a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa8:	4b40      	ldr	r3, [pc, #256]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1ee      	bne.n	8001f92 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d105      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fba:	4b3c      	ldr	r3, [pc, #240]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4a3b      	ldr	r2, [pc, #236]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80a4 	beq.w	8002118 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fd0:	4b36      	ldr	r3, [pc, #216]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d06b      	beq.n	80020b4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d149      	bne.n	8002078 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe4:	4b31      	ldr	r3, [pc, #196]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a30      	ldr	r2, [pc, #192]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7ff f8ea 	bl	80011c8 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7ff f8e6 	bl	80011c8 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e087      	b.n	800211a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200a:	4b28      	ldr	r3, [pc, #160]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69da      	ldr	r2, [r3, #28]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	019b      	lsls	r3, r3, #6
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	085b      	lsrs	r3, r3, #1
 800202e:	3b01      	subs	r3, #1
 8002030:	041b      	lsls	r3, r3, #16
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	061b      	lsls	r3, r3, #24
 800203a:	4313      	orrs	r3, r2
 800203c:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 800203e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002042:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002044:	4b19      	ldr	r3, [pc, #100]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a18      	ldr	r2, [pc, #96]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 800204a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800204e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff f8ba 	bl	80011c8 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002058:	f7ff f8b6 	bl	80011c8 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e057      	b.n	800211a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x478>
 8002076:	e04f      	b.n	8002118 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0b      	ldr	r2, [pc, #44]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 800207e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7ff f8a0 	bl	80011c8 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208c:	f7ff f89c 	bl	80011c8 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e03d      	b.n	800211a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209e:	4b03      	ldr	r3, [pc, #12]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x4ac>
 80020aa:	e035      	b.n	8002118 <HAL_RCC_OscConfig+0x538>
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80020b4:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <HAL_RCC_OscConfig+0x544>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d028      	beq.n	8002114 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d121      	bne.n	8002114 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020da:	429a      	cmp	r2, r3
 80020dc:	d11a      	bne.n	8002114 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020e4:	4013      	ands	r3, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d111      	bne.n	8002114 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	085b      	lsrs	r3, r3, #1
 80020fc:	3b01      	subs	r3, #1
 80020fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d107      	bne.n	8002114 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800

08002128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0d0      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002140:	4b6a      	ldr	r3, [pc, #424]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d910      	bls.n	8002170 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b67      	ldr	r3, [pc, #412]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 020f 	bic.w	r2, r3, #15
 8002156:	4965      	ldr	r1, [pc, #404]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b63      	ldr	r3, [pc, #396]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0b8      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d020      	beq.n	80021be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002188:	4b59      	ldr	r3, [pc, #356]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4a58      	ldr	r2, [pc, #352]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 800218e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002192:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a0:	4b53      	ldr	r3, [pc, #332]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 80021a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ac:	4b50      	ldr	r3, [pc, #320]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	494d      	ldr	r1, [pc, #308]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d040      	beq.n	800224c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b47      	ldr	r3, [pc, #284]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d115      	bne.n	800220a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e07f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ea:	4b41      	ldr	r3, [pc, #260]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e073      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fa:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e06b      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220a:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f023 0203 	bic.w	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4936      	ldr	r1, [pc, #216]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 8002218:	4313      	orrs	r3, r2
 800221a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800221c:	f7fe ffd4 	bl	80011c8 <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	e00a      	b.n	800223a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002224:	f7fe ffd0 	bl	80011c8 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e053      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 020c 	and.w	r2, r3, #12
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	429a      	cmp	r2, r3
 800224a:	d1eb      	bne.n	8002224 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800224c:	4b27      	ldr	r3, [pc, #156]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d210      	bcs.n	800227c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 020f 	bic.w	r2, r3, #15
 8002262:	4922      	ldr	r1, [pc, #136]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b20      	ldr	r3, [pc, #128]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e032      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4916      	ldr	r1, [pc, #88]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	490e      	ldr	r1, [pc, #56]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ba:	f000 f821 	bl	8002300 <HAL_RCC_GetSysClockFreq>
 80022be:	4602      	mov	r2, r0
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	490a      	ldr	r1, [pc, #40]	; (80022f4 <HAL_RCC_ClockConfig+0x1cc>)
 80022cc:	5ccb      	ldrb	r3, [r1, r3]
 80022ce:	fa22 f303 	lsr.w	r3, r2, r3
 80022d2:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <HAL_RCC_ClockConfig+0x1d0>)
 80022d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x1d4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe ff30 	bl	8001140 <HAL_InitTick>

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40023c00 	.word	0x40023c00
 80022f0:	40023800 	.word	0x40023800
 80022f4:	0800b4f0 	.word	0x0800b4f0
 80022f8:	20000000 	.word	0x20000000
 80022fc:	20000004 	.word	0x20000004

08002300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002304:	b090      	sub	sp, #64	; 0x40
 8002306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	637b      	str	r3, [r7, #52]	; 0x34
 800230c:	2300      	movs	r3, #0
 800230e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002310:	2300      	movs	r3, #0
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002318:	4b59      	ldr	r3, [pc, #356]	; (8002480 <HAL_RCC_GetSysClockFreq+0x180>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 030c 	and.w	r3, r3, #12
 8002320:	2b08      	cmp	r3, #8
 8002322:	d00d      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x40>
 8002324:	2b08      	cmp	r3, #8
 8002326:	f200 80a1 	bhi.w	800246c <HAL_RCC_GetSysClockFreq+0x16c>
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0x34>
 800232e:	2b04      	cmp	r3, #4
 8002330:	d003      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0x3a>
 8002332:	e09b      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002334:	4b53      	ldr	r3, [pc, #332]	; (8002484 <HAL_RCC_GetSysClockFreq+0x184>)
 8002336:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002338:	e09b      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800233a:	4b53      	ldr	r3, [pc, #332]	; (8002488 <HAL_RCC_GetSysClockFreq+0x188>)
 800233c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800233e:	e098      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002340:	4b4f      	ldr	r3, [pc, #316]	; (8002480 <HAL_RCC_GetSysClockFreq+0x180>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002348:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800234a:	4b4d      	ldr	r3, [pc, #308]	; (8002480 <HAL_RCC_GetSysClockFreq+0x180>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d028      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002356:	4b4a      	ldr	r3, [pc, #296]	; (8002480 <HAL_RCC_GetSysClockFreq+0x180>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	099b      	lsrs	r3, r3, #6
 800235c:	2200      	movs	r2, #0
 800235e:	623b      	str	r3, [r7, #32]
 8002360:	627a      	str	r2, [r7, #36]	; 0x24
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002368:	2100      	movs	r1, #0
 800236a:	4b47      	ldr	r3, [pc, #284]	; (8002488 <HAL_RCC_GetSysClockFreq+0x188>)
 800236c:	fb03 f201 	mul.w	r2, r3, r1
 8002370:	2300      	movs	r3, #0
 8002372:	fb00 f303 	mul.w	r3, r0, r3
 8002376:	4413      	add	r3, r2
 8002378:	4a43      	ldr	r2, [pc, #268]	; (8002488 <HAL_RCC_GetSysClockFreq+0x188>)
 800237a:	fba0 1202 	umull	r1, r2, r0, r2
 800237e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002380:	460a      	mov	r2, r1
 8002382:	62ba      	str	r2, [r7, #40]	; 0x28
 8002384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002386:	4413      	add	r3, r2
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800238a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238c:	2200      	movs	r2, #0
 800238e:	61bb      	str	r3, [r7, #24]
 8002390:	61fa      	str	r2, [r7, #28]
 8002392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002396:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800239a:	f7fd ff39 	bl	8000210 <__aeabi_uldivmod>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4613      	mov	r3, r2
 80023a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a6:	e053      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a8:	4b35      	ldr	r3, [pc, #212]	; (8002480 <HAL_RCC_GetSysClockFreq+0x180>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	099b      	lsrs	r3, r3, #6
 80023ae:	2200      	movs	r2, #0
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	617a      	str	r2, [r7, #20]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023ba:	f04f 0b00 	mov.w	fp, #0
 80023be:	4652      	mov	r2, sl
 80023c0:	465b      	mov	r3, fp
 80023c2:	f04f 0000 	mov.w	r0, #0
 80023c6:	f04f 0100 	mov.w	r1, #0
 80023ca:	0159      	lsls	r1, r3, #5
 80023cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023d0:	0150      	lsls	r0, r2, #5
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	ebb2 080a 	subs.w	r8, r2, sl
 80023da:	eb63 090b 	sbc.w	r9, r3, fp
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023f2:	ebb2 0408 	subs.w	r4, r2, r8
 80023f6:	eb63 0509 	sbc.w	r5, r3, r9
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	00eb      	lsls	r3, r5, #3
 8002404:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002408:	00e2      	lsls	r2, r4, #3
 800240a:	4614      	mov	r4, r2
 800240c:	461d      	mov	r5, r3
 800240e:	eb14 030a 	adds.w	r3, r4, sl
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	eb45 030b 	adc.w	r3, r5, fp
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002426:	4629      	mov	r1, r5
 8002428:	028b      	lsls	r3, r1, #10
 800242a:	4621      	mov	r1, r4
 800242c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002430:	4621      	mov	r1, r4
 8002432:	028a      	lsls	r2, r1, #10
 8002434:	4610      	mov	r0, r2
 8002436:	4619      	mov	r1, r3
 8002438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243a:	2200      	movs	r2, #0
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	60fa      	str	r2, [r7, #12]
 8002440:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002444:	f7fd fee4 	bl	8000210 <__aeabi_uldivmod>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4613      	mov	r3, r2
 800244e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_RCC_GetSysClockFreq+0x180>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	0c1b      	lsrs	r3, r3, #16
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	3301      	adds	r3, #1
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002460:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800246a:	e002      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_RCC_GetSysClockFreq+0x184>)
 800246e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002474:	4618      	mov	r0, r3
 8002476:	3740      	adds	r7, #64	; 0x40
 8002478:	46bd      	mov	sp, r7
 800247a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	00f42400 	.word	0x00f42400
 8002488:	017d7840 	.word	0x017d7840

0800248c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d012      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024b4:	4b69      	ldr	r3, [pc, #420]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4a68      	ldr	r2, [pc, #416]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024be:	6093      	str	r3, [r2, #8]
 80024c0:	4b66      	ldr	r3, [pc, #408]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c8:	4964      	ldr	r1, [pc, #400]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80024d6:	2301      	movs	r3, #1
 80024d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d017      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024e6:	4b5d      	ldr	r3, [pc, #372]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f4:	4959      	ldr	r1, [pc, #356]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002504:	d101      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002506:	2301      	movs	r3, #1
 8002508:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002512:	2301      	movs	r3, #1
 8002514:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d017      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002522:	4b4e      	ldr	r3, [pc, #312]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002528:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	494a      	ldr	r1, [pc, #296]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002540:	d101      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002542:	2301      	movs	r3, #1
 8002544:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800254e:	2301      	movs	r3, #1
 8002550:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800255e:	2301      	movs	r3, #1
 8002560:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 808b 	beq.w	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002570:	4b3a      	ldr	r3, [pc, #232]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	4a39      	ldr	r2, [pc, #228]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257a:	6413      	str	r3, [r2, #64]	; 0x40
 800257c:	4b37      	ldr	r3, [pc, #220]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002588:	4b35      	ldr	r3, [pc, #212]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a34      	ldr	r2, [pc, #208]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800258e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002592:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002594:	f7fe fe18 	bl	80011c8 <HAL_GetTick>
 8002598:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259c:	f7fe fe14 	bl	80011c8 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e357      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025ae:	4b2c      	ldr	r3, [pc, #176]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025ba:	4b28      	ldr	r3, [pc, #160]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d035      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d02e      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025d8:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025e2:	4b1e      	ldr	r3, [pc, #120]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e6:	4a1d      	ldr	r2, [pc, #116]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025ee:	4b1b      	ldr	r3, [pc, #108]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	4a1a      	ldr	r2, [pc, #104]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80025fa:	4a18      	ldr	r2, [pc, #96]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002600:	4b16      	ldr	r3, [pc, #88]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d114      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe fddc 	bl	80011c8 <HAL_GetTick>
 8002610:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002612:	e00a      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002614:	f7fe fdd8 	bl	80011c8 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e319      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0ee      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002642:	d111      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002650:	4b04      	ldr	r3, [pc, #16]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002652:	400b      	ands	r3, r1
 8002654:	4901      	ldr	r1, [pc, #4]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
 800265a:	e00b      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800265c:	40023800 	.word	0x40023800
 8002660:	40007000 	.word	0x40007000
 8002664:	0ffffcff 	.word	0x0ffffcff
 8002668:	4baa      	ldr	r3, [pc, #680]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4aa9      	ldr	r2, [pc, #676]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800266e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002672:	6093      	str	r3, [r2, #8]
 8002674:	4ba7      	ldr	r3, [pc, #668]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002676:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002680:	49a4      	ldr	r1, [pc, #656]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002682:	4313      	orrs	r3, r2
 8002684:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d010      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002692:	4ba0      	ldr	r3, [pc, #640]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002698:	4a9e      	ldr	r2, [pc, #632]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800269a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800269e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026a2:	4b9c      	ldr	r3, [pc, #624]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	4999      	ldr	r1, [pc, #612]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026c0:	4b94      	ldr	r3, [pc, #592]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ce:	4991      	ldr	r1, [pc, #580]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026e2:	4b8c      	ldr	r3, [pc, #560]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026f0:	4988      	ldr	r1, [pc, #544]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002704:	4b83      	ldr	r3, [pc, #524]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002712:	4980      	ldr	r1, [pc, #512]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002726:	4b7b      	ldr	r3, [pc, #492]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	4977      	ldr	r1, [pc, #476]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002748:	4b72      	ldr	r3, [pc, #456]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274e:	f023 0203 	bic.w	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	496f      	ldr	r1, [pc, #444]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800276a:	4b6a      	ldr	r3, [pc, #424]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800276c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002770:	f023 020c 	bic.w	r2, r3, #12
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002778:	4966      	ldr	r1, [pc, #408]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800278c:	4b61      	ldr	r3, [pc, #388]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002792:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279a:	495e      	ldr	r1, [pc, #376]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027ae:	4b59      	ldr	r3, [pc, #356]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027bc:	4955      	ldr	r1, [pc, #340]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027d0:	4b50      	ldr	r3, [pc, #320]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027de:	494d      	ldr	r1, [pc, #308]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80027f2:	4b48      	ldr	r3, [pc, #288]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002800:	4944      	ldr	r1, [pc, #272]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002814:	4b3f      	ldr	r3, [pc, #252]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	493c      	ldr	r1, [pc, #240]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002836:	4b37      	ldr	r3, [pc, #220]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002844:	4933      	ldr	r1, [pc, #204]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002858:	4b2e      	ldr	r3, [pc, #184]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002866:	492b      	ldr	r1, [pc, #172]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d011      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800287a:	4b26      	ldr	r3, [pc, #152]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002880:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002888:	4922      	ldr	r1, [pc, #136]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002894:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002898:	d101      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800289a:	2301      	movs	r3, #1
 800289c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80028aa:	2301      	movs	r3, #1
 80028ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028ba:	4b16      	ldr	r3, [pc, #88]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c8:	4912      	ldr	r1, [pc, #72]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00b      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028dc:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ec:	4909      	ldr	r1, [pc, #36]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d006      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 80d9 	beq.w	8002aba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002908:	4b02      	ldr	r3, [pc, #8]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a01      	ldr	r2, [pc, #4]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800290e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002912:	e001      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002914:	40023800 	.word	0x40023800
 8002918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800291a:	f7fe fc55 	bl	80011c8 <HAL_GetTick>
 800291e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002922:	f7fe fc51 	bl	80011c8 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b64      	cmp	r3, #100	; 0x64
 800292e:	d901      	bls.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e194      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002934:	4b6c      	ldr	r3, [pc, #432]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f0      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d021      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	2b00      	cmp	r3, #0
 8002952:	d11d      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002954:	4b64      	ldr	r3, [pc, #400]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295a:	0c1b      	lsrs	r3, r3, #16
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002962:	4b61      	ldr	r3, [pc, #388]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002968:	0e1b      	lsrs	r3, r3, #24
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	019a      	lsls	r2, r3, #6
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	041b      	lsls	r3, r3, #16
 800297a:	431a      	orrs	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	061b      	lsls	r3, r3, #24
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	071b      	lsls	r3, r3, #28
 8002988:	4957      	ldr	r1, [pc, #348]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d004      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029a4:	d00a      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d02e      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ba:	d129      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029bc:	4b4a      	ldr	r3, [pc, #296]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c2:	0c1b      	lsrs	r3, r3, #16
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029ca:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d0:	0f1b      	lsrs	r3, r3, #28
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	019a      	lsls	r2, r3, #6
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	041b      	lsls	r3, r3, #16
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	431a      	orrs	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	071b      	lsls	r3, r3, #28
 80029f0:	493d      	ldr	r1, [pc, #244]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029f8:	4b3b      	ldr	r3, [pc, #236]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029fe:	f023 021f 	bic.w	r2, r3, #31
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	3b01      	subs	r3, #1
 8002a08:	4937      	ldr	r1, [pc, #220]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01d      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a1c:	4b32      	ldr	r3, [pc, #200]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a22:	0e1b      	lsrs	r3, r3, #24
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a30:	0f1b      	lsrs	r3, r3, #28
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	019a      	lsls	r2, r3, #6
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	041b      	lsls	r3, r3, #16
 8002a44:	431a      	orrs	r2, r3
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	061b      	lsls	r3, r3, #24
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	071b      	lsls	r3, r3, #28
 8002a50:	4925      	ldr	r1, [pc, #148]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d011      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	019a      	lsls	r2, r3, #6
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	041b      	lsls	r3, r3, #16
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	061b      	lsls	r3, r3, #24
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	071b      	lsls	r3, r3, #28
 8002a80:	4919      	ldr	r1, [pc, #100]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a88:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a16      	ldr	r2, [pc, #88]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a94:	f7fe fb98 	bl	80011c8 <HAL_GetTick>
 8002a98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a9c:	f7fe fb94 	bl	80011c8 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b64      	cmp	r3, #100	; 0x64
 8002aa8:	d901      	bls.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e0d7      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002aae:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	f040 80cd 	bne.w	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ac2:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a08      	ldr	r2, [pc, #32]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ace:	f7fe fb7b 	bl	80011c8 <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ad4:	e00a      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ad6:	f7fe fb77 	bl	80011c8 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b64      	cmp	r3, #100	; 0x64
 8002ae2:	d903      	bls.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e0ba      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ae8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002aec:	4b5e      	ldr	r3, [pc, #376]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af8:	d0ed      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d02e      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d12a      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b22:	4b51      	ldr	r3, [pc, #324]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b30:	4b4d      	ldr	r3, [pc, #308]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b36:	0f1b      	lsrs	r3, r3, #28
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	019a      	lsls	r2, r3, #6
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	041b      	lsls	r3, r3, #16
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	061b      	lsls	r3, r3, #24
 8002b50:	431a      	orrs	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	071b      	lsls	r3, r3, #28
 8002b56:	4944      	ldr	r1, [pc, #272]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b5e:	4b42      	ldr	r3, [pc, #264]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b64:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	493d      	ldr	r1, [pc, #244]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d022      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b8c:	d11d      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b8e:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b94:	0e1b      	lsrs	r3, r3, #24
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b9c:	4b32      	ldr	r3, [pc, #200]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	0f1b      	lsrs	r3, r3, #28
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	019a      	lsls	r2, r3, #6
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	041b      	lsls	r3, r3, #16
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	061b      	lsls	r3, r3, #24
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	071b      	lsls	r3, r3, #28
 8002bc2:	4929      	ldr	r1, [pc, #164]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d028      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bd6:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bdc:	0e1b      	lsrs	r3, r3, #24
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002be4:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	0c1b      	lsrs	r3, r3, #16
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	019a      	lsls	r2, r3, #6
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	041b      	lsls	r3, r3, #16
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	061b      	lsls	r3, r3, #24
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	071b      	lsls	r3, r3, #28
 8002c0a:	4917      	ldr	r1, [pc, #92]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	4911      	ldr	r1, [pc, #68]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c34:	f7fe fac8 	bl	80011c8 <HAL_GetTick>
 8002c38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c3c:	f7fe fac4 	bl	80011c8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e007      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c5a:	d1ef      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3720      	adds	r7, #32
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800

08002c6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c8a:	f040 808c 	bne.w	8002da6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8002c8e:	4b95      	ldr	r3, [pc, #596]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c94:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c9c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ca4:	d07c      	beq.n	8002da0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cac:	d87d      	bhi.n	8002daa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d004      	beq.n	8002cbe <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cba:	d039      	beq.n	8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8002cbc:	e075      	b.n	8002daa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002cbe:	4b89      	ldr	r3, [pc, #548]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d108      	bne.n	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002cca:	4b86      	ldr	r3, [pc, #536]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cd2:	4a85      	ldr	r2, [pc, #532]	; (8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8002cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	e007      	b.n	8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002cdc:	4b81      	ldr	r3, [pc, #516]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce4:	4a81      	ldr	r2, [pc, #516]	; (8002eec <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8002ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cea:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8002cec:	4b7d      	ldr	r3, [pc, #500]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf2:	0e1b      	lsrs	r3, r3, #24
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8002cfa:	4b7a      	ldr	r3, [pc, #488]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d00:	099b      	lsrs	r3, r3, #6
 8002d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	fb03 f202 	mul.w	r2, r3, r2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d12:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8002d14:	4b73      	ldr	r3, [pc, #460]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	3301      	adds	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2c:	617b      	str	r3, [r7, #20]
        break;
 8002d2e:	e03d      	b.n	8002dac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002d30:	4b6c      	ldr	r3, [pc, #432]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d108      	bne.n	8002d4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002d3c:	4b69      	ldr	r3, [pc, #420]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d44:	4a68      	ldr	r2, [pc, #416]	; (8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8002d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	e007      	b.n	8002d5e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d56:	4a65      	ldr	r2, [pc, #404]	; (8002eec <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8002d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002d5e:	4b61      	ldr	r3, [pc, #388]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d64:	0e1b      	lsrs	r3, r3, #24
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8002d6c:	4b5d      	ldr	r3, [pc, #372]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d72:	099b      	lsrs	r3, r3, #6
 8002d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	fb03 f202 	mul.w	r2, r3, r2
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8002d86:	4b57      	ldr	r3, [pc, #348]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	3301      	adds	r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	617b      	str	r3, [r7, #20]
        break;
 8002d9e:	e005      	b.n	8002dac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8002da0:	4b53      	ldr	r3, [pc, #332]	; (8002ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8002da2:	617b      	str	r3, [r7, #20]
        break;
 8002da4:	e002      	b.n	8002dac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8002da6:	bf00      	nop
 8002da8:	e000      	b.n	8002dac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8002daa:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002db2:	f040 808c 	bne.w	8002ece <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8002db6:	4b4b      	ldr	r3, [pc, #300]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dbc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002dc4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dcc:	d07c      	beq.n	8002ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dd4:	d87d      	bhi.n	8002ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d004      	beq.n	8002de6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002de2:	d039      	beq.n	8002e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8002de4:	e075      	b.n	8002ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002de6:	4b3f      	ldr	r3, [pc, #252]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d108      	bne.n	8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002df2:	4b3c      	ldr	r3, [pc, #240]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dfa:	4a3b      	ldr	r2, [pc, #236]	; (8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8002dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	e007      	b.n	8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002e04:	4b37      	ldr	r3, [pc, #220]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e0c:	4a37      	ldr	r2, [pc, #220]	; (8002eec <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8002e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e12:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8002e14:	4b33      	ldr	r3, [pc, #204]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1a:	0e1b      	lsrs	r3, r3, #24
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8002e22:	4b30      	ldr	r3, [pc, #192]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e28:	099b      	lsrs	r3, r3, #6
 8002e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	fb03 f202 	mul.w	r2, r3, r2
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8002e3c:	4b29      	ldr	r3, [pc, #164]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e42:	0a1b      	lsrs	r3, r3, #8
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	3301      	adds	r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	617b      	str	r3, [r7, #20]
        break;
 8002e56:	e03d      	b.n	8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002e58:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d108      	bne.n	8002e76 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002e64:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8002e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	e007      	b.n	8002e86 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002e76:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e7e:	4a1b      	ldr	r2, [pc, #108]	; (8002eec <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002e86:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e8c:	0e1b      	lsrs	r3, r3, #24
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8002e94:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e9a:	099b      	lsrs	r3, r3, #6
 8002e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	fb03 f202 	mul.w	r2, r3, r2
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eac:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	3301      	adds	r3, #1
 8002eba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	617b      	str	r3, [r7, #20]
        break;
 8002ec6:	e005      	b.n	8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8002eca:	617b      	str	r3, [r7, #20]
        break;
 8002ecc:	e002      	b.n	8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8002ece:	bf00      	nop
 8002ed0:	e000      	b.n	8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8002ed2:	bf00      	nop

  return frequency;
 8002ed4:	697b      	ldr	r3, [r7, #20]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	371c      	adds	r7, #28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	00f42400 	.word	0x00f42400
 8002eec:	017d7840 	.word	0x017d7840
 8002ef0:	00bb8000 	.word	0x00bb8000

08002ef4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e081      	b.n	800300a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	7f5b      	ldrb	r3, [r3, #29]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d105      	bne.n	8002f1c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fd ff4e 	bl	8000db8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	22ca      	movs	r2, #202	; 0xca
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2253      	movs	r2, #83	; 0x53
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f898 	bl	8003068 <RTC_EnterInitMode>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	22ff      	movs	r2, #255	; 0xff
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2204      	movs	r2, #4
 8002f4a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e05c      	b.n	800300a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6899      	ldr	r1, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4b2e      	ldr	r3, [pc, #184]	; (8003014 <HAL_RTC_Init+0x120>)
 8002f5c:	400b      	ands	r3, r1
 8002f5e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6899      	ldr	r1, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68d2      	ldr	r2, [r2, #12]
 8002f86:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6919      	ldr	r1, [r3, #16]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	041a      	lsls	r2, r3, #16
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002faa:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f82c 	bl	8003018 <HAL_RTC_WaitForSynchro>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d008      	beq.n	8002fd8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	22ff      	movs	r2, #255	; 0xff
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e018      	b.n	800300a <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0208 	bic.w	r2, r2, #8
 8002fe6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	22ff      	movs	r2, #255	; 0xff
 8003000:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003008:	2300      	movs	r3, #0
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	ff8fffbf 	.word	0xff8fffbf

08003018 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003032:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003034:	f7fe f8c8 	bl	80011c8 <HAL_GetTick>
 8003038:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800303a:	e009      	b.n	8003050 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800303c:	f7fe f8c4 	bl	80011c8 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800304a:	d901      	bls.n	8003050 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e007      	b.n	8003060 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0ee      	beq.n	800303c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d119      	bne.n	80030b6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f04f 32ff 	mov.w	r2, #4294967295
 800308a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800308c:	f7fe f89c 	bl	80011c8 <HAL_GetTick>
 8003090:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003092:	e009      	b.n	80030a8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003094:	f7fe f898 	bl	80011c8 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030a2:	d901      	bls.n	80030a8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e007      	b.n	80030b8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0ee      	beq.n	8003094 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e156      	b.n	800338c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fd ff3a 	bl	8000f6c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f95b 	bl	80033bc <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d00c      	beq.n	8003128 <HAL_SAI_Init+0x68>
 800310e:	2b02      	cmp	r3, #2
 8003110:	d80d      	bhi.n	800312e <HAL_SAI_Init+0x6e>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <HAL_SAI_Init+0x5c>
 8003116:	2b01      	cmp	r3, #1
 8003118:	d003      	beq.n	8003122 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800311a:	e008      	b.n	800312e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	61fb      	str	r3, [r7, #28]
      break;
 8003120:	e006      	b.n	8003130 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8003122:	2310      	movs	r3, #16
 8003124:	61fb      	str	r3, [r7, #28]
      break;
 8003126:	e003      	b.n	8003130 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8003128:	2320      	movs	r3, #32
 800312a:	61fb      	str	r3, [r7, #28]
      break;
 800312c:	e000      	b.n	8003130 <HAL_SAI_Init+0x70>
      break;
 800312e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d81e      	bhi.n	8003176 <HAL_SAI_Init+0xb6>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <HAL_SAI_Init+0x80>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003151 	.word	0x08003151
 8003144:	08003157 	.word	0x08003157
 8003148:	0800315f 	.word	0x0800315f
 800314c:	08003167 	.word	0x08003167
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
    }
    break;
 8003154:	e010      	b.n	8003178 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8003156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800315a:	617b      	str	r3, [r7, #20]
    }
    break;
 800315c:	e00c      	b.n	8003178 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800315e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003162:	617b      	str	r3, [r7, #20]
    }
    break;
 8003164:	e008      	b.n	8003178 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003166:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800316a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	61fb      	str	r3, [r7, #28]
    }
    break;
 8003174:	e000      	b.n	8003178 <HAL_SAI_Init+0xb8>
    default:
      break;
 8003176:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a85      	ldr	r2, [pc, #532]	; (8003394 <HAL_SAI_Init+0x2d4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d004      	beq.n	800318c <HAL_SAI_Init+0xcc>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a84      	ldr	r2, [pc, #528]	; (8003398 <HAL_SAI_Init+0x2d8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d103      	bne.n	8003194 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800318c:	4a83      	ldr	r2, [pc, #524]	; (800339c <HAL_SAI_Init+0x2dc>)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e002      	b.n	800319a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8003194:	4a82      	ldr	r2, [pc, #520]	; (80033a0 <HAL_SAI_Init+0x2e0>)
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d04c      	beq.n	800323c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a7a      	ldr	r2, [pc, #488]	; (8003394 <HAL_SAI_Init+0x2d4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d004      	beq.n	80031ba <HAL_SAI_Init+0xfa>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a78      	ldr	r2, [pc, #480]	; (8003398 <HAL_SAI_Init+0x2d8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d104      	bne.n	80031c4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80031ba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80031be:	f7ff fd55 	bl	8002c6c <HAL_RCCEx_GetPeriphCLKFreq>
 80031c2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a76      	ldr	r2, [pc, #472]	; (80033a4 <HAL_SAI_Init+0x2e4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d004      	beq.n	80031d8 <HAL_SAI_Init+0x118>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a75      	ldr	r2, [pc, #468]	; (80033a8 <HAL_SAI_Init+0x2e8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d104      	bne.n	80031e2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80031d8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80031dc:	f7ff fd46 	bl	8002c6c <HAL_RCCEx_GetPeriphCLKFreq>
 80031e0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	461a      	mov	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	025b      	lsls	r3, r3, #9
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4a6b      	ldr	r2, [pc, #428]	; (80033ac <HAL_SAI_Init+0x2ec>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	08da      	lsrs	r2, r3, #3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8003208:	68f9      	ldr	r1, [r7, #12]
 800320a:	4b68      	ldr	r3, [pc, #416]	; (80033ac <HAL_SAI_Init+0x2ec>)
 800320c:	fba3 2301 	umull	r2, r3, r3, r1
 8003210:	08da      	lsrs	r2, r3, #3
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	1aca      	subs	r2, r1, r3
 800321c:	2a08      	cmp	r2, #8
 800321e:	d904      	bls.n	800322a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	2b04      	cmp	r3, #4
 8003230:	d104      	bne.n	800323c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	085a      	lsrs	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_SAI_Init+0x18c>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d109      	bne.n	8003260 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_SAI_Init+0x198>
 8003254:	2300      	movs	r3, #0
 8003256:	e001      	b.n	800325c <HAL_SAI_Init+0x19c>
 8003258:	f44f 7300 	mov.w	r3, #512	; 0x200
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	e008      	b.n	8003272 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003264:	2b01      	cmp	r3, #1
 8003266:	d102      	bne.n	800326e <HAL_SAI_Init+0x1ae>
 8003268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800326c:	e000      	b.n	8003270 <HAL_SAI_Init+0x1b0>
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6819      	ldr	r1, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4b4c      	ldr	r3, [pc, #304]	; (80033b0 <HAL_SAI_Init+0x2f0>)
 800327e:	400b      	ands	r3, r1
 8003280:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6819      	ldr	r1, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003296:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	431a      	orrs	r2, r3
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 80032aa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80032b6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	051b      	lsls	r3, r3, #20
 80032be:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6859      	ldr	r1, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	4b38      	ldr	r3, [pc, #224]	; (80033b4 <HAL_SAI_Init+0x2f4>)
 80032d4:	400b      	ands	r3, r1
 80032d6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6859      	ldr	r1, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6899      	ldr	r1, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <HAL_SAI_Init+0x2f8>)
 8003302:	400b      	ands	r3, r1
 8003304:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6899      	ldr	r1, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003316:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800331c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8003322:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	3b01      	subs	r3, #1
 800332a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800332c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68d9      	ldr	r1, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	f24f 0320 	movw	r3, #61472	; 0xf020
 8003344:	400b      	ands	r3, r1
 8003346:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68d9      	ldr	r1, [r3, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003356:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335c:	041b      	lsls	r3, r3, #16
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003364:	3b01      	subs	r3, #1
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3720      	adds	r7, #32
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40015804 	.word	0x40015804
 8003398:	40015824 	.word	0x40015824
 800339c:	40015800 	.word	0x40015800
 80033a0:	40015c00 	.word	0x40015c00
 80033a4:	40015c04 	.word	0x40015c04
 80033a8:	40015c24 	.word	0x40015c24
 80033ac:	cccccccd 	.word	0xcccccccd
 80033b0:	ff05c010 	.word	0xff05c010
 80033b4:	ffff1ff0 	.word	0xffff1ff0
 80033b8:	fff88000 	.word	0xfff88000

080033bc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80033c4:	4b17      	ldr	r3, [pc, #92]	; (8003424 <SAI_Disable+0x68>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a17      	ldr	r2, [pc, #92]	; (8003428 <SAI_Disable+0x6c>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	0b1b      	lsrs	r3, r3, #12
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80033e6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1e5a      	subs	r2, r3, #1
 80033ec:	60fa      	str	r2, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10a      	bne.n	8003408 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	72fb      	strb	r3, [r7, #11]
      break;
 8003406:	e006      	b.n	8003416 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e8      	bne.n	80033e8 <SAI_Disable+0x2c>

  return status;
 8003416:	7afb      	ldrb	r3, [r7, #11]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	20000000 	.word	0x20000000
 8003428:	95cbec1b 	.word	0x95cbec1b

0800342c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e022      	b.n	8003484 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7fd fcdf 	bl	8000e14 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2203      	movs	r2, #3
 800345a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f814 	bl	800348c <HAL_SD_InitCard>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e00a      	b.n	8003484 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800348c:	b5b0      	push	{r4, r5, r7, lr}
 800348e:	b08e      	sub	sp, #56	; 0x38
 8003490:	af04      	add	r7, sp, #16
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003494:	2300      	movs	r3, #0
 8003496:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800349c:	2300      	movs	r3, #0
 800349e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80034a8:	2376      	movs	r3, #118	; 0x76
 80034aa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681d      	ldr	r5, [r3, #0]
 80034b0:	466c      	mov	r4, sp
 80034b2:	f107 0314 	add.w	r3, r7, #20
 80034b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80034be:	f107 0308 	add.w	r3, r7, #8
 80034c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034c4:	4628      	mov	r0, r5
 80034c6:	f001 fc99 	bl	8004dfc <SDMMC_Init>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80034d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e059      	b.n	8003590 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ea:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f001 fcaf 	bl	8004e54 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003504:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003506:	2002      	movs	r0, #2
 8003508:	f7fd fe6a 	bl	80011e0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fd75 	bl	8003ffc <SD_PowerON>
 8003512:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e02e      	b.n	8003590 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fc94 	bl	8003e60 <SD_InitCard>
 8003538:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00b      	beq.n	8003558 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e01b      	b.n	8003590 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003560:	4618      	mov	r0, r3
 8003562:	f001 fd09 	bl	8004f78 <SDMMC_CmdBlockLength>
 8003566:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00f      	beq.n	800358e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a09      	ldr	r2, [pc, #36]	; (8003598 <HAL_SD_InitCard+0x10c>)
 8003574:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3728      	adds	r7, #40	; 0x28
 8003594:	46bd      	mov	sp, r7
 8003596:	bdb0      	pop	{r4, r5, r7, pc}
 8003598:	004005ff 	.word	0x004005ff

0800359c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08c      	sub	sp, #48	; 0x30
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d107      	bne.n	80035c4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0c3      	b.n	800374c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	f040 80bc 	bne.w	800374a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80035d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	441a      	add	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d907      	bls.n	80035f6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e0aa      	b.n	800374c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2203      	movs	r2, #3
 80035fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2200      	movs	r2, #0
 8003604:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8003614:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	4a4e      	ldr	r2, [pc, #312]	; (8003754 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800361c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	4a4d      	ldr	r2, [pc, #308]	; (8003758 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003624:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	2200      	movs	r2, #0
 800362c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	2200      	movs	r2, #0
 8003634:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3380      	adds	r3, #128	; 0x80
 800365c:	4619      	mov	r1, r3
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	025b      	lsls	r3, r3, #9
 8003664:	089b      	lsrs	r3, r3, #2
 8003666:	f7fd fef0 	bl	800144a <HAL_DMA_Start_IT>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d017      	beq.n	80036a0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800367e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a35      	ldr	r2, [pc, #212]	; (800375c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003686:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e055      	b.n	800374c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0208 	orr.w	r2, r2, #8
 80036ae:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d002      	beq.n	80036be <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	025b      	lsls	r3, r3, #9
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80036be:	f04f 33ff 	mov.w	r3, #4294967295
 80036c2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	025b      	lsls	r3, r3, #9
 80036c8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80036ca:	2390      	movs	r3, #144	; 0x90
 80036cc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80036ce:	2302      	movs	r3, #2
 80036d0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80036d6:	2301      	movs	r3, #1
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f107 0210 	add.w	r2, r7, #16
 80036e2:	4611      	mov	r1, r2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 fc1b 	bl	8004f20 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d90a      	bls.n	8003706 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2282      	movs	r2, #130	; 0x82
 80036f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036fc:	4618      	mov	r0, r3
 80036fe:	f001 fc7f 	bl	8005000 <SDMMC_CmdReadMultiBlock>
 8003702:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003704:	e009      	b.n	800371a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2281      	movs	r2, #129	; 0x81
 800370a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003712:	4618      	mov	r0, r3
 8003714:	f001 fc52 	bl	8004fbc <SDMMC_CmdReadSingleBlock>
 8003718:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d012      	beq.n	8003746 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a0d      	ldr	r2, [pc, #52]	; (800375c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003726:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800372c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372e:	431a      	orrs	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e002      	b.n	800374c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	e000      	b.n	800374c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800374a:	2302      	movs	r3, #2
  }
}
 800374c:	4618      	mov	r0, r3
 800374e:	3730      	adds	r7, #48	; 0x30
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	08003d4b 	.word	0x08003d4b
 8003758:	08003dbd 	.word	0x08003dbd
 800375c:	004005ff 	.word	0x004005ff

08003760 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08c      	sub	sp, #48	; 0x30
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0c6      	b.n	8003916 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	f040 80bf 	bne.w	8003914 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800379c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	441a      	add	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d907      	bls.n	80037ba <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e0ad      	b.n	8003916 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2203      	movs	r2, #3
 80037be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2200      	movs	r2, #0
 80037c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 021a 	orr.w	r2, r2, #26
 80037d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037de:	4a50      	ldr	r2, [pc, #320]	; (8003920 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80037e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e6:	4a4f      	ldr	r2, [pc, #316]	; (8003924 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80037e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ee:	2200      	movs	r2, #0
 80037f0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d002      	beq.n	8003800 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	025b      	lsls	r3, r3, #9
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d90a      	bls.n	800381c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	22a0      	movs	r2, #160	; 0xa0
 800380a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003812:	4618      	mov	r0, r3
 8003814:	f001 fc38 	bl	8005088 <SDMMC_CmdWriteMultiBlock>
 8003818:	62f8      	str	r0, [r7, #44]	; 0x2c
 800381a:	e009      	b.n	8003830 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2290      	movs	r2, #144	; 0x90
 8003820:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003828:	4618      	mov	r0, r3
 800382a:	f001 fc0b 	bl	8005044 <SDMMC_CmdWriteSingleBlock>
 800382e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d012      	beq.n	800385c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a3b      	ldr	r2, [pc, #236]	; (8003928 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800383c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003844:	431a      	orrs	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e05c      	b.n	8003916 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0208 	orr.w	r2, r2, #8
 800386a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	2240      	movs	r2, #64	; 0x40
 8003872:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3380      	adds	r3, #128	; 0x80
 800389c:	461a      	mov	r2, r3
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	025b      	lsls	r3, r3, #9
 80038a2:	089b      	lsrs	r3, r3, #2
 80038a4:	f7fd fdd1 	bl	800144a <HAL_DMA_Start_IT>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d01a      	beq.n	80038e4 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 021a 	bic.w	r2, r2, #26
 80038bc:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a19      	ldr	r2, [pc, #100]	; (8003928 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e018      	b.n	8003916 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80038e4:	f04f 33ff 	mov.w	r3, #4294967295
 80038e8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	025b      	lsls	r3, r3, #9
 80038ee:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80038f0:	2390      	movs	r3, #144	; 0x90
 80038f2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80038fc:	2301      	movs	r3, #1
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f107 0210 	add.w	r2, r7, #16
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f001 fb08 	bl	8004f20 <SDMMC_ConfigData>

      return HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	e000      	b.n	8003916 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003914:	2302      	movs	r3, #2
  }
}
 8003916:	4618      	mov	r0, r3
 8003918:	3730      	adds	r7, #48	; 0x30
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	08003d21 	.word	0x08003d21
 8003924:	08003dbd 	.word	0x08003dbd
 8003928:	004005ff 	.word	0x004005ff

0800392c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800394e:	0f9b      	lsrs	r3, r3, #30
 8003950:	b2da      	uxtb	r2, r3
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800395a:	0e9b      	lsrs	r3, r3, #26
 800395c:	b2db      	uxtb	r3, r3
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	b2da      	uxtb	r2, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800396c:	0e1b      	lsrs	r3, r3, #24
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	b2da      	uxtb	r2, r3
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800397e:	0c1b      	lsrs	r3, r3, #16
 8003980:	b2da      	uxtb	r2, r3
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800398a:	0a1b      	lsrs	r3, r3, #8
 800398c:	b2da      	uxtb	r2, r3
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003996:	b2da      	uxtb	r2, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039a0:	0d1b      	lsrs	r3, r3, #20
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ac:	0c1b      	lsrs	r3, r3, #16
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039be:	0bdb      	lsrs	r3, r3, #15
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039d0:	0b9b      	lsrs	r3, r3, #14
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039e2:	0b5b      	lsrs	r3, r3, #13
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f4:	0b1b      	lsrs	r3, r3, #12
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2200      	movs	r2, #0
 8003a06:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d163      	bne.n	8003ad8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a14:	009a      	lsls	r2, r3, #2
 8003a16:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003a20:	0f92      	lsrs	r2, r2, #30
 8003a22:	431a      	orrs	r2, r3
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a2c:	0edb      	lsrs	r3, r3, #27
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a3e:	0e1b      	lsrs	r3, r3, #24
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a50:	0d5b      	lsrs	r3, r3, #21
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a62:	0c9b      	lsrs	r3, r3, #18
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a74:	0bdb      	lsrs	r3, r3, #15
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	7e1b      	ldrb	r3, [r3, #24]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	3302      	adds	r3, #2
 8003a98:	2201      	movs	r2, #1
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003aa2:	fb03 f202 	mul.w	r2, r3, r2
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	7a1b      	ldrb	r3, [r3, #8]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003ac4:	0a52      	lsrs	r2, r2, #9
 8003ac6:	fb03 f202 	mul.w	r2, r3, r2
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad4:	661a      	str	r2, [r3, #96]	; 0x60
 8003ad6:	e031      	b.n	8003b3c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d11d      	bne.n	8003b1c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ae4:	041b      	lsls	r3, r3, #16
 8003ae6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aee:	0c1b      	lsrs	r3, r3, #16
 8003af0:	431a      	orrs	r2, r3
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	3301      	adds	r3, #1
 8003afc:	029a      	lsls	r2, r3, #10
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b10:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	661a      	str	r2, [r3, #96]	; 0x60
 8003b1a:	e00f      	b.n	8003b3c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a58      	ldr	r2, [pc, #352]	; (8003c84 <HAL_SD_GetCardCSD+0x344>)
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e09d      	b.n	8003c78 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b40:	0b9b      	lsrs	r3, r3, #14
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b52:	09db      	lsrs	r3, r3, #7
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	0fdb      	lsrs	r3, r3, #31
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b80:	0f5b      	lsrs	r3, r3, #29
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b92:	0e9b      	lsrs	r3, r3, #26
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba4:	0d9b      	lsrs	r3, r3, #22
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	0d5b      	lsrs	r3, r3, #21
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	0c1b      	lsrs	r3, r3, #16
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	0bdb      	lsrs	r3, r3, #15
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	0b9b      	lsrs	r3, r3, #14
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	0b5b      	lsrs	r3, r3, #13
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	0b1b      	lsrs	r3, r3, #12
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	0a9b      	lsrs	r3, r3, #10
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	0a1b      	lsrs	r3, r3, #8
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5e:	085b      	lsrs	r3, r3, #1
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	004005ff 	.word	0x004005ff

08003c88 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003cec:	f107 030c 	add.w	r3, r7, #12
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fa10 	bl	8004118 <SD_SendStatus>
 8003cf8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	0a5b      	lsrs	r3, r3, #9
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003d16:	693b      	ldr	r3, [r7, #16]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d3c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	2b82      	cmp	r3, #130	; 0x82
 8003d5e:	d111      	bne.n	8003d84 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f001 f9b1 	bl	80050cc <SDMMC_CmdStopTransfer>
 8003d6a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f7ff fdd4 	bl	800392c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0208 	bic.w	r2, r2, #8
 8003d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f240 523a 	movw	r2, #1338	; 0x53a
 8003d9c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f001 fdb5 	bl	800591c <HAL_SD_RxCpltCallback>
#endif
}
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fd fb9d 	bl	800150a <HAL_DMA_GetError>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d03e      	beq.n	8003e54 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d002      	beq.n	8003df2 <SD_DMAError+0x36>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d12d      	bne.n	8003e4e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a19      	ldr	r2, [pc, #100]	; (8003e5c <SD_DMAError+0xa0>)
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003e08:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003e16:	6978      	ldr	r0, [r7, #20]
 8003e18:	f7ff ff62 	bl	8003ce0 <HAL_SD_GetCardState>
 8003e1c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b06      	cmp	r3, #6
 8003e22:	d002      	beq.n	8003e2a <SD_DMAError+0x6e>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b05      	cmp	r3, #5
 8003e28:	d10a      	bne.n	8003e40 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 f94c 	bl	80050cc <SDMMC_CmdStopTransfer>
 8003e34:	4602      	mov	r2, r0
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003e4e:	6978      	ldr	r0, [r7, #20]
 8003e50:	f7ff fd6c 	bl	800392c <HAL_SD_ErrorCallback>
#endif
  }
}
 8003e54:	bf00      	nop
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	004005ff 	.word	0x004005ff

08003e60 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003e60:	b5b0      	push	{r4, r5, r7, lr}
 8003e62:	b094      	sub	sp, #80	; 0x50
 8003e64:	af04      	add	r7, sp, #16
 8003e66:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fffd 	bl	8004e70 <SDMMC_GetPowerState>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d102      	bne.n	8003e82 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003e7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e80:	e0b8      	b.n	8003ff4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d02f      	beq.n	8003eea <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f001 f9e4 	bl	800525c <SDMMC_CmdSendCID>
 8003e94:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <SD_InitCard+0x40>
    {
      return errorstate;
 8003e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9e:	e0a9      	b.n	8003ff4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 f827 	bl	8004efa <SDMMC_GetResponse>
 8003eac:	4602      	mov	r2, r0
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2104      	movs	r1, #4
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f001 f81e 	bl	8004efa <SDMMC_GetResponse>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2108      	movs	r1, #8
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f001 f815 	bl	8004efa <SDMMC_GetResponse>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	210c      	movs	r1, #12
 8003edc:	4618      	mov	r0, r3
 8003ede:	f001 f80c 	bl	8004efa <SDMMC_GetResponse>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	2b03      	cmp	r3, #3
 8003ef0:	d00d      	beq.n	8003f0e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f107 020e 	add.w	r2, r7, #14
 8003efa:	4611      	mov	r1, r2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f001 f9ea 	bl	80052d6 <SDMMC_CmdSetRelAdd>
 8003f02:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <SD_InitCard+0xae>
    {
      return errorstate;
 8003f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f0c:	e072      	b.n	8003ff4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d036      	beq.n	8003f84 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003f16:	89fb      	ldrh	r3, [r7, #14]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f26:	041b      	lsls	r3, r3, #16
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f001 f9b4 	bl	8005298 <SDMMC_CmdSendCSD>
 8003f30:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3a:	e05b      	b.n	8003ff4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2100      	movs	r1, #0
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 ffd9 	bl	8004efa <SDMMC_GetResponse>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2104      	movs	r1, #4
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 ffd0 	bl	8004efa <SDMMC_GetResponse>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2108      	movs	r1, #8
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 ffc7 	bl	8004efa <SDMMC_GetResponse>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	210c      	movs	r1, #12
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 ffbe 	bl	8004efa <SDMMC_GetResponse>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2104      	movs	r1, #4
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 ffb5 	bl	8004efa <SDMMC_GetResponse>
 8003f90:	4603      	mov	r3, r0
 8003f92:	0d1a      	lsrs	r2, r3, #20
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003f98:	f107 0310 	add.w	r3, r7, #16
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff fcce 	bl	8003940 <HAL_SD_GetCardCSD>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003faa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003fae:	e021      	b.n	8003ff4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6819      	ldr	r1, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb8:	041b      	lsls	r3, r3, #16
 8003fba:	2200      	movs	r2, #0
 8003fbc:	461c      	mov	r4, r3
 8003fbe:	4615      	mov	r5, r2
 8003fc0:	4622      	mov	r2, r4
 8003fc2:	462b      	mov	r3, r5
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	f001 f8a3 	bl	8005110 <SDMMC_CmdSelDesel>
 8003fca:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <SD_InitCard+0x176>
  {
    return errorstate;
 8003fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd4:	e00e      	b.n	8003ff4 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681d      	ldr	r5, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	466c      	mov	r4, sp
 8003fde:	f103 0210 	add.w	r2, r3, #16
 8003fe2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fe4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003fe8:	3304      	adds	r3, #4
 8003fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fec:	4628      	mov	r0, r5
 8003fee:	f000 ff05 	bl	8004dfc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3740      	adds	r7, #64	; 0x40
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bdb0      	pop	{r4, r5, r7, pc}

08003ffc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	2300      	movs	r3, #0
 800400e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f001 f89e 	bl	8005156 <SDMMC_CmdGoIdleState>
 800401a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	e072      	b.n	800410c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f001 f8b1 	bl	8005192 <SDMMC_CmdOperCond>
 8004030:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00d      	beq.n	8004054 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f001 f887 	bl	8005156 <SDMMC_CmdGoIdleState>
 8004048:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d004      	beq.n	800405a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	e05b      	b.n	800410c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405e:	2b01      	cmp	r3, #1
 8004060:	d137      	bne.n	80040d2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2100      	movs	r1, #0
 8004068:	4618      	mov	r0, r3
 800406a:	f001 f8b1 	bl	80051d0 <SDMMC_CmdAppCommand>
 800406e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d02d      	beq.n	80040d2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004076:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800407a:	e047      	b.n	800410c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2100      	movs	r1, #0
 8004082:	4618      	mov	r0, r3
 8004084:	f001 f8a4 	bl	80051d0 <SDMMC_CmdAppCommand>
 8004088:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <SD_PowerON+0x98>
    {
      return errorstate;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	e03b      	b.n	800410c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	491e      	ldr	r1, [pc, #120]	; (8004114 <SD_PowerON+0x118>)
 800409a:	4618      	mov	r0, r3
 800409c:	f001 f8ba 	bl	8005214 <SDMMC_CmdAppOperCommand>
 80040a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80040ac:	e02e      	b.n	800410c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2100      	movs	r1, #0
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 ff20 	bl	8004efa <SDMMC_GetResponse>
 80040ba:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	0fdb      	lsrs	r3, r3, #31
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <SD_PowerON+0xcc>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <SD_PowerON+0xce>
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]

    count++;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	3301      	adds	r3, #1
 80040d0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80040d8:	4293      	cmp	r3, r2
 80040da:	d802      	bhi.n	80040e2 <SD_PowerON+0xe6>
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0cc      	beq.n	800407c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d902      	bls.n	80040f2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80040ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040f0:	e00c      	b.n	800410c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	645a      	str	r2, [r3, #68]	; 0x44
 8004102:	e002      	b.n	800410a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	c1100000 	.word	0xc1100000

08004118 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d102      	bne.n	800412e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800412c:	e018      	b.n	8004160 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004136:	041b      	lsls	r3, r3, #16
 8004138:	4619      	mov	r1, r3
 800413a:	4610      	mov	r0, r2
 800413c:	f001 f8ec 	bl	8005318 <SDMMC_CmdSendStatus>
 8004140:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	e009      	b.n	8004160 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2100      	movs	r1, #0
 8004152:	4618      	mov	r0, r3
 8004154:	f000 fed1 	bl	8004efa <SDMMC_GetResponse>
 8004158:	4602      	mov	r2, r0
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e049      	b.n	800420e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fc fec6 	bl	8000f20 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4619      	mov	r1, r3
 80041a6:	4610      	mov	r0, r2
 80041a8:	f000 fa00 	bl	80045ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b082      	sub	sp, #8
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b02      	cmp	r3, #2
 800422a:	d122      	bne.n	8004272 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b02      	cmp	r3, #2
 8004238:	d11b      	bne.n	8004272 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f06f 0202 	mvn.w	r2, #2
 8004242:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f989 	bl	8004570 <HAL_TIM_IC_CaptureCallback>
 800425e:	e005      	b.n	800426c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f97b 	bl	800455c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f98c 	bl	8004584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b04      	cmp	r3, #4
 800427e:	d122      	bne.n	80042c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b04      	cmp	r3, #4
 800428c:	d11b      	bne.n	80042c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f06f 0204 	mvn.w	r2, #4
 8004296:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f95f 	bl	8004570 <HAL_TIM_IC_CaptureCallback>
 80042b2:	e005      	b.n	80042c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f951 	bl	800455c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f962 	bl	8004584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d122      	bne.n	800431a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d11b      	bne.n	800431a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f06f 0208 	mvn.w	r2, #8
 80042ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2204      	movs	r2, #4
 80042f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f935 	bl	8004570 <HAL_TIM_IC_CaptureCallback>
 8004306:	e005      	b.n	8004314 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f927 	bl	800455c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f938 	bl	8004584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b10      	cmp	r3, #16
 8004326:	d122      	bne.n	800436e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f003 0310 	and.w	r3, r3, #16
 8004332:	2b10      	cmp	r3, #16
 8004334:	d11b      	bne.n	800436e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f06f 0210 	mvn.w	r2, #16
 800433e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2208      	movs	r2, #8
 8004344:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f90b 	bl	8004570 <HAL_TIM_IC_CaptureCallback>
 800435a:	e005      	b.n	8004368 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f8fd 	bl	800455c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f90e 	bl	8004584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b01      	cmp	r3, #1
 800437a:	d10e      	bne.n	800439a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b01      	cmp	r3, #1
 8004388:	d107      	bne.n	800439a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f06f 0201 	mvn.w	r2, #1
 8004392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f8d7 	bl	8004548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a4:	2b80      	cmp	r3, #128	; 0x80
 80043a6:	d10e      	bne.n	80043c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b2:	2b80      	cmp	r3, #128	; 0x80
 80043b4:	d107      	bne.n	80043c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fd07 	bl	8004dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d4:	d10e      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e0:	2b80      	cmp	r3, #128	; 0x80
 80043e2:	d107      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fcfa 	bl	8004de8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b40      	cmp	r3, #64	; 0x40
 8004400:	d10e      	bne.n	8004420 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440c:	2b40      	cmp	r3, #64	; 0x40
 800440e:	d107      	bne.n	8004420 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f8bc 	bl	8004598 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b20      	cmp	r3, #32
 800442c:	d10e      	bne.n	800444c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b20      	cmp	r3, #32
 800443a:	d107      	bne.n	800444c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0220 	mvn.w	r2, #32
 8004444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fcba 	bl	8004dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800444c:	bf00      	nop
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_TIM_OC_ConfigChannel+0x1e>
 800446e:	2302      	movs	r3, #2
 8004470:	e066      	b.n	8004540 <HAL_TIM_OC_ConfigChannel+0xec>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b14      	cmp	r3, #20
 800447e:	d857      	bhi.n	8004530 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004480:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004486:	bf00      	nop
 8004488:	080044dd 	.word	0x080044dd
 800448c:	08004531 	.word	0x08004531
 8004490:	08004531 	.word	0x08004531
 8004494:	08004531 	.word	0x08004531
 8004498:	080044eb 	.word	0x080044eb
 800449c:	08004531 	.word	0x08004531
 80044a0:	08004531 	.word	0x08004531
 80044a4:	08004531 	.word	0x08004531
 80044a8:	080044f9 	.word	0x080044f9
 80044ac:	08004531 	.word	0x08004531
 80044b0:	08004531 	.word	0x08004531
 80044b4:	08004531 	.word	0x08004531
 80044b8:	08004507 	.word	0x08004507
 80044bc:	08004531 	.word	0x08004531
 80044c0:	08004531 	.word	0x08004531
 80044c4:	08004531 	.word	0x08004531
 80044c8:	08004515 	.word	0x08004515
 80044cc:	08004531 	.word	0x08004531
 80044d0:	08004531 	.word	0x08004531
 80044d4:	08004531 	.word	0x08004531
 80044d8:	08004523 	.word	0x08004523
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 f902 	bl	80046ec <TIM_OC1_SetConfig>
      break;
 80044e8:	e025      	b.n	8004536 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68b9      	ldr	r1, [r7, #8]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 f96d 	bl	80047d0 <TIM_OC2_SetConfig>
      break;
 80044f6:	e01e      	b.n	8004536 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 f9de 	bl	80048c0 <TIM_OC3_SetConfig>
      break;
 8004504:	e017      	b.n	8004536 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fa4d 	bl	80049ac <TIM_OC4_SetConfig>
      break;
 8004512:	e010      	b.n	8004536 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fa9e 	bl	8004a5c <TIM_OC5_SetConfig>
      break;
 8004520:	e009      	b.n	8004536 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fae9 	bl	8004b00 <TIM_OC6_SetConfig>
      break;
 800452e:	e002      	b.n	8004536 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	75fb      	strb	r3, [r7, #23]
      break;
 8004534:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800453e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a40      	ldr	r2, [pc, #256]	; (80046c0 <TIM_Base_SetConfig+0x114>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d013      	beq.n	80045ec <TIM_Base_SetConfig+0x40>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ca:	d00f      	beq.n	80045ec <TIM_Base_SetConfig+0x40>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a3d      	ldr	r2, [pc, #244]	; (80046c4 <TIM_Base_SetConfig+0x118>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d00b      	beq.n	80045ec <TIM_Base_SetConfig+0x40>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a3c      	ldr	r2, [pc, #240]	; (80046c8 <TIM_Base_SetConfig+0x11c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d007      	beq.n	80045ec <TIM_Base_SetConfig+0x40>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a3b      	ldr	r2, [pc, #236]	; (80046cc <TIM_Base_SetConfig+0x120>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d003      	beq.n	80045ec <TIM_Base_SetConfig+0x40>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a3a      	ldr	r2, [pc, #232]	; (80046d0 <TIM_Base_SetConfig+0x124>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d108      	bne.n	80045fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a2f      	ldr	r2, [pc, #188]	; (80046c0 <TIM_Base_SetConfig+0x114>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d02b      	beq.n	800465e <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800460c:	d027      	beq.n	800465e <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a2c      	ldr	r2, [pc, #176]	; (80046c4 <TIM_Base_SetConfig+0x118>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d023      	beq.n	800465e <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a2b      	ldr	r2, [pc, #172]	; (80046c8 <TIM_Base_SetConfig+0x11c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d01f      	beq.n	800465e <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a2a      	ldr	r2, [pc, #168]	; (80046cc <TIM_Base_SetConfig+0x120>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d01b      	beq.n	800465e <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a29      	ldr	r2, [pc, #164]	; (80046d0 <TIM_Base_SetConfig+0x124>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d017      	beq.n	800465e <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a28      	ldr	r2, [pc, #160]	; (80046d4 <TIM_Base_SetConfig+0x128>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d013      	beq.n	800465e <TIM_Base_SetConfig+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a27      	ldr	r2, [pc, #156]	; (80046d8 <TIM_Base_SetConfig+0x12c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00f      	beq.n	800465e <TIM_Base_SetConfig+0xb2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a26      	ldr	r2, [pc, #152]	; (80046dc <TIM_Base_SetConfig+0x130>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00b      	beq.n	800465e <TIM_Base_SetConfig+0xb2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a25      	ldr	r2, [pc, #148]	; (80046e0 <TIM_Base_SetConfig+0x134>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d007      	beq.n	800465e <TIM_Base_SetConfig+0xb2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a24      	ldr	r2, [pc, #144]	; (80046e4 <TIM_Base_SetConfig+0x138>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d003      	beq.n	800465e <TIM_Base_SetConfig+0xb2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a23      	ldr	r2, [pc, #140]	; (80046e8 <TIM_Base_SetConfig+0x13c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d108      	bne.n	8004670 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a0a      	ldr	r2, [pc, #40]	; (80046c0 <TIM_Base_SetConfig+0x114>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d003      	beq.n	80046a4 <TIM_Base_SetConfig+0xf8>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a0c      	ldr	r2, [pc, #48]	; (80046d0 <TIM_Base_SetConfig+0x124>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d103      	bne.n	80046ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	615a      	str	r2, [r3, #20]
}
 80046b2:	bf00      	nop
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40010000 	.word	0x40010000
 80046c4:	40000400 	.word	0x40000400
 80046c8:	40000800 	.word	0x40000800
 80046cc:	40000c00 	.word	0x40000c00
 80046d0:	40010400 	.word	0x40010400
 80046d4:	40014000 	.word	0x40014000
 80046d8:	40014400 	.word	0x40014400
 80046dc:	40014800 	.word	0x40014800
 80046e0:	40001800 	.word	0x40001800
 80046e4:	40001c00 	.word	0x40001c00
 80046e8:	40002000 	.word	0x40002000

080046ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	f023 0201 	bic.w	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <TIM_OC1_SetConfig+0xd8>)
 8004718:	4013      	ands	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0303 	bic.w	r3, r3, #3
 8004722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f023 0302 	bic.w	r3, r3, #2
 8004734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a21      	ldr	r2, [pc, #132]	; (80047c8 <TIM_OC1_SetConfig+0xdc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d003      	beq.n	8004750 <TIM_OC1_SetConfig+0x64>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a20      	ldr	r2, [pc, #128]	; (80047cc <TIM_OC1_SetConfig+0xe0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d10c      	bne.n	800476a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f023 0308 	bic.w	r3, r3, #8
 8004756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f023 0304 	bic.w	r3, r3, #4
 8004768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a16      	ldr	r2, [pc, #88]	; (80047c8 <TIM_OC1_SetConfig+0xdc>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d003      	beq.n	800477a <TIM_OC1_SetConfig+0x8e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a15      	ldr	r2, [pc, #84]	; (80047cc <TIM_OC1_SetConfig+0xe0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d111      	bne.n	800479e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	621a      	str	r2, [r3, #32]
}
 80047b8:	bf00      	nop
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	fffeff8f 	.word	0xfffeff8f
 80047c8:	40010000 	.word	0x40010000
 80047cc:	40010400 	.word	0x40010400

080047d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f023 0210 	bic.w	r2, r3, #16
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4b2e      	ldr	r3, [pc, #184]	; (80048b4 <TIM_OC2_SetConfig+0xe4>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f023 0320 	bic.w	r3, r3, #32
 800481a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a23      	ldr	r2, [pc, #140]	; (80048b8 <TIM_OC2_SetConfig+0xe8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <TIM_OC2_SetConfig+0x68>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a22      	ldr	r2, [pc, #136]	; (80048bc <TIM_OC2_SetConfig+0xec>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d10d      	bne.n	8004854 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800483e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	4313      	orrs	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004852:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <TIM_OC2_SetConfig+0xe8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <TIM_OC2_SetConfig+0x94>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a17      	ldr	r2, [pc, #92]	; (80048bc <TIM_OC2_SetConfig+0xec>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d113      	bne.n	800488c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800486a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004872:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	621a      	str	r2, [r3, #32]
}
 80048a6:	bf00      	nop
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	feff8fff 	.word	0xfeff8fff
 80048b8:	40010000 	.word	0x40010000
 80048bc:	40010400 	.word	0x40010400

080048c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4b2d      	ldr	r3, [pc, #180]	; (80049a0 <TIM_OC3_SetConfig+0xe0>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a22      	ldr	r2, [pc, #136]	; (80049a4 <TIM_OC3_SetConfig+0xe4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d003      	beq.n	8004926 <TIM_OC3_SetConfig+0x66>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a21      	ldr	r2, [pc, #132]	; (80049a8 <TIM_OC3_SetConfig+0xe8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d10d      	bne.n	8004942 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800492c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a17      	ldr	r2, [pc, #92]	; (80049a4 <TIM_OC3_SetConfig+0xe4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d003      	beq.n	8004952 <TIM_OC3_SetConfig+0x92>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a16      	ldr	r2, [pc, #88]	; (80049a8 <TIM_OC3_SetConfig+0xe8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d113      	bne.n	800497a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	621a      	str	r2, [r3, #32]
}
 8004994:	bf00      	nop
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	fffeff8f 	.word	0xfffeff8f
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40010400 	.word	0x40010400

080049ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4b1e      	ldr	r3, [pc, #120]	; (8004a50 <TIM_OC4_SetConfig+0xa4>)
 80049d8:	4013      	ands	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	031b      	lsls	r3, r3, #12
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a13      	ldr	r2, [pc, #76]	; (8004a54 <TIM_OC4_SetConfig+0xa8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d003      	beq.n	8004a14 <TIM_OC4_SetConfig+0x68>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a12      	ldr	r2, [pc, #72]	; (8004a58 <TIM_OC4_SetConfig+0xac>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d109      	bne.n	8004a28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	019b      	lsls	r3, r3, #6
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	feff8fff 	.word	0xfeff8fff
 8004a54:	40010000 	.word	0x40010000
 8004a58:	40010400 	.word	0x40010400

08004a5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4b1b      	ldr	r3, [pc, #108]	; (8004af4 <TIM_OC5_SetConfig+0x98>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	041b      	lsls	r3, r3, #16
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a12      	ldr	r2, [pc, #72]	; (8004af8 <TIM_OC5_SetConfig+0x9c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d003      	beq.n	8004aba <TIM_OC5_SetConfig+0x5e>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a11      	ldr	r2, [pc, #68]	; (8004afc <TIM_OC5_SetConfig+0xa0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d109      	bne.n	8004ace <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	621a      	str	r2, [r3, #32]
}
 8004ae8:	bf00      	nop
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	fffeff8f 	.word	0xfffeff8f
 8004af8:	40010000 	.word	0x40010000
 8004afc:	40010400 	.word	0x40010400

08004b00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4b1c      	ldr	r3, [pc, #112]	; (8004b9c <TIM_OC6_SetConfig+0x9c>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	051b      	lsls	r3, r3, #20
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a13      	ldr	r2, [pc, #76]	; (8004ba0 <TIM_OC6_SetConfig+0xa0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d003      	beq.n	8004b60 <TIM_OC6_SetConfig+0x60>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a12      	ldr	r2, [pc, #72]	; (8004ba4 <TIM_OC6_SetConfig+0xa4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d109      	bne.n	8004b74 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	029b      	lsls	r3, r3, #10
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	621a      	str	r2, [r3, #32]
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	feff8fff 	.word	0xfeff8fff
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	40010400 	.word	0x40010400

08004ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e06d      	b.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a30      	ldr	r2, [pc, #192]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d004      	beq.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a2f      	ldr	r2, [pc, #188]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d108      	bne.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004bfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a20      	ldr	r2, [pc, #128]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d022      	beq.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c32:	d01d      	beq.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a1d      	ldr	r2, [pc, #116]	; (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d018      	beq.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1c      	ldr	r2, [pc, #112]	; (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d013      	beq.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1a      	ldr	r2, [pc, #104]	; (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00e      	beq.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a15      	ldr	r2, [pc, #84]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d009      	beq.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a16      	ldr	r2, [pc, #88]	; (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a15      	ldr	r2, [pc, #84]	; (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d10c      	bne.n	8004c8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	40010000 	.word	0x40010000
 8004cac:	40010400 	.word	0x40010400
 8004cb0:	40000400 	.word	0x40000400
 8004cb4:	40000800 	.word	0x40000800
 8004cb8:	40000c00 	.word	0x40000c00
 8004cbc:	40014000 	.word	0x40014000
 8004cc0:	40001800 	.word	0x40001800

08004cc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e065      	b.n	8004dac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	041b      	lsls	r3, r3, #16
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a16      	ldr	r2, [pc, #88]	; (8004db8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d004      	beq.n	8004d6e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a14      	ldr	r2, [pc, #80]	; (8004dbc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d115      	bne.n	8004d9a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	051b      	lsls	r3, r3, #20
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	40010400 	.word	0x40010400

08004dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	b480      	push	{r7}
 8004e00:	b085      	sub	sp, #20
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	f107 001c 	add.w	r0, r7, #28
 8004e0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004e12:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004e14:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004e16:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004e1a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004e1e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004e22:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004e26:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <SDMMC_Init+0x54>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	b004      	add	sp, #16
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	ffff8100 	.word	0xffff8100

08004e54 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2203      	movs	r2, #3
 8004e60:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0303 	and.w	r3, r3, #3
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004eaa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004eb0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004eb6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	4b06      	ldr	r3, [pc, #24]	; (8004edc <SDMMC_SendCommand+0x50>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	fffff000 	.word	0xfffff000

08004ee0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	b2db      	uxtb	r3, r3
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3314      	adds	r3, #20
 8004f08:	461a      	mov	r2, r3
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
}  
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f46:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004f4c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004f52:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0

}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004f86:	2310      	movs	r3, #16
 8004f88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f8a:	2340      	movs	r3, #64	; 0x40
 8004f8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f98:	f107 0308 	add.w	r3, r7, #8
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff ff74 	bl	8004e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa8:	2110      	movs	r1, #16
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f9d6 	bl	800535c <SDMMC_GetCmdResp1>
 8004fb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3720      	adds	r7, #32
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004fca:	2311      	movs	r3, #17
 8004fcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004fce:	2340      	movs	r3, #64	; 0x40
 8004fd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004fdc:	f107 0308 	add.w	r3, r7, #8
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff ff52 	bl	8004e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fec:	2111      	movs	r1, #17
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f9b4 	bl	800535c <SDMMC_GetCmdResp1>
 8004ff4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ff6:	69fb      	ldr	r3, [r7, #28]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3720      	adds	r7, #32
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800500e:	2312      	movs	r3, #18
 8005010:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005012:	2340      	movs	r3, #64	; 0x40
 8005014:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800501a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800501e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005020:	f107 0308 	add.w	r3, r7, #8
 8005024:	4619      	mov	r1, r3
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff ff30 	bl	8004e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800502c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005030:	2112      	movs	r1, #18
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f992 	bl	800535c <SDMMC_GetCmdResp1>
 8005038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800503a:	69fb      	ldr	r3, [r7, #28]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3720      	adds	r7, #32
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005052:	2318      	movs	r3, #24
 8005054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005056:	2340      	movs	r3, #64	; 0x40
 8005058:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800505a:	2300      	movs	r3, #0
 800505c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800505e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005062:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005064:	f107 0308 	add.w	r3, r7, #8
 8005068:	4619      	mov	r1, r3
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff ff0e 	bl	8004e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005070:	f241 3288 	movw	r2, #5000	; 0x1388
 8005074:	2118      	movs	r1, #24
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f970 	bl	800535c <SDMMC_GetCmdResp1>
 800507c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800507e:	69fb      	ldr	r3, [r7, #28]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3720      	adds	r7, #32
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005096:	2319      	movs	r3, #25
 8005098:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800509a:	2340      	movs	r3, #64	; 0x40
 800509c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80050a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050a8:	f107 0308 	add.w	r3, r7, #8
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7ff feec 	bl	8004e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80050b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b8:	2119      	movs	r1, #25
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f94e 	bl	800535c <SDMMC_GetCmdResp1>
 80050c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050c2:	69fb      	ldr	r3, [r7, #28]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3720      	adds	r7, #32
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80050d8:	230c      	movs	r3, #12
 80050da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050dc:	2340      	movs	r3, #64	; 0x40
 80050de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80050e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050ea:	f107 0308 	add.w	r3, r7, #8
 80050ee:	4619      	mov	r1, r3
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7ff fecb 	bl	8004e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80050f6:	4a05      	ldr	r2, [pc, #20]	; (800510c <SDMMC_CmdStopTransfer+0x40>)
 80050f8:	210c      	movs	r1, #12
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f92e 	bl	800535c <SDMMC_GetCmdResp1>
 8005100:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005102:	69fb      	ldr	r3, [r7, #28]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3720      	adds	r7, #32
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	05f5e100 	.word	0x05f5e100

08005110 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	; 0x28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005120:	2307      	movs	r3, #7
 8005122:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005124:	2340      	movs	r3, #64	; 0x40
 8005126:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005128:	2300      	movs	r3, #0
 800512a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800512c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005130:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005132:	f107 0310 	add.w	r3, r7, #16
 8005136:	4619      	mov	r1, r3
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f7ff fea7 	bl	8004e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800513e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005142:	2107      	movs	r1, #7
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 f909 	bl	800535c <SDMMC_GetCmdResp1>
 800514a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800514e:	4618      	mov	r0, r3
 8005150:	3728      	adds	r7, #40	; 0x28
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b088      	sub	sp, #32
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005166:	2300      	movs	r3, #0
 8005168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800516e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005172:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005174:	f107 0308 	add.w	r3, r7, #8
 8005178:	4619      	mov	r1, r3
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff fe86 	bl	8004e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fb23 	bl	80057cc <SDMMC_GetCmdError>
 8005186:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005188:	69fb      	ldr	r3, [r7, #28]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3720      	adds	r7, #32
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b088      	sub	sp, #32
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800519a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800519e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80051a0:	2308      	movs	r3, #8
 80051a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051a4:	2340      	movs	r3, #64	; 0x40
 80051a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051b2:	f107 0308 	add.w	r3, r7, #8
 80051b6:	4619      	mov	r1, r3
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7ff fe67 	bl	8004e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fab6 	bl	8005730 <SDMMC_GetCmdResp7>
 80051c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051c6:	69fb      	ldr	r3, [r7, #28]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3720      	adds	r7, #32
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80051de:	2337      	movs	r3, #55	; 0x37
 80051e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051e2:	2340      	movs	r3, #64	; 0x40
 80051e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051f0:	f107 0308 	add.w	r3, r7, #8
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff fe48 	bl	8004e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80051fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005200:	2137      	movs	r1, #55	; 0x37
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f8aa 	bl	800535c <SDMMC_GetCmdResp1>
 8005208:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800520a:	69fb      	ldr	r3, [r7, #28]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3720      	adds	r7, #32
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <SDMMC_CmdAppOperCommand+0x44>)
 8005222:	4313      	orrs	r3, r2
 8005224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005226:	2329      	movs	r3, #41	; 0x29
 8005228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800522a:	2340      	movs	r3, #64	; 0x40
 800522c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005236:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005238:	f107 0308 	add.w	r3, r7, #8
 800523c:	4619      	mov	r1, r3
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff fe24 	bl	8004e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f9bf 	bl	80055c8 <SDMMC_GetCmdResp3>
 800524a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800524c:	69fb      	ldr	r3, [r7, #28]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3720      	adds	r7, #32
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	80100000 	.word	0x80100000

0800525c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005268:	2302      	movs	r3, #2
 800526a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800526c:	23c0      	movs	r3, #192	; 0xc0
 800526e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005270:	2300      	movs	r3, #0
 8005272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005278:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800527a:	f107 0308 	add.w	r3, r7, #8
 800527e:	4619      	mov	r1, r3
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff fe03 	bl	8004e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f956 	bl	8005538 <SDMMC_GetCmdResp2>
 800528c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800528e:	69fb      	ldr	r3, [r7, #28]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3720      	adds	r7, #32
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80052a6:	2309      	movs	r3, #9
 80052a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80052aa:	23c0      	movs	r3, #192	; 0xc0
 80052ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80052b8:	f107 0308 	add.w	r3, r7, #8
 80052bc:	4619      	mov	r1, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff fde4 	bl	8004e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f937 	bl	8005538 <SDMMC_GetCmdResp2>
 80052ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052cc:	69fb      	ldr	r3, [r7, #28]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3720      	adds	r7, #32
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b088      	sub	sp, #32
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80052e4:	2303      	movs	r3, #3
 80052e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80052e8:	2340      	movs	r3, #64	; 0x40
 80052ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80052ec:	2300      	movs	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80052f6:	f107 0308 	add.w	r3, r7, #8
 80052fa:	4619      	mov	r1, r3
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff fdc5 	bl	8004e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	2103      	movs	r1, #3
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f99c 	bl	8005644 <SDMMC_GetCmdResp6>
 800530c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800530e:	69fb      	ldr	r3, [r7, #28]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3720      	adds	r7, #32
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005326:	230d      	movs	r3, #13
 8005328:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800532a:	2340      	movs	r3, #64	; 0x40
 800532c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005336:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005338:	f107 0308 	add.w	r3, r7, #8
 800533c:	4619      	mov	r1, r3
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7ff fda4 	bl	8004e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005344:	f241 3288 	movw	r2, #5000	; 0x1388
 8005348:	210d      	movs	r1, #13
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f806 	bl	800535c <SDMMC_GetCmdResp1>
 8005350:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005352:	69fb      	ldr	r3, [r7, #28]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3720      	adds	r7, #32
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	460b      	mov	r3, r1
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800536a:	4b70      	ldr	r3, [pc, #448]	; (800552c <SDMMC_GetCmdResp1+0x1d0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a70      	ldr	r2, [pc, #448]	; (8005530 <SDMMC_GetCmdResp1+0x1d4>)
 8005370:	fba2 2303 	umull	r2, r3, r2, r3
 8005374:	0a5a      	lsrs	r2, r3, #9
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	fb02 f303 	mul.w	r3, r2, r3
 800537c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	1e5a      	subs	r2, r3, #1
 8005382:	61fa      	str	r2, [r7, #28]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d102      	bne.n	800538e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005388:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800538c:	e0c9      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005392:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0ef      	beq.n	800537e <SDMMC_GetCmdResp1+0x22>
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1ea      	bne.n	800537e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d004      	beq.n	80053be <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2204      	movs	r2, #4
 80053b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80053ba:	2304      	movs	r3, #4
 80053bc:	e0b1      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0a6      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	22c5      	movs	r2, #197	; 0xc5
 80053d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7ff fd80 	bl	8004ee0 <SDMMC_GetCommandResponse>
 80053e0:	4603      	mov	r3, r0
 80053e2:	461a      	mov	r2, r3
 80053e4:	7afb      	ldrb	r3, [r7, #11]
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d001      	beq.n	80053ee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e099      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80053ee:	2100      	movs	r1, #0
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f7ff fd82 	bl	8004efa <SDMMC_GetResponse>
 80053f6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4b4e      	ldr	r3, [pc, #312]	; (8005534 <SDMMC_GetCmdResp1+0x1d8>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005402:	2300      	movs	r3, #0
 8005404:	e08d      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2b00      	cmp	r3, #0
 800540a:	da02      	bge.n	8005412 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800540c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005410:	e087      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800541c:	2340      	movs	r3, #64	; 0x40
 800541e:	e080      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800542a:	2380      	movs	r3, #128	; 0x80
 800542c:	e079      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800543c:	e071      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800544c:	e069      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800545c:	e061      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005468:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800546c:	e059      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800547c:	e051      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800548c:	e049      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005498:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800549c:	e041      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80054a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ac:	e039      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80054b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054bc:	e031      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80054c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054cc:	e029      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80054d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80054dc:	e021      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80054e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80054ec:	e019      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80054f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80054fc:	e011      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005508:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800550c:	e009      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005518:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800551c:	e001      	b.n	8005522 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800551e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005522:	4618      	mov	r0, r3
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000000 	.word	0x20000000
 8005530:	10624dd3 	.word	0x10624dd3
 8005534:	fdffe008 	.word	0xfdffe008

08005538 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005540:	4b1f      	ldr	r3, [pc, #124]	; (80055c0 <SDMMC_GetCmdResp2+0x88>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1f      	ldr	r2, [pc, #124]	; (80055c4 <SDMMC_GetCmdResp2+0x8c>)
 8005546:	fba2 2303 	umull	r2, r3, r2, r3
 800554a:	0a5b      	lsrs	r3, r3, #9
 800554c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005550:	fb02 f303 	mul.w	r3, r2, r3
 8005554:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	1e5a      	subs	r2, r3, #1
 800555a:	60fa      	str	r2, [r7, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005560:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005564:	e026      	b.n	80055b4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0ef      	beq.n	8005556 <SDMMC_GetCmdResp2+0x1e>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1ea      	bne.n	8005556 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d004      	beq.n	8005596 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2204      	movs	r2, #4
 8005590:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005592:	2304      	movs	r3, #4
 8005594:	e00e      	b.n	80055b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e003      	b.n	80055b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	22c5      	movs	r2, #197	; 0xc5
 80055b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	20000000 	.word	0x20000000
 80055c4:	10624dd3 	.word	0x10624dd3

080055c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80055d0:	4b1a      	ldr	r3, [pc, #104]	; (800563c <SDMMC_GetCmdResp3+0x74>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a1a      	ldr	r2, [pc, #104]	; (8005640 <SDMMC_GetCmdResp3+0x78>)
 80055d6:	fba2 2303 	umull	r2, r3, r2, r3
 80055da:	0a5b      	lsrs	r3, r3, #9
 80055dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e0:	fb02 f303 	mul.w	r3, r2, r3
 80055e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	1e5a      	subs	r2, r3, #1
 80055ea:	60fa      	str	r2, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055f4:	e01b      	b.n	800562e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0ef      	beq.n	80055e6 <SDMMC_GetCmdResp3+0x1e>
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1ea      	bne.n	80055e6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2204      	movs	r2, #4
 8005620:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005622:	2304      	movs	r3, #4
 8005624:	e003      	b.n	800562e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	22c5      	movs	r2, #197	; 0xc5
 800562a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20000000 	.word	0x20000000
 8005640:	10624dd3 	.word	0x10624dd3

08005644 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	460b      	mov	r3, r1
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005652:	4b35      	ldr	r3, [pc, #212]	; (8005728 <SDMMC_GetCmdResp6+0xe4>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a35      	ldr	r2, [pc, #212]	; (800572c <SDMMC_GetCmdResp6+0xe8>)
 8005658:	fba2 2303 	umull	r2, r3, r2, r3
 800565c:	0a5b      	lsrs	r3, r3, #9
 800565e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005662:	fb02 f303 	mul.w	r3, r2, r3
 8005666:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	1e5a      	subs	r2, r3, #1
 800566c:	61fa      	str	r2, [r7, #28]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d102      	bne.n	8005678 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005672:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005676:	e052      	b.n	800571e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0ef      	beq.n	8005668 <SDMMC_GetCmdResp6+0x24>
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1ea      	bne.n	8005668 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b00      	cmp	r3, #0
 800569c:	d004      	beq.n	80056a8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2204      	movs	r2, #4
 80056a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056a4:	2304      	movs	r3, #4
 80056a6:	e03a      	b.n	800571e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d004      	beq.n	80056be <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2201      	movs	r2, #1
 80056b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e02f      	b.n	800571e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f7ff fc0e 	bl	8004ee0 <SDMMC_GetCommandResponse>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	7afb      	ldrb	r3, [r7, #11]
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d001      	beq.n	80056d2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e025      	b.n	800571e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	22c5      	movs	r2, #197	; 0xc5
 80056d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80056d8:	2100      	movs	r1, #0
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f7ff fc0d 	bl	8004efa <SDMMC_GetResponse>
 80056e0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d106      	bne.n	80056fa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	0c1b      	lsrs	r3, r3, #16
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	e011      	b.n	800571e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005708:	e009      	b.n	800571e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005718:	e001      	b.n	800571e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800571a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800571e:	4618      	mov	r0, r3
 8005720:	3720      	adds	r7, #32
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000000 	.word	0x20000000
 800572c:	10624dd3 	.word	0x10624dd3

08005730 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005738:	4b22      	ldr	r3, [pc, #136]	; (80057c4 <SDMMC_GetCmdResp7+0x94>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a22      	ldr	r2, [pc, #136]	; (80057c8 <SDMMC_GetCmdResp7+0x98>)
 800573e:	fba2 2303 	umull	r2, r3, r2, r3
 8005742:	0a5b      	lsrs	r3, r3, #9
 8005744:	f241 3288 	movw	r2, #5000	; 0x1388
 8005748:	fb02 f303 	mul.w	r3, r2, r3
 800574c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1e5a      	subs	r2, r3, #1
 8005752:	60fa      	str	r2, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d102      	bne.n	800575e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005758:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800575c:	e02c      	b.n	80057b8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005762:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0ef      	beq.n	800574e <SDMMC_GetCmdResp7+0x1e>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1ea      	bne.n	800574e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d004      	beq.n	800578e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2204      	movs	r2, #4
 8005788:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800578a:	2304      	movs	r3, #4
 800578c:	e014      	b.n	80057b8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d004      	beq.n	80057a4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e009      	b.n	80057b8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2240      	movs	r2, #64	; 0x40
 80057b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80057b6:	2300      	movs	r3, #0
  
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	20000000 	.word	0x20000000
 80057c8:	10624dd3 	.word	0x10624dd3

080057cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80057d4:	4b11      	ldr	r3, [pc, #68]	; (800581c <SDMMC_GetCmdError+0x50>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a11      	ldr	r2, [pc, #68]	; (8005820 <SDMMC_GetCmdError+0x54>)
 80057da:	fba2 2303 	umull	r2, r3, r2, r3
 80057de:	0a5b      	lsrs	r3, r3, #9
 80057e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e4:	fb02 f303 	mul.w	r3, r2, r3
 80057e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	1e5a      	subs	r2, r3, #1
 80057ee:	60fa      	str	r2, [r7, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d102      	bne.n	80057fa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057f8:	e009      	b.n	800580e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f1      	beq.n	80057ea <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	22c5      	movs	r2, #197	; 0xc5
 800580a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	20000000 	.word	0x20000000
 8005820:	10624dd3 	.word	0x10624dd3

08005824 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005828:	4904      	ldr	r1, [pc, #16]	; (800583c <MX_FATFS_Init+0x18>)
 800582a:	4805      	ldr	r0, [pc, #20]	; (8005840 <MX_FATFS_Init+0x1c>)
 800582c:	f001 fffc 	bl	8007828 <FATFS_LinkDriver>
 8005830:	4603      	mov	r3, r0
 8005832:	461a      	mov	r2, r3
 8005834:	4b03      	ldr	r3, [pc, #12]	; (8005844 <MX_FATFS_Init+0x20>)
 8005836:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005838:	bf00      	nop
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20000280 	.word	0x20000280
 8005840:	0800b500 	.word	0x0800b500
 8005844:	2000027c 	.word	0x2000027c

08005848 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005852:	f000 f86d 	bl	8005930 <BSP_SD_IsDetected>
 8005856:	4603      	mov	r3, r0
 8005858:	2b01      	cmp	r3, #1
 800585a:	d001      	beq.n	8005860 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800585c:	2302      	movs	r3, #2
 800585e:	e005      	b.n	800586c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005860:	4804      	ldr	r0, [pc, #16]	; (8005874 <BSP_SD_Init+0x2c>)
 8005862:	f7fd fde3 	bl	800342c <HAL_SD_Init>
 8005866:	4603      	mov	r3, r0
 8005868:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800586a:	79fb      	ldrb	r3, [r7, #7]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	200001a0 	.word	0x200001a0

08005878 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	68f9      	ldr	r1, [r7, #12]
 800588e:	4806      	ldr	r0, [pc, #24]	; (80058a8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005890:	f7fd fe84 	bl	800359c <HAL_SD_ReadBlocks_DMA>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800589e:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	200001a0 	.word	0x200001a0

080058ac <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	68f9      	ldr	r1, [r7, #12]
 80058c2:	4806      	ldr	r0, [pc, #24]	; (80058dc <BSP_SD_WriteBlocks_DMA+0x30>)
 80058c4:	f7fd ff4c 	bl	8003760 <HAL_SD_WriteBlocks_DMA>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	200001a0 	.word	0x200001a0

080058e0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80058e4:	4805      	ldr	r0, [pc, #20]	; (80058fc <BSP_SD_GetCardState+0x1c>)
 80058e6:	f7fe f9fb 	bl	8003ce0 <HAL_SD_GetCardState>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	bf14      	ite	ne
 80058f0:	2301      	movne	r3, #1
 80058f2:	2300      	moveq	r3, #0
 80058f4:	b2db      	uxtb	r3, r3
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	200001a0 	.word	0x200001a0

08005900 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	4803      	ldr	r0, [pc, #12]	; (8005918 <BSP_SD_GetCardInfo+0x18>)
 800590c:	f7fe f9bc 	bl	8003c88 <HAL_SD_GetCardInfo>
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	200001a0 	.word	0x200001a0

0800591c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005924:	f000 f986 	bl	8005c34 <BSP_SD_ReadCpltCallback>
}
 8005928:	bf00      	nop
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005936:	2301      	movs	r3, #1
 8005938:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	b2db      	uxtb	r3, r3
}
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8005952:	f002 f853 	bl	80079fc <osKernelGetTickCount>
 8005956:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8005958:	e006      	b.n	8005968 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800595a:	f7ff ffc1 	bl	80058e0 <BSP_SD_GetCardState>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005964:	2300      	movs	r3, #0
 8005966:	e009      	b.n	800597c <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8005968:	f002 f848 	bl	80079fc <osKernelGetTickCount>
 800596c:	4602      	mov	r2, r0
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	429a      	cmp	r2, r3
 8005976:	d8f0      	bhi.n	800595a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005978:	f04f 33ff 	mov.w	r3, #4294967295
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	4603      	mov	r3, r0
 800598c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800598e:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <SD_CheckStatus+0x38>)
 8005990:	2201      	movs	r2, #1
 8005992:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005994:	f7ff ffa4 	bl	80058e0 <BSP_SD_GetCardState>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d107      	bne.n	80059ae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800599e:	4b07      	ldr	r3, [pc, #28]	; (80059bc <SD_CheckStatus+0x38>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	f023 0301 	bic.w	r3, r3, #1
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	4b04      	ldr	r3, [pc, #16]	; (80059bc <SD_CheckStatus+0x38>)
 80059ac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80059ae:	4b03      	ldr	r3, [pc, #12]	; (80059bc <SD_CheckStatus+0x38>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	b2db      	uxtb	r3, r3
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	20000009 	.word	0x20000009

080059c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	4603      	mov	r3, r0
 80059c8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80059ca:	4b1c      	ldr	r3, [pc, #112]	; (8005a3c <SD_initialize+0x7c>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 80059d0:	f001 ffbc 	bl	800794c <osKernelGetState>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d129      	bne.n	8005a2e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80059da:	f7ff ff35 	bl	8005848 <BSP_SD_Init>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d107      	bne.n	80059f4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80059e4:	79fb      	ldrb	r3, [r7, #7]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7ff ffcc 	bl	8005984 <SD_CheckStatus>
 80059ec:	4603      	mov	r3, r0
 80059ee:	461a      	mov	r2, r3
 80059f0:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <SD_initialize+0x7c>)
 80059f2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80059f4:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <SD_initialize+0x7c>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d017      	beq.n	8005a2e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 80059fe:	4b10      	ldr	r3, [pc, #64]	; (8005a40 <SD_initialize+0x80>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d107      	bne.n	8005a16 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8005a06:	2200      	movs	r2, #0
 8005a08:	2102      	movs	r1, #2
 8005a0a:	200a      	movs	r0, #10
 8005a0c:	f002 fa82 	bl	8007f14 <osMessageQueueNew>
 8005a10:	4603      	mov	r3, r0
 8005a12:	4a0b      	ldr	r2, [pc, #44]	; (8005a40 <SD_initialize+0x80>)
 8005a14:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8005a16:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <SD_initialize+0x80>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d107      	bne.n	8005a2e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8005a1e:	4b07      	ldr	r3, [pc, #28]	; (8005a3c <SD_initialize+0x7c>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	f043 0301 	orr.w	r3, r3, #1
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	4b04      	ldr	r3, [pc, #16]	; (8005a3c <SD_initialize+0x7c>)
 8005a2c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8005a2e:	4b03      	ldr	r3, [pc, #12]	; (8005a3c <SD_initialize+0x7c>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	b2db      	uxtb	r3, r3
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20000009 	.word	0x20000009
 8005a40:	20000284 	.word	0x20000284

08005a44 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff ff97 	bl	8005984 <SD_CheckStatus>
 8005a56:	4603      	mov	r3, r0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b088      	sub	sp, #32
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	607a      	str	r2, [r7, #4]
 8005a6a:	603b      	str	r3, [r7, #0]
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005a74:	f247 5030 	movw	r0, #30000	; 0x7530
 8005a78:	f7ff ff67 	bl	800594a <SD_CheckStatusWithTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	da01      	bge.n	8005a86 <SD_read+0x26>
  {
    return res;
 8005a82:	7ffb      	ldrb	r3, [r7, #31]
 8005a84:	e02f      	b.n	8005ae6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	68b8      	ldr	r0, [r7, #8]
 8005a8c:	f7ff fef4 	bl	8005878 <BSP_SD_ReadBlocks_DMA>
 8005a90:	4603      	mov	r3, r0
 8005a92:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8005a94:	7fbb      	ldrb	r3, [r7, #30]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d124      	bne.n	8005ae4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8005a9a:	4b15      	ldr	r3, [pc, #84]	; (8005af0 <SD_read+0x90>)
 8005a9c:	6818      	ldr	r0, [r3, #0]
 8005a9e:	f107 0112 	add.w	r1, r7, #18
 8005aa2:	f247 5330 	movw	r3, #30000	; 0x7530
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f002 fb2e 	bl	8008108 <osMessageQueueGet>
 8005aac:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d117      	bne.n	8005ae4 <SD_read+0x84>
 8005ab4:	8a7b      	ldrh	r3, [r7, #18]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d114      	bne.n	8005ae4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8005aba:	f001 ff9f 	bl	80079fc <osKernelGetTickCount>
 8005abe:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8005ac0:	e007      	b.n	8005ad2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005ac2:	f7ff ff0d 	bl	80058e0 <BSP_SD_GetCardState>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d102      	bne.n	8005ad2 <SD_read+0x72>
              {
                res = RES_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8005ad0:	e008      	b.n	8005ae4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8005ad2:	f001 ff93 	bl	80079fc <osKernelGetTickCount>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	f247 522f 	movw	r2, #29999	; 0x752f
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d9ee      	bls.n	8005ac2 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8005ae4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3720      	adds	r7, #32
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000284 	.word	0x20000284

08005af4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b088      	sub	sp, #32
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	607a      	str	r2, [r7, #4]
 8005afe:	603b      	str	r3, [r7, #0]
 8005b00:	4603      	mov	r3, r0
 8005b02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005b08:	f247 5030 	movw	r0, #30000	; 0x7530
 8005b0c:	f7ff ff1d 	bl	800594a <SD_CheckStatusWithTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	da01      	bge.n	8005b1a <SD_write+0x26>
  {
    return res;
 8005b16:	7ffb      	ldrb	r3, [r7, #31]
 8005b18:	e02d      	b.n	8005b76 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	68b8      	ldr	r0, [r7, #8]
 8005b20:	f7ff fec4 	bl	80058ac <BSP_SD_WriteBlocks_DMA>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d124      	bne.n	8005b74 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8005b2a:	4b15      	ldr	r3, [pc, #84]	; (8005b80 <SD_write+0x8c>)
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	f107 0112 	add.w	r1, r7, #18
 8005b32:	f247 5330 	movw	r3, #30000	; 0x7530
 8005b36:	2200      	movs	r2, #0
 8005b38:	f002 fae6 	bl	8008108 <osMessageQueueGet>
 8005b3c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d117      	bne.n	8005b74 <SD_write+0x80>
 8005b44:	8a7b      	ldrh	r3, [r7, #18]
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d114      	bne.n	8005b74 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8005b4a:	f001 ff57 	bl	80079fc <osKernelGetTickCount>
 8005b4e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8005b50:	e007      	b.n	8005b62 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005b52:	f7ff fec5 	bl	80058e0 <BSP_SD_GetCardState>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d102      	bne.n	8005b62 <SD_write+0x6e>
          {
            res = RES_OK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	77fb      	strb	r3, [r7, #31]
            break;
 8005b60:	e008      	b.n	8005b74 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8005b62:	f001 ff4b 	bl	80079fc <osKernelGetTickCount>
 8005b66:	4602      	mov	r2, r0
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	f247 522f 	movw	r2, #29999	; 0x752f
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d9ee      	bls.n	8005b52 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8005b74:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3720      	adds	r7, #32
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000284 	.word	0x20000284

08005b84 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08c      	sub	sp, #48	; 0x30
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	603a      	str	r2, [r7, #0]
 8005b8e:	71fb      	strb	r3, [r7, #7]
 8005b90:	460b      	mov	r3, r1
 8005b92:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005b9a:	4b25      	ldr	r3, [pc, #148]	; (8005c30 <SD_ioctl+0xac>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <SD_ioctl+0x28>
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e03c      	b.n	8005c26 <SD_ioctl+0xa2>

  switch (cmd)
 8005bac:	79bb      	ldrb	r3, [r7, #6]
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d834      	bhi.n	8005c1c <SD_ioctl+0x98>
 8005bb2:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <SD_ioctl+0x34>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005bc9 	.word	0x08005bc9
 8005bbc:	08005bd1 	.word	0x08005bd1
 8005bc0:	08005be9 	.word	0x08005be9
 8005bc4:	08005c03 	.word	0x08005c03
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005bce:	e028      	b.n	8005c22 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005bd0:	f107 030c 	add.w	r3, r7, #12
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff fe93 	bl	8005900 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005be6:	e01c      	b.n	8005c22 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005be8:	f107 030c 	add.w	r3, r7, #12
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7ff fe87 	bl	8005900 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c00:	e00f      	b.n	8005c22 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c02:	f107 030c 	add.w	r3, r7, #12
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff fe7a 	bl	8005900 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	0a5a      	lsrs	r2, r3, #9
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c1a:	e002      	b.n	8005c22 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005c1c:	2304      	movs	r3, #4
 8005c1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005c22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3730      	adds	r7, #48	; 0x30
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000009 	.word	0x20000009

08005c34 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8005c3e:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <BSP_SD_ReadCpltCallback+0x20>)
 8005c40:	6818      	ldr	r0, [r3, #0]
 8005c42:	1db9      	adds	r1, r7, #6
 8005c44:	2300      	movs	r3, #0
 8005c46:	2200      	movs	r2, #0
 8005c48:	f002 f9ea 	bl	8008020 <osMessageQueuePut>
#endif
}
 8005c4c:	bf00      	nop
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	20000284 	.word	0x20000284

08005c58 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	4a08      	ldr	r2, [pc, #32]	; (8005c88 <disk_status+0x30>)
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	79fa      	ldrb	r2, [r7, #7]
 8005c70:	4905      	ldr	r1, [pc, #20]	; (8005c88 <disk_status+0x30>)
 8005c72:	440a      	add	r2, r1
 8005c74:	7a12      	ldrb	r2, [r2, #8]
 8005c76:	4610      	mov	r0, r2
 8005c78:	4798      	blx	r3
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	20000330 	.word	0x20000330

08005c8c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	4603      	mov	r3, r0
 8005c94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005c9a:	79fb      	ldrb	r3, [r7, #7]
 8005c9c:	4a0d      	ldr	r2, [pc, #52]	; (8005cd4 <disk_initialize+0x48>)
 8005c9e:	5cd3      	ldrb	r3, [r2, r3]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d111      	bne.n	8005cc8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005ca4:	79fb      	ldrb	r3, [r7, #7]
 8005ca6:	4a0b      	ldr	r2, [pc, #44]	; (8005cd4 <disk_initialize+0x48>)
 8005ca8:	2101      	movs	r1, #1
 8005caa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005cac:	79fb      	ldrb	r3, [r7, #7]
 8005cae:	4a09      	ldr	r2, [pc, #36]	; (8005cd4 <disk_initialize+0x48>)
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	79fa      	ldrb	r2, [r7, #7]
 8005cba:	4906      	ldr	r1, [pc, #24]	; (8005cd4 <disk_initialize+0x48>)
 8005cbc:	440a      	add	r2, r1
 8005cbe:	7a12      	ldrb	r2, [r2, #8]
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4798      	blx	r3
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000330 	.word	0x20000330

08005cd8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005cd8:	b590      	push	{r4, r7, lr}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	607a      	str	r2, [r7, #4]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	4a0a      	ldr	r2, [pc, #40]	; (8005d14 <disk_read+0x3c>)
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	689c      	ldr	r4, [r3, #8]
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	4a07      	ldr	r2, [pc, #28]	; (8005d14 <disk_read+0x3c>)
 8005cf8:	4413      	add	r3, r2
 8005cfa:	7a18      	ldrb	r0, [r3, #8]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	47a0      	blx	r4
 8005d04:	4603      	mov	r3, r0
 8005d06:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd90      	pop	{r4, r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000330 	.word	0x20000330

08005d18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005d18:	b590      	push	{r4, r7, lr}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	607a      	str	r2, [r7, #4]
 8005d22:	603b      	str	r3, [r7, #0]
 8005d24:	4603      	mov	r3, r0
 8005d26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	4a0a      	ldr	r2, [pc, #40]	; (8005d54 <disk_write+0x3c>)
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	68dc      	ldr	r4, [r3, #12]
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	4a07      	ldr	r2, [pc, #28]	; (8005d54 <disk_write+0x3c>)
 8005d38:	4413      	add	r3, r2
 8005d3a:	7a18      	ldrb	r0, [r3, #8]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	47a0      	blx	r4
 8005d44:	4603      	mov	r3, r0
 8005d46:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd90      	pop	{r4, r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20000330 	.word	0x20000330

08005d58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	603a      	str	r2, [r7, #0]
 8005d62:	71fb      	strb	r3, [r7, #7]
 8005d64:	460b      	mov	r3, r1
 8005d66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005d68:	79fb      	ldrb	r3, [r7, #7]
 8005d6a:	4a09      	ldr	r2, [pc, #36]	; (8005d90 <disk_ioctl+0x38>)
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	79fa      	ldrb	r2, [r7, #7]
 8005d76:	4906      	ldr	r1, [pc, #24]	; (8005d90 <disk_ioctl+0x38>)
 8005d78:	440a      	add	r2, r1
 8005d7a:	7a10      	ldrb	r0, [r2, #8]
 8005d7c:	79b9      	ldrb	r1, [r7, #6]
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	4798      	blx	r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	73fb      	strb	r3, [r7, #15]
  return res;
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	20000330 	.word	0x20000330

08005d94 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005da4:	89fb      	ldrh	r3, [r7, #14]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	b21a      	sxth	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	b21b      	sxth	r3, r3
 8005db0:	4313      	orrs	r3, r2
 8005db2:	b21b      	sxth	r3, r3
 8005db4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005db6:	89fb      	ldrh	r3, [r7, #14]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3303      	adds	r3, #3
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	021b      	lsls	r3, r3, #8
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	3202      	adds	r2, #2
 8005ddc:	7812      	ldrb	r2, [r2, #0]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	021b      	lsls	r3, r3, #8
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	3201      	adds	r2, #1
 8005dea:	7812      	ldrb	r2, [r2, #0]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	021b      	lsls	r3, r3, #8
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	7812      	ldrb	r2, [r2, #0]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]
	return rv;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	460b      	mov	r3, r1
 8005e14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	887a      	ldrh	r2, [r7, #2]
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	887b      	ldrh	r3, [r7, #2]
 8005e24:	0a1b      	lsrs	r3, r3, #8
 8005e26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	607a      	str	r2, [r7, #4]
 8005e2e:	887a      	ldrh	r2, [r7, #2]
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	701a      	strb	r2, [r3, #0]
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	701a      	strb	r2, [r3, #0]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	0a1b      	lsrs	r3, r3, #8
 8005e5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	607a      	str	r2, [r7, #4]
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	0a1b      	lsrs	r3, r3, #8
 8005e6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	701a      	strb	r2, [r3, #0]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	0a1b      	lsrs	r3, r3, #8
 8005e7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	607a      	str	r2, [r7, #4]
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	701a      	strb	r2, [r3, #0]
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	617a      	str	r2, [r7, #20]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	b2d2      	uxtb	r2, r2
 8005eb2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	607b      	str	r3, [r7, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1f3      	bne.n	8005ea8 <mem_set+0x10>
}
 8005ec0:	bf00      	nop
 8005ec2:	bf00      	nop
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005ece:	b480      	push	{r7}
 8005ed0:	b089      	sub	sp, #36	; 0x24
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	60f8      	str	r0, [r7, #12]
 8005ed6:	60b9      	str	r1, [r7, #8]
 8005ed8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	61fb      	str	r3, [r7, #28]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	61fa      	str	r2, [r7, #28]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	61ba      	str	r2, [r7, #24]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	1acb      	subs	r3, r1, r3
 8005efa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	607b      	str	r3, [r7, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <mem_cmp+0x40>
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0eb      	beq.n	8005ee6 <mem_cmp+0x18>

	return r;
 8005f0e:	697b      	ldr	r3, [r7, #20]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3724      	adds	r7, #36	; 0x24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005f26:	e002      	b.n	8005f2e <chk_chr+0x12>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	607b      	str	r3, [r7, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d005      	beq.n	8005f42 <chk_chr+0x26>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d1f2      	bne.n	8005f28 <chk_chr+0xc>
	return *str;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	781b      	ldrb	r3, [r3, #0]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b082      	sub	sp, #8
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d009      	beq.n	8005f74 <lock_fs+0x22>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f001 fc95 	bl	8007894 <ff_req_grant>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <lock_fs+0x22>
 8005f70:	2301      	movs	r3, #1
 8005f72:	e000      	b.n	8005f76 <lock_fs+0x24>
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b082      	sub	sp, #8
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	460b      	mov	r3, r1
 8005f88:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00d      	beq.n	8005fac <unlock_fs+0x2e>
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	2b0c      	cmp	r3, #12
 8005f94:	d00a      	beq.n	8005fac <unlock_fs+0x2e>
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	2b0b      	cmp	r3, #11
 8005f9a:	d007      	beq.n	8005fac <unlock_fs+0x2e>
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	2b0f      	cmp	r3, #15
 8005fa0:	d004      	beq.n	8005fac <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f001 fc89 	bl	80078be <ff_rel_grant>
	}
}
 8005fac:	bf00      	nop
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	e01f      	b.n	8006004 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005fc4:	4a41      	ldr	r2, [pc, #260]	; (80060cc <inc_lock+0x118>)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	011b      	lsls	r3, r3, #4
 8005fca:	4413      	add	r3, r2
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d113      	bne.n	8005ffe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005fd6:	4a3d      	ldr	r2, [pc, #244]	; (80060cc <inc_lock+0x118>)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	4413      	add	r3, r2
 8005fde:	3304      	adds	r3, #4
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d109      	bne.n	8005ffe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005fea:	4a38      	ldr	r2, [pc, #224]	; (80060cc <inc_lock+0x118>)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	4413      	add	r3, r2
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d006      	beq.n	800600c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3301      	adds	r3, #1
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b09      	cmp	r3, #9
 8006008:	d9dc      	bls.n	8005fc4 <inc_lock+0x10>
 800600a:	e000      	b.n	800600e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800600c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b0a      	cmp	r3, #10
 8006012:	d132      	bne.n	800607a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	e002      	b.n	8006020 <inc_lock+0x6c>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3301      	adds	r3, #1
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b09      	cmp	r3, #9
 8006024:	d806      	bhi.n	8006034 <inc_lock+0x80>
 8006026:	4a29      	ldr	r2, [pc, #164]	; (80060cc <inc_lock+0x118>)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	4413      	add	r3, r2
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1f2      	bne.n	800601a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b0a      	cmp	r3, #10
 8006038:	d101      	bne.n	800603e <inc_lock+0x8a>
 800603a:	2300      	movs	r3, #0
 800603c:	e040      	b.n	80060c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	4922      	ldr	r1, [pc, #136]	; (80060cc <inc_lock+0x118>)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	440b      	add	r3, r1
 800604a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	491e      	ldr	r1, [pc, #120]	; (80060cc <inc_lock+0x118>)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	440b      	add	r3, r1
 8006058:	3304      	adds	r3, #4
 800605a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	695a      	ldr	r2, [r3, #20]
 8006060:	491a      	ldr	r1, [pc, #104]	; (80060cc <inc_lock+0x118>)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	011b      	lsls	r3, r3, #4
 8006066:	440b      	add	r3, r1
 8006068:	3308      	adds	r3, #8
 800606a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800606c:	4a17      	ldr	r2, [pc, #92]	; (80060cc <inc_lock+0x118>)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	4413      	add	r3, r2
 8006074:	330c      	adds	r3, #12
 8006076:	2200      	movs	r2, #0
 8006078:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d009      	beq.n	8006094 <inc_lock+0xe0>
 8006080:	4a12      	ldr	r2, [pc, #72]	; (80060cc <inc_lock+0x118>)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	4413      	add	r3, r2
 8006088:	330c      	adds	r3, #12
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <inc_lock+0xe0>
 8006090:	2300      	movs	r3, #0
 8006092:	e015      	b.n	80060c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d108      	bne.n	80060ac <inc_lock+0xf8>
 800609a:	4a0c      	ldr	r2, [pc, #48]	; (80060cc <inc_lock+0x118>)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	4413      	add	r3, r2
 80060a2:	330c      	adds	r3, #12
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	3301      	adds	r3, #1
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	e001      	b.n	80060b0 <inc_lock+0xfc>
 80060ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060b0:	4906      	ldr	r1, [pc, #24]	; (80060cc <inc_lock+0x118>)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	440b      	add	r3, r1
 80060b8:	330c      	adds	r3, #12
 80060ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3301      	adds	r3, #1
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	20000290 	.word	0x20000290

080060d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	e010      	b.n	8006100 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80060de:	4a0d      	ldr	r2, [pc, #52]	; (8006114 <clear_lock+0x44>)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	4413      	add	r3, r2
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d105      	bne.n	80060fa <clear_lock+0x2a>
 80060ee:	4a09      	ldr	r2, [pc, #36]	; (8006114 <clear_lock+0x44>)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	4413      	add	r3, r2
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3301      	adds	r3, #1
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b09      	cmp	r3, #9
 8006104:	d9eb      	bls.n	80060de <clear_lock+0xe>
	}
}
 8006106:	bf00      	nop
 8006108:	bf00      	nop
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	20000290 	.word	0x20000290

08006118 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006120:	2300      	movs	r3, #0
 8006122:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	78db      	ldrb	r3, [r3, #3]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d034      	beq.n	8006196 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006130:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	7858      	ldrb	r0, [r3, #1]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800613c:	2301      	movs	r3, #1
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	f7ff fdea 	bl	8005d18 <disk_write>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d002      	beq.n	8006150 <sync_window+0x38>
			res = FR_DISK_ERR;
 800614a:	2301      	movs	r3, #1
 800614c:	73fb      	strb	r3, [r7, #15]
 800614e:	e022      	b.n	8006196 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	1ad2      	subs	r2, r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	429a      	cmp	r2, r3
 8006164:	d217      	bcs.n	8006196 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	789b      	ldrb	r3, [r3, #2]
 800616a:	613b      	str	r3, [r7, #16]
 800616c:	e010      	b.n	8006190 <sync_window+0x78>
					wsect += fs->fsize;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4413      	add	r3, r2
 8006176:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	7858      	ldrb	r0, [r3, #1]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006182:	2301      	movs	r3, #1
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	f7ff fdc7 	bl	8005d18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	3b01      	subs	r3, #1
 800618e:	613b      	str	r3, [r7, #16]
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d8eb      	bhi.n	800616e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006196:	7bfb      	ldrb	r3, [r7, #15]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d01b      	beq.n	80061f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff ffad 	bl	8006118 <sync_window>
 80061be:	4603      	mov	r3, r0
 80061c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d113      	bne.n	80061f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	7858      	ldrb	r0, [r3, #1]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80061d2:	2301      	movs	r3, #1
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	f7ff fd7f 	bl	8005cd8 <disk_read>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d004      	beq.n	80061ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80061e0:	f04f 33ff 	mov.w	r3, #4294967295
 80061e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	3b02      	subs	r3, #2
 8006208:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	3b02      	subs	r3, #2
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d301      	bcc.n	800621a <clust2sect+0x20>
 8006216:	2300      	movs	r3, #0
 8006218:	e008      	b.n	800622c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	895b      	ldrh	r3, [r3, #10]
 800621e:	461a      	mov	r2, r3
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	fb03 f202 	mul.w	r2, r3, r2
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622a:	4413      	add	r3, r2
}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d904      	bls.n	8006258 <get_fat+0x20>
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	429a      	cmp	r2, r3
 8006256:	d302      	bcc.n	800625e <get_fat+0x26>
		val = 1;	/* Internal error */
 8006258:	2301      	movs	r3, #1
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e0bb      	b.n	80063d6 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800625e:	f04f 33ff 	mov.w	r3, #4294967295
 8006262:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b03      	cmp	r3, #3
 800626a:	f000 8083 	beq.w	8006374 <get_fat+0x13c>
 800626e:	2b03      	cmp	r3, #3
 8006270:	f300 80a7 	bgt.w	80063c2 <get_fat+0x18a>
 8006274:	2b01      	cmp	r3, #1
 8006276:	d002      	beq.n	800627e <get_fat+0x46>
 8006278:	2b02      	cmp	r3, #2
 800627a:	d056      	beq.n	800632a <get_fat+0xf2>
 800627c:	e0a1      	b.n	80063c2 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	60fb      	str	r3, [r7, #12]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	085b      	lsrs	r3, r3, #1
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4413      	add	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	899b      	ldrh	r3, [r3, #12]
 8006294:	4619      	mov	r1, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	fbb3 f3f1 	udiv	r3, r3, r1
 800629c:	4413      	add	r3, r2
 800629e:	4619      	mov	r1, r3
 80062a0:	6938      	ldr	r0, [r7, #16]
 80062a2:	f7ff ff7d 	bl	80061a0 <move_window>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f040 808d 	bne.w	80063c8 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	60fa      	str	r2, [r7, #12]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	8992      	ldrh	r2, [r2, #12]
 80062b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80062bc:	fb01 f202 	mul.w	r2, r1, r2
 80062c0:	1a9b      	subs	r3, r3, r2
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4413      	add	r3, r2
 80062c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062ca:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	899b      	ldrh	r3, [r3, #12]
 80062d4:	4619      	mov	r1, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80062dc:	4413      	add	r3, r2
 80062de:	4619      	mov	r1, r3
 80062e0:	6938      	ldr	r0, [r7, #16]
 80062e2:	f7ff ff5d 	bl	80061a0 <move_window>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d16f      	bne.n	80063cc <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	899b      	ldrh	r3, [r3, #12]
 80062f0:	461a      	mov	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80062f8:	fb01 f202 	mul.w	r2, r1, r2
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	4413      	add	r3, r2
 8006302:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006306:	021b      	lsls	r3, r3, #8
 8006308:	461a      	mov	r2, r3
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	4313      	orrs	r3, r2
 800630e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <get_fat+0xe8>
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	091b      	lsrs	r3, r3, #4
 800631e:	e002      	b.n	8006326 <get_fat+0xee>
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006326:	617b      	str	r3, [r7, #20]
			break;
 8006328:	e055      	b.n	80063d6 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	899b      	ldrh	r3, [r3, #12]
 8006332:	085b      	lsrs	r3, r3, #1
 8006334:	b29b      	uxth	r3, r3
 8006336:	4619      	mov	r1, r3
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	fbb3 f3f1 	udiv	r3, r3, r1
 800633e:	4413      	add	r3, r2
 8006340:	4619      	mov	r1, r3
 8006342:	6938      	ldr	r0, [r7, #16]
 8006344:	f7ff ff2c 	bl	80061a0 <move_window>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d140      	bne.n	80063d0 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	8992      	ldrh	r2, [r2, #12]
 800635c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006360:	fb00 f202 	mul.w	r2, r0, r2
 8006364:	1a9b      	subs	r3, r3, r2
 8006366:	440b      	add	r3, r1
 8006368:	4618      	mov	r0, r3
 800636a:	f7ff fd13 	bl	8005d94 <ld_word>
 800636e:	4603      	mov	r3, r0
 8006370:	617b      	str	r3, [r7, #20]
			break;
 8006372:	e030      	b.n	80063d6 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	899b      	ldrh	r3, [r3, #12]
 800637c:	089b      	lsrs	r3, r3, #2
 800637e:	b29b      	uxth	r3, r3
 8006380:	4619      	mov	r1, r3
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	fbb3 f3f1 	udiv	r3, r3, r1
 8006388:	4413      	add	r3, r2
 800638a:	4619      	mov	r1, r3
 800638c:	6938      	ldr	r0, [r7, #16]
 800638e:	f7ff ff07 	bl	80061a0 <move_window>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d11d      	bne.n	80063d4 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	8992      	ldrh	r2, [r2, #12]
 80063a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80063aa:	fb00 f202 	mul.w	r2, r0, r2
 80063ae:	1a9b      	subs	r3, r3, r2
 80063b0:	440b      	add	r3, r1
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff fd06 	bl	8005dc4 <ld_dword>
 80063b8:	4603      	mov	r3, r0
 80063ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80063be:	617b      	str	r3, [r7, #20]
			break;
 80063c0:	e009      	b.n	80063d6 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80063c2:	2301      	movs	r3, #1
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	e006      	b.n	80063d6 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80063c8:	bf00      	nop
 80063ca:	e004      	b.n	80063d6 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80063cc:	bf00      	nop
 80063ce:	e002      	b.n	80063d6 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80063d0:	bf00      	nop
 80063d2:	e000      	b.n	80063d6 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80063d4:	bf00      	nop
		}
	}

	return val;
 80063d6:	697b      	ldr	r3, [r7, #20]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80063e0:	b590      	push	{r4, r7, lr}
 80063e2:	b089      	sub	sp, #36	; 0x24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80063ec:	2302      	movs	r3, #2
 80063ee:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	f240 8102 	bls.w	80065fc <put_fat+0x21c>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	429a      	cmp	r2, r3
 8006400:	f080 80fc 	bcs.w	80065fc <put_fat+0x21c>
		switch (fs->fs_type) {
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b03      	cmp	r3, #3
 800640a:	f000 80b6 	beq.w	800657a <put_fat+0x19a>
 800640e:	2b03      	cmp	r3, #3
 8006410:	f300 80fd 	bgt.w	800660e <put_fat+0x22e>
 8006414:	2b01      	cmp	r3, #1
 8006416:	d003      	beq.n	8006420 <put_fat+0x40>
 8006418:	2b02      	cmp	r3, #2
 800641a:	f000 8083 	beq.w	8006524 <put_fat+0x144>
 800641e:	e0f6      	b.n	800660e <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	085b      	lsrs	r3, r3, #1
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	4413      	add	r3, r2
 800642c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	899b      	ldrh	r3, [r3, #12]
 8006436:	4619      	mov	r1, r3
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	fbb3 f3f1 	udiv	r3, r3, r1
 800643e:	4413      	add	r3, r2
 8006440:	4619      	mov	r1, r3
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7ff feac 	bl	80061a0 <move_window>
 8006448:	4603      	mov	r3, r0
 800644a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800644c:	7ffb      	ldrb	r3, [r7, #31]
 800644e:	2b00      	cmp	r3, #0
 8006450:	f040 80d6 	bne.w	8006600 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	61ba      	str	r2, [r7, #24]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	8992      	ldrh	r2, [r2, #12]
 8006464:	fbb3 f0f2 	udiv	r0, r3, r2
 8006468:	fb00 f202 	mul.w	r2, r0, r2
 800646c:	1a9b      	subs	r3, r3, r2
 800646e:	440b      	add	r3, r1
 8006470:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00d      	beq.n	8006498 <put_fat+0xb8>
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	b25b      	sxtb	r3, r3
 8006482:	f003 030f 	and.w	r3, r3, #15
 8006486:	b25a      	sxtb	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	b2db      	uxtb	r3, r3
 800648c:	011b      	lsls	r3, r3, #4
 800648e:	b25b      	sxtb	r3, r3
 8006490:	4313      	orrs	r3, r2
 8006492:	b25b      	sxtb	r3, r3
 8006494:	b2db      	uxtb	r3, r3
 8006496:	e001      	b.n	800649c <put_fat+0xbc>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	b2db      	uxtb	r3, r3
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2201      	movs	r2, #1
 80064a4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	899b      	ldrh	r3, [r3, #12]
 80064ae:	4619      	mov	r1, r3
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80064b6:	4413      	add	r3, r2
 80064b8:	4619      	mov	r1, r3
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f7ff fe70 	bl	80061a0 <move_window>
 80064c0:	4603      	mov	r3, r0
 80064c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80064c4:	7ffb      	ldrb	r3, [r7, #31]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f040 809c 	bne.w	8006604 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	899b      	ldrh	r3, [r3, #12]
 80064d6:	461a      	mov	r2, r3
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	fbb3 f0f2 	udiv	r0, r3, r2
 80064de:	fb00 f202 	mul.w	r2, r0, r2
 80064e2:	1a9b      	subs	r3, r3, r2
 80064e4:	440b      	add	r3, r1
 80064e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <put_fat+0x11a>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	091b      	lsrs	r3, r3, #4
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	e00e      	b.n	8006518 <put_fat+0x138>
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	b25b      	sxtb	r3, r3
 8006500:	f023 030f 	bic.w	r3, r3, #15
 8006504:	b25a      	sxtb	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	0a1b      	lsrs	r3, r3, #8
 800650a:	b25b      	sxtb	r3, r3
 800650c:	f003 030f 	and.w	r3, r3, #15
 8006510:	b25b      	sxtb	r3, r3
 8006512:	4313      	orrs	r3, r2
 8006514:	b25b      	sxtb	r3, r3
 8006516:	b2db      	uxtb	r3, r3
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2201      	movs	r2, #1
 8006520:	70da      	strb	r2, [r3, #3]
			break;
 8006522:	e074      	b.n	800660e <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	899b      	ldrh	r3, [r3, #12]
 800652c:	085b      	lsrs	r3, r3, #1
 800652e:	b29b      	uxth	r3, r3
 8006530:	4619      	mov	r1, r3
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	fbb3 f3f1 	udiv	r3, r3, r1
 8006538:	4413      	add	r3, r2
 800653a:	4619      	mov	r1, r3
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f7ff fe2f 	bl	80061a0 <move_window>
 8006542:	4603      	mov	r3, r0
 8006544:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006546:	7ffb      	ldrb	r3, [r7, #31]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d15d      	bne.n	8006608 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	8992      	ldrh	r2, [r2, #12]
 800655a:	fbb3 f0f2 	udiv	r0, r3, r2
 800655e:	fb00 f202 	mul.w	r2, r0, r2
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	440b      	add	r3, r1
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	b292      	uxth	r2, r2
 800656a:	4611      	mov	r1, r2
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fc4c 	bl	8005e0a <st_word>
			fs->wflag = 1;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2201      	movs	r2, #1
 8006576:	70da      	strb	r2, [r3, #3]
			break;
 8006578:	e049      	b.n	800660e <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	899b      	ldrh	r3, [r3, #12]
 8006582:	089b      	lsrs	r3, r3, #2
 8006584:	b29b      	uxth	r3, r3
 8006586:	4619      	mov	r1, r3
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	fbb3 f3f1 	udiv	r3, r3, r1
 800658e:	4413      	add	r3, r2
 8006590:	4619      	mov	r1, r3
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f7ff fe04 	bl	80061a0 <move_window>
 8006598:	4603      	mov	r3, r0
 800659a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800659c:	7ffb      	ldrb	r3, [r7, #31]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d134      	bne.n	800660c <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	8992      	ldrh	r2, [r2, #12]
 80065b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80065ba:	fb00 f202 	mul.w	r2, r0, r2
 80065be:	1a9b      	subs	r3, r3, r2
 80065c0:	440b      	add	r3, r1
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7ff fbfe 	bl	8005dc4 <ld_dword>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80065ce:	4323      	orrs	r3, r4
 80065d0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	8992      	ldrh	r2, [r2, #12]
 80065e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80065e4:	fb00 f202 	mul.w	r2, r0, r2
 80065e8:	1a9b      	subs	r3, r3, r2
 80065ea:	440b      	add	r3, r1
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff fc26 	bl	8005e40 <st_dword>
			fs->wflag = 1;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2201      	movs	r2, #1
 80065f8:	70da      	strb	r2, [r3, #3]
			break;
 80065fa:	e008      	b.n	800660e <put_fat+0x22e>
		}
	}
 80065fc:	bf00      	nop
 80065fe:	e006      	b.n	800660e <put_fat+0x22e>
			if (res != FR_OK) break;
 8006600:	bf00      	nop
 8006602:	e004      	b.n	800660e <put_fat+0x22e>
			if (res != FR_OK) break;
 8006604:	bf00      	nop
 8006606:	e002      	b.n	800660e <put_fat+0x22e>
			if (res != FR_OK) break;
 8006608:	bf00      	nop
 800660a:	e000      	b.n	800660e <put_fat+0x22e>
			if (res != FR_OK) break;
 800660c:	bf00      	nop
	return res;
 800660e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3724      	adds	r7, #36	; 0x24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd90      	pop	{r4, r7, pc}

08006618 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10d      	bne.n	800664a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d004      	beq.n	8006644 <create_chain+0x2c>
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	429a      	cmp	r2, r3
 8006642:	d31b      	bcc.n	800667c <create_chain+0x64>
 8006644:	2301      	movs	r3, #1
 8006646:	61bb      	str	r3, [r7, #24]
 8006648:	e018      	b.n	800667c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff fdf3 	bl	8006238 <get_fat>
 8006652:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d801      	bhi.n	800665e <create_chain+0x46>
 800665a:	2301      	movs	r3, #1
 800665c:	e070      	b.n	8006740 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006664:	d101      	bne.n	800666a <create_chain+0x52>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	e06a      	b.n	8006740 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	429a      	cmp	r2, r3
 8006672:	d201      	bcs.n	8006678 <create_chain+0x60>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	e063      	b.n	8006740 <create_chain+0x128>
		scl = clst;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	3301      	adds	r3, #1
 8006684:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	69fa      	ldr	r2, [r7, #28]
 800668c:	429a      	cmp	r2, r3
 800668e:	d307      	bcc.n	80066a0 <create_chain+0x88>
				ncl = 2;
 8006690:	2302      	movs	r3, #2
 8006692:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006694:	69fa      	ldr	r2, [r7, #28]
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	429a      	cmp	r2, r3
 800669a:	d901      	bls.n	80066a0 <create_chain+0x88>
 800669c:	2300      	movs	r3, #0
 800669e:	e04f      	b.n	8006740 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80066a0:	69f9      	ldr	r1, [r7, #28]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff fdc8 	bl	8006238 <get_fat>
 80066a8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00e      	beq.n	80066ce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d003      	beq.n	80066be <create_chain+0xa6>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066bc:	d101      	bne.n	80066c2 <create_chain+0xaa>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	e03e      	b.n	8006740 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80066c2:	69fa      	ldr	r2, [r7, #28]
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d1da      	bne.n	8006680 <create_chain+0x68>
 80066ca:	2300      	movs	r3, #0
 80066cc:	e038      	b.n	8006740 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80066ce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80066d0:	f04f 32ff 	mov.w	r2, #4294967295
 80066d4:	69f9      	ldr	r1, [r7, #28]
 80066d6:	6938      	ldr	r0, [r7, #16]
 80066d8:	f7ff fe82 	bl	80063e0 <put_fat>
 80066dc:	4603      	mov	r3, r0
 80066de:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d109      	bne.n	80066fa <create_chain+0xe2>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d006      	beq.n	80066fa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80066ec:	69fa      	ldr	r2, [r7, #28]
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6938      	ldr	r0, [r7, #16]
 80066f2:	f7ff fe75 	bl	80063e0 <put_fat>
 80066f6:	4603      	mov	r3, r0
 80066f8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d116      	bne.n	800672e <create_chain+0x116>
		fs->last_clst = ncl;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	699a      	ldr	r2, [r3, #24]
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	3b02      	subs	r3, #2
 8006710:	429a      	cmp	r2, r3
 8006712:	d804      	bhi.n	800671e <create_chain+0x106>
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	1e5a      	subs	r2, r3, #1
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	791b      	ldrb	r3, [r3, #4]
 8006722:	f043 0301 	orr.w	r3, r3, #1
 8006726:	b2da      	uxtb	r2, r3
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	711a      	strb	r2, [r3, #4]
 800672c:	e007      	b.n	800673e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800672e:	7dfb      	ldrb	r3, [r7, #23]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d102      	bne.n	800673a <create_chain+0x122>
 8006734:	f04f 33ff 	mov.w	r3, #4294967295
 8006738:	e000      	b.n	800673c <create_chain+0x124>
 800673a:	2301      	movs	r3, #1
 800673c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800673e:	69fb      	ldr	r3, [r7, #28]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3720      	adds	r7, #32
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800675e:	d204      	bcs.n	800676a <dir_sdi+0x22>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	f003 031f 	and.w	r3, r3, #31
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <dir_sdi+0x26>
		return FR_INT_ERR;
 800676a:	2302      	movs	r3, #2
 800676c:	e071      	b.n	8006852 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d106      	bne.n	800678e <dir_sdi+0x46>
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d902      	bls.n	800678e <dir_sdi+0x46>
		clst = fs->dirbase;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10c      	bne.n	80067ae <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	095b      	lsrs	r3, r3, #5
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	8912      	ldrh	r2, [r2, #8]
 800679c:	4293      	cmp	r3, r2
 800679e:	d301      	bcc.n	80067a4 <dir_sdi+0x5c>
 80067a0:	2302      	movs	r3, #2
 80067a2:	e056      	b.n	8006852 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	61da      	str	r2, [r3, #28]
 80067ac:	e02d      	b.n	800680a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	895b      	ldrh	r3, [r3, #10]
 80067b2:	461a      	mov	r2, r3
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	899b      	ldrh	r3, [r3, #12]
 80067b8:	fb02 f303 	mul.w	r3, r2, r3
 80067bc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80067be:	e019      	b.n	80067f4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6979      	ldr	r1, [r7, #20]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7ff fd37 	bl	8006238 <get_fat>
 80067ca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d2:	d101      	bne.n	80067d8 <dir_sdi+0x90>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e03c      	b.n	8006852 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d904      	bls.n	80067e8 <dir_sdi+0xa0>
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d301      	bcc.n	80067ec <dir_sdi+0xa4>
 80067e8:	2302      	movs	r3, #2
 80067ea:	e032      	b.n	8006852 <dir_sdi+0x10a>
			ofs -= csz;
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d2e1      	bcs.n	80067c0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80067fc:	6979      	ldr	r1, [r7, #20]
 80067fe:	6938      	ldr	r0, [r7, #16]
 8006800:	f7ff fcfb 	bl	80061fa <clust2sect>
 8006804:	4602      	mov	r2, r0
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <dir_sdi+0xd4>
 8006818:	2302      	movs	r3, #2
 800681a:	e01a      	b.n	8006852 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	69da      	ldr	r2, [r3, #28]
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	899b      	ldrh	r3, [r3, #12]
 8006824:	4619      	mov	r1, r3
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	fbb3 f3f1 	udiv	r3, r3, r1
 800682c:	441a      	add	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	899b      	ldrh	r3, [r3, #12]
 800683c:	461a      	mov	r2, r3
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	fbb3 f0f2 	udiv	r0, r3, r2
 8006844:	fb00 f202 	mul.w	r2, r0, r2
 8006848:	1a9b      	subs	r3, r3, r2
 800684a:	18ca      	adds	r2, r1, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b086      	sub	sp, #24
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	3320      	adds	r3, #32
 8006870:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <dir_next+0x28>
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006880:	d301      	bcc.n	8006886 <dir_next+0x2c>
 8006882:	2304      	movs	r3, #4
 8006884:	e0bb      	b.n	80069fe <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	899b      	ldrh	r3, [r3, #12]
 800688a:	461a      	mov	r2, r3
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006892:	fb01 f202 	mul.w	r2, r1, r2
 8006896:	1a9b      	subs	r3, r3, r2
 8006898:	2b00      	cmp	r3, #0
 800689a:	f040 809d 	bne.w	80069d8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10b      	bne.n	80068c8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	095b      	lsrs	r3, r3, #5
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	8912      	ldrh	r2, [r2, #8]
 80068b8:	4293      	cmp	r3, r2
 80068ba:	f0c0 808d 	bcc.w	80069d8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	61da      	str	r2, [r3, #28]
 80068c4:	2304      	movs	r3, #4
 80068c6:	e09a      	b.n	80069fe <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	899b      	ldrh	r3, [r3, #12]
 80068cc:	461a      	mov	r2, r3
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	8952      	ldrh	r2, [r2, #10]
 80068d8:	3a01      	subs	r2, #1
 80068da:	4013      	ands	r3, r2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d17b      	bne.n	80069d8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	4619      	mov	r1, r3
 80068e8:	4610      	mov	r0, r2
 80068ea:	f7ff fca5 	bl	8006238 <get_fat>
 80068ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d801      	bhi.n	80068fa <dir_next+0xa0>
 80068f6:	2302      	movs	r3, #2
 80068f8:	e081      	b.n	80069fe <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006900:	d101      	bne.n	8006906 <dir_next+0xac>
 8006902:	2301      	movs	r3, #1
 8006904:	e07b      	b.n	80069fe <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	429a      	cmp	r2, r3
 800690e:	d359      	bcc.n	80069c4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d104      	bne.n	8006920 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	61da      	str	r2, [r3, #28]
 800691c:	2304      	movs	r3, #4
 800691e:	e06e      	b.n	80069fe <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	4619      	mov	r1, r3
 8006928:	4610      	mov	r0, r2
 800692a:	f7ff fe75 	bl	8006618 <create_chain>
 800692e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <dir_next+0xe0>
 8006936:	2307      	movs	r3, #7
 8006938:	e061      	b.n	80069fe <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <dir_next+0xea>
 8006940:	2302      	movs	r3, #2
 8006942:	e05c      	b.n	80069fe <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694a:	d101      	bne.n	8006950 <dir_next+0xf6>
 800694c:	2301      	movs	r3, #1
 800694e:	e056      	b.n	80069fe <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f7ff fbe1 	bl	8006118 <sync_window>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <dir_next+0x106>
 800695c:	2301      	movs	r3, #1
 800695e:	e04e      	b.n	80069fe <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	899b      	ldrh	r3, [r3, #12]
 800696a:	461a      	mov	r2, r3
 800696c:	2100      	movs	r1, #0
 800696e:	f7ff fa93 	bl	8005e98 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006972:	2300      	movs	r3, #0
 8006974:	613b      	str	r3, [r7, #16]
 8006976:	6979      	ldr	r1, [r7, #20]
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f7ff fc3e 	bl	80061fa <clust2sect>
 800697e:	4602      	mov	r2, r0
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	635a      	str	r2, [r3, #52]	; 0x34
 8006984:	e012      	b.n	80069ac <dir_next+0x152>
						fs->wflag = 1;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f7ff fbc3 	bl	8006118 <sync_window>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <dir_next+0x142>
 8006998:	2301      	movs	r3, #1
 800699a:	e030      	b.n	80069fe <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	3301      	adds	r3, #1
 80069a0:	613b      	str	r3, [r7, #16]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	635a      	str	r2, [r3, #52]	; 0x34
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	895b      	ldrh	r3, [r3, #10]
 80069b0:	461a      	mov	r2, r3
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d3e6      	bcc.n	8006986 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	1ad2      	subs	r2, r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80069ca:	6979      	ldr	r1, [r7, #20]
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f7ff fc14 	bl	80061fa <clust2sect>
 80069d2:	4602      	mov	r2, r0
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	899b      	ldrh	r3, [r3, #12]
 80069e8:	461a      	mov	r2, r3
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80069f0:	fb00 f202 	mul.w	r2, r0, r2
 80069f4:	1a9b      	subs	r3, r3, r2
 80069f6:	18ca      	adds	r2, r1, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	331a      	adds	r3, #26
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff f9bd 	bl	8005d94 <ld_word>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d109      	bne.n	8006a3a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	3314      	adds	r3, #20
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff f9b2 	bl	8005d94 <ld_word>
 8006a30:	4603      	mov	r3, r0
 8006a32:	041b      	lsls	r3, r3, #16
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006a4e:	2304      	movs	r3, #4
 8006a50:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8006a58:	e03c      	b.n	8006ad4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6938      	ldr	r0, [r7, #16]
 8006a62:	f7ff fb9d 	bl	80061a0 <move_window>
 8006a66:	4603      	mov	r3, r0
 8006a68:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006a6a:	7dfb      	ldrb	r3, [r7, #23]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d136      	bne.n	8006ade <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006a7e:	2304      	movs	r3, #4
 8006a80:	75fb      	strb	r3, [r7, #23]
 8006a82:	e031      	b.n	8006ae8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	330b      	adds	r3, #11
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a90:	73bb      	strb	r3, [r7, #14]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	7bba      	ldrb	r2, [r7, #14]
 8006a96:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006a98:	7bfb      	ldrb	r3, [r7, #15]
 8006a9a:	2be5      	cmp	r3, #229	; 0xe5
 8006a9c:	d011      	beq.n	8006ac2 <dir_read+0x7e>
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
 8006aa0:	2b2e      	cmp	r3, #46	; 0x2e
 8006aa2:	d00e      	beq.n	8006ac2 <dir_read+0x7e>
 8006aa4:	7bbb      	ldrb	r3, [r7, #14]
 8006aa6:	2b0f      	cmp	r3, #15
 8006aa8:	d00b      	beq.n	8006ac2 <dir_read+0x7e>
 8006aaa:	7bbb      	ldrb	r3, [r7, #14]
 8006aac:	f023 0320 	bic.w	r3, r3, #32
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	bf0c      	ite	eq
 8006ab4:	2301      	moveq	r3, #1
 8006ab6:	2300      	movne	r3, #0
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	461a      	mov	r2, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d00f      	beq.n	8006ae2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7ff fec8 	bl	800685a <dir_next>
 8006aca:	4603      	mov	r3, r0
 8006acc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d108      	bne.n	8006ae6 <dir_read+0xa2>
	while (dp->sect) {
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1be      	bne.n	8006a5a <dir_read+0x16>
 8006adc:	e004      	b.n	8006ae8 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006ade:	bf00      	nop
 8006ae0:	e002      	b.n	8006ae8 <dir_read+0xa4>
				break;
 8006ae2:	bf00      	nop
 8006ae4:	e000      	b.n	8006ae8 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006ae6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006ae8:	7dfb      	ldrb	r3, [r7, #23]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <dir_read+0xb0>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	61da      	str	r2, [r3, #28]
	return res;
 8006af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b086      	sub	sp, #24
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff fe1a 	bl	8006748 <dir_sdi>
 8006b14:	4603      	mov	r3, r0
 8006b16:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006b18:	7dfb      	ldrb	r3, [r7, #23]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <dir_find+0x24>
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
 8006b20:	e03e      	b.n	8006ba0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	4619      	mov	r1, r3
 8006b28:	6938      	ldr	r0, [r7, #16]
 8006b2a:	f7ff fb39 	bl	80061a0 <move_window>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d12f      	bne.n	8006b98 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d102      	bne.n	8006b4c <dir_find+0x4e>
 8006b46:	2304      	movs	r3, #4
 8006b48:	75fb      	strb	r3, [r7, #23]
 8006b4a:	e028      	b.n	8006b9e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	330b      	adds	r3, #11
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	330b      	adds	r3, #11
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	f003 0308 	and.w	r3, r3, #8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10a      	bne.n	8006b84 <dir_find+0x86>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a18      	ldr	r0, [r3, #32]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	3324      	adds	r3, #36	; 0x24
 8006b76:	220b      	movs	r2, #11
 8006b78:	4619      	mov	r1, r3
 8006b7a:	f7ff f9a8 	bl	8005ece <mem_cmp>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00b      	beq.n	8006b9c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006b84:	2100      	movs	r1, #0
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff fe67 	bl	800685a <dir_next>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006b90:	7dfb      	ldrb	r3, [r7, #23]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0c5      	beq.n	8006b22 <dir_find+0x24>
 8006b96:	e002      	b.n	8006b9e <dir_find+0xa0>
		if (res != FR_OK) break;
 8006b98:	bf00      	nop
 8006b9a:	e000      	b.n	8006b9e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006b9c:	bf00      	nop

	return res;
 8006b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d04e      	beq.n	8006c5e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	613b      	str	r3, [r7, #16]
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8006bc8:	e021      	b.n	8006c0e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1a      	ldr	r2, [r3, #32]
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	1c59      	adds	r1, r3, #1
 8006bd2:	6179      	str	r1, [r7, #20]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	2b20      	cmp	r3, #32
 8006bde:	d100      	bne.n	8006be2 <get_fileinfo+0x3a>
 8006be0:	e015      	b.n	8006c0e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
 8006be4:	2b05      	cmp	r3, #5
 8006be6:	d101      	bne.n	8006bec <get_fileinfo+0x44>
 8006be8:	23e5      	movs	r3, #229	; 0xe5
 8006bea:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	2b09      	cmp	r3, #9
 8006bf0:	d106      	bne.n	8006c00 <get_fileinfo+0x58>
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	613a      	str	r2, [r7, #16]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	222e      	movs	r2, #46	; 0x2e
 8006bfe:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	613a      	str	r2, [r7, #16]
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	4413      	add	r3, r2
 8006c0a:	7bfa      	ldrb	r2, [r7, #15]
 8006c0c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2b0a      	cmp	r3, #10
 8006c12:	d9da      	bls.n	8006bca <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	4413      	add	r3, r2
 8006c1a:	3309      	adds	r3, #9
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	7ada      	ldrb	r2, [r3, #11]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	331c      	adds	r3, #28
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff f8c7 	bl	8005dc4 <ld_dword>
 8006c36:	4602      	mov	r2, r0
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	3316      	adds	r3, #22
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7ff f8be 	bl	8005dc4 <ld_dword>
 8006c48:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	80da      	strh	r2, [r3, #6]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	0c1b      	lsrs	r3, r3, #16
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	809a      	strh	r2, [r3, #4]
 8006c5c:	e000      	b.n	8006c60 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006c5e:	bf00      	nop
}
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	3324      	adds	r3, #36	; 0x24
 8006c7c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006c7e:	220b      	movs	r2, #11
 8006c80:	2120      	movs	r1, #32
 8006c82:	68b8      	ldr	r0, [r7, #8]
 8006c84:	f7ff f908 	bl	8005e98 <mem_set>
	si = i = 0; ni = 8;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	613b      	str	r3, [r7, #16]
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	2308      	movs	r3, #8
 8006c92:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	61fa      	str	r2, [r7, #28]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006ca2:	7efb      	ldrb	r3, [r7, #27]
 8006ca4:	2b20      	cmp	r3, #32
 8006ca6:	d94e      	bls.n	8006d46 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006ca8:	7efb      	ldrb	r3, [r7, #27]
 8006caa:	2b2f      	cmp	r3, #47	; 0x2f
 8006cac:	d006      	beq.n	8006cbc <create_name+0x54>
 8006cae:	7efb      	ldrb	r3, [r7, #27]
 8006cb0:	2b5c      	cmp	r3, #92	; 0x5c
 8006cb2:	d110      	bne.n	8006cd6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006cb4:	e002      	b.n	8006cbc <create_name+0x54>
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	61fb      	str	r3, [r7, #28]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b2f      	cmp	r3, #47	; 0x2f
 8006cc6:	d0f6      	beq.n	8006cb6 <create_name+0x4e>
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	4413      	add	r3, r2
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	2b5c      	cmp	r3, #92	; 0x5c
 8006cd2:	d0f0      	beq.n	8006cb6 <create_name+0x4e>
			break;
 8006cd4:	e038      	b.n	8006d48 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006cd6:	7efb      	ldrb	r3, [r7, #27]
 8006cd8:	2b2e      	cmp	r3, #46	; 0x2e
 8006cda:	d003      	beq.n	8006ce4 <create_name+0x7c>
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d30c      	bcc.n	8006cfe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2b0b      	cmp	r3, #11
 8006ce8:	d002      	beq.n	8006cf0 <create_name+0x88>
 8006cea:	7efb      	ldrb	r3, [r7, #27]
 8006cec:	2b2e      	cmp	r3, #46	; 0x2e
 8006cee:	d001      	beq.n	8006cf4 <create_name+0x8c>
 8006cf0:	2306      	movs	r3, #6
 8006cf2:	e044      	b.n	8006d7e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006cf4:	2308      	movs	r3, #8
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	230b      	movs	r3, #11
 8006cfa:	617b      	str	r3, [r7, #20]
			continue;
 8006cfc:	e022      	b.n	8006d44 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006cfe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	da04      	bge.n	8006d10 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006d06:	7efb      	ldrb	r3, [r7, #27]
 8006d08:	3b80      	subs	r3, #128	; 0x80
 8006d0a:	4a1f      	ldr	r2, [pc, #124]	; (8006d88 <create_name+0x120>)
 8006d0c:	5cd3      	ldrb	r3, [r2, r3]
 8006d0e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006d10:	7efb      	ldrb	r3, [r7, #27]
 8006d12:	4619      	mov	r1, r3
 8006d14:	481d      	ldr	r0, [pc, #116]	; (8006d8c <create_name+0x124>)
 8006d16:	f7ff f901 	bl	8005f1c <chk_chr>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <create_name+0xbc>
 8006d20:	2306      	movs	r3, #6
 8006d22:	e02c      	b.n	8006d7e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006d24:	7efb      	ldrb	r3, [r7, #27]
 8006d26:	2b60      	cmp	r3, #96	; 0x60
 8006d28:	d905      	bls.n	8006d36 <create_name+0xce>
 8006d2a:	7efb      	ldrb	r3, [r7, #27]
 8006d2c:	2b7a      	cmp	r3, #122	; 0x7a
 8006d2e:	d802      	bhi.n	8006d36 <create_name+0xce>
 8006d30:	7efb      	ldrb	r3, [r7, #27]
 8006d32:	3b20      	subs	r3, #32
 8006d34:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	613a      	str	r2, [r7, #16]
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	4413      	add	r3, r2
 8006d40:	7efa      	ldrb	r2, [r7, #27]
 8006d42:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006d44:	e7a6      	b.n	8006c94 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006d46:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	441a      	add	r2, r3
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <create_name+0xf4>
 8006d58:	2306      	movs	r3, #6
 8006d5a:	e010      	b.n	8006d7e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2be5      	cmp	r3, #229	; 0xe5
 8006d62:	d102      	bne.n	8006d6a <create_name+0x102>
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2205      	movs	r2, #5
 8006d68:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006d6a:	7efb      	ldrb	r3, [r7, #27]
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d801      	bhi.n	8006d74 <create_name+0x10c>
 8006d70:	2204      	movs	r2, #4
 8006d72:	e000      	b.n	8006d76 <create_name+0x10e>
 8006d74:	2200      	movs	r2, #0
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	330b      	adds	r3, #11
 8006d7a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006d7c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3720      	adds	r7, #32
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	0800b514 	.word	0x0800b514
 8006d8c:	0800b470 	.word	0x0800b470

08006d90 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006da4:	e002      	b.n	8006dac <follow_path+0x1c>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	3301      	adds	r3, #1
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2b2f      	cmp	r3, #47	; 0x2f
 8006db2:	d0f8      	beq.n	8006da6 <follow_path+0x16>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2b5c      	cmp	r3, #92	; 0x5c
 8006dba:	d0f4      	beq.n	8006da6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b1f      	cmp	r3, #31
 8006dc8:	d80a      	bhi.n	8006de0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2280      	movs	r2, #128	; 0x80
 8006dce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7ff fcb7 	bl	8006748 <dir_sdi>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	75fb      	strb	r3, [r7, #23]
 8006dde:	e048      	b.n	8006e72 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006de0:	463b      	mov	r3, r7
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7ff ff3f 	bl	8006c68 <create_name>
 8006dea:	4603      	mov	r3, r0
 8006dec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006dee:	7dfb      	ldrb	r3, [r7, #23]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d139      	bne.n	8006e68 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7ff fe82 	bl	8006afe <dir_find>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006e04:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00a      	beq.n	8006e22 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	d12c      	bne.n	8006e6c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006e12:	7afb      	ldrb	r3, [r7, #11]
 8006e14:	f003 0304 	and.w	r3, r3, #4
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d127      	bne.n	8006e6c <follow_path+0xdc>
 8006e1c:	2305      	movs	r3, #5
 8006e1e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006e20:	e024      	b.n	8006e6c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e22:	7afb      	ldrb	r3, [r7, #11]
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d121      	bne.n	8006e70 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	799b      	ldrb	r3, [r3, #6]
 8006e30:	f003 0310 	and.w	r3, r3, #16
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d102      	bne.n	8006e3e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006e38:	2305      	movs	r3, #5
 8006e3a:	75fb      	strb	r3, [r7, #23]
 8006e3c:	e019      	b.n	8006e72 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	8992      	ldrh	r2, [r2, #12]
 8006e4c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e50:	fb00 f202 	mul.w	r2, r0, r2
 8006e54:	1a9b      	subs	r3, r3, r2
 8006e56:	440b      	add	r3, r1
 8006e58:	4619      	mov	r1, r3
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f7ff fdd3 	bl	8006a06 <ld_clust>
 8006e60:	4602      	mov	r2, r0
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e66:	e7bb      	b.n	8006de0 <follow_path+0x50>
			if (res != FR_OK) break;
 8006e68:	bf00      	nop
 8006e6a:	e002      	b.n	8006e72 <follow_path+0xe2>
				break;
 8006e6c:	bf00      	nop
 8006e6e:	e000      	b.n	8006e72 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e70:	bf00      	nop
			}
		}
	}

	return res;
 8006e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006e84:	f04f 33ff 	mov.w	r3, #4294967295
 8006e88:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d031      	beq.n	8006ef6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	617b      	str	r3, [r7, #20]
 8006e98:	e002      	b.n	8006ea0 <get_ldnumber+0x24>
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	617b      	str	r3, [r7, #20]
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b20      	cmp	r3, #32
 8006ea6:	d903      	bls.n	8006eb0 <get_ldnumber+0x34>
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b3a      	cmp	r3, #58	; 0x3a
 8006eae:	d1f4      	bne.n	8006e9a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	2b3a      	cmp	r3, #58	; 0x3a
 8006eb6:	d11c      	bne.n	8006ef2 <get_ldnumber+0x76>
			tp = *path;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	60fa      	str	r2, [r7, #12]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	3b30      	subs	r3, #48	; 0x30
 8006ec8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b09      	cmp	r3, #9
 8006ece:	d80e      	bhi.n	8006eee <get_ldnumber+0x72>
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d10a      	bne.n	8006eee <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d107      	bne.n	8006eee <get_ldnumber+0x72>
					vol = (int)i;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	617b      	str	r3, [r7, #20]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	e002      	b.n	8006ef8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006ef6:	693b      	ldr	r3, [r7, #16]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	371c      	adds	r7, #28
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	70da      	strb	r2, [r3, #3]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff f93e 	bl	80061a0 <move_window>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <check_fs+0x2a>
 8006f2a:	2304      	movs	r3, #4
 8006f2c:	e038      	b.n	8006fa0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	3338      	adds	r3, #56	; 0x38
 8006f32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fe ff2c 	bl	8005d94 <ld_word>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d001      	beq.n	8006f4c <check_fs+0x48>
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e029      	b.n	8006fa0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f52:	2be9      	cmp	r3, #233	; 0xe9
 8006f54:	d009      	beq.n	8006f6a <check_fs+0x66>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f5c:	2beb      	cmp	r3, #235	; 0xeb
 8006f5e:	d11e      	bne.n	8006f9e <check_fs+0x9a>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f66:	2b90      	cmp	r3, #144	; 0x90
 8006f68:	d119      	bne.n	8006f9e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	3338      	adds	r3, #56	; 0x38
 8006f6e:	3336      	adds	r3, #54	; 0x36
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe ff27 	bl	8005dc4 <ld_dword>
 8006f76:	4603      	mov	r3, r0
 8006f78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f7c:	4a0a      	ldr	r2, [pc, #40]	; (8006fa8 <check_fs+0xa4>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d101      	bne.n	8006f86 <check_fs+0x82>
 8006f82:	2300      	movs	r3, #0
 8006f84:	e00c      	b.n	8006fa0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	3338      	adds	r3, #56	; 0x38
 8006f8a:	3352      	adds	r3, #82	; 0x52
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fe ff19 	bl	8005dc4 <ld_dword>
 8006f92:	4603      	mov	r3, r0
 8006f94:	4a05      	ldr	r2, [pc, #20]	; (8006fac <check_fs+0xa8>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d101      	bne.n	8006f9e <check_fs+0x9a>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e000      	b.n	8006fa0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006f9e:	2302      	movs	r3, #2
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	00544146 	.word	0x00544146
 8006fac:	33544146 	.word	0x33544146

08006fb0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b096      	sub	sp, #88	; 0x58
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f7ff ff59 	bl	8006e7c <get_ldnumber>
 8006fca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	da01      	bge.n	8006fd6 <find_volume+0x26>
 8006fd2:	230b      	movs	r3, #11
 8006fd4:	e26a      	b.n	80074ac <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006fd6:	4aa3      	ldr	r2, [pc, #652]	; (8007264 <find_volume+0x2b4>)
 8006fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fde:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <find_volume+0x3a>
 8006fe6:	230c      	movs	r3, #12
 8006fe8:	e260      	b.n	80074ac <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 8006fea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006fec:	f7fe ffb1 	bl	8005f52 <lock_fs>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <find_volume+0x4a>
 8006ff6:	230f      	movs	r3, #15
 8006ff8:	e258      	b.n	80074ac <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ffe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007000:	79fb      	ldrb	r3, [r7, #7]
 8007002:	f023 0301 	bic.w	r3, r3, #1
 8007006:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d01a      	beq.n	8007046 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	785b      	ldrb	r3, [r3, #1]
 8007014:	4618      	mov	r0, r3
 8007016:	f7fe fe1f 	bl	8005c58 <disk_status>
 800701a:	4603      	mov	r3, r0
 800701c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007020:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10c      	bne.n	8007046 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800702c:	79fb      	ldrb	r3, [r7, #7]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d007      	beq.n	8007042 <find_volume+0x92>
 8007032:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800703e:	230a      	movs	r3, #10
 8007040:	e234      	b.n	80074ac <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 8007042:	2300      	movs	r3, #0
 8007044:	e232      	b.n	80074ac <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	2200      	movs	r2, #0
 800704a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800704c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800704e:	b2da      	uxtb	r2, r3
 8007050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007052:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007056:	785b      	ldrb	r3, [r3, #1]
 8007058:	4618      	mov	r0, r3
 800705a:	f7fe fe17 	bl	8005c8c <disk_initialize>
 800705e:	4603      	mov	r3, r0
 8007060:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007064:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007068:	f003 0301 	and.w	r3, r3, #1
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007070:	2303      	movs	r3, #3
 8007072:	e21b      	b.n	80074ac <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007074:	79fb      	ldrb	r3, [r7, #7]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d007      	beq.n	800708a <find_volume+0xda>
 800707a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800707e:	f003 0304 	and.w	r3, r3, #4
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8007086:	230a      	movs	r3, #10
 8007088:	e210      	b.n	80074ac <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800708a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708c:	7858      	ldrb	r0, [r3, #1]
 800708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007090:	330c      	adds	r3, #12
 8007092:	461a      	mov	r2, r3
 8007094:	2102      	movs	r1, #2
 8007096:	f7fe fe5f 	bl	8005d58 <disk_ioctl>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <find_volume+0xf4>
 80070a0:	2301      	movs	r3, #1
 80070a2:	e203      	b.n	80074ac <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80070a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a6:	899b      	ldrh	r3, [r3, #12]
 80070a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ac:	d80d      	bhi.n	80070ca <find_volume+0x11a>
 80070ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b0:	899b      	ldrh	r3, [r3, #12]
 80070b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070b6:	d308      	bcc.n	80070ca <find_volume+0x11a>
 80070b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ba:	899b      	ldrh	r3, [r3, #12]
 80070bc:	461a      	mov	r2, r3
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	899b      	ldrh	r3, [r3, #12]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	4013      	ands	r3, r2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <find_volume+0x11e>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e1ee      	b.n	80074ac <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80070ce:	2300      	movs	r3, #0
 80070d0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80070d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80070d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070d6:	f7ff ff15 	bl	8006f04 <check_fs>
 80070da:	4603      	mov	r3, r0
 80070dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80070e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d149      	bne.n	800717c <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80070e8:	2300      	movs	r3, #0
 80070ea:	643b      	str	r3, [r7, #64]	; 0x40
 80070ec:	e01e      	b.n	800712c <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80070f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80070fc:	4413      	add	r3, r2
 80070fe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	3304      	adds	r3, #4
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d006      	beq.n	8007118 <find_volume+0x168>
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	3308      	adds	r3, #8
 800710e:	4618      	mov	r0, r3
 8007110:	f7fe fe58 	bl	8005dc4 <ld_dword>
 8007114:	4602      	mov	r2, r0
 8007116:	e000      	b.n	800711a <find_volume+0x16a>
 8007118:	2200      	movs	r2, #0
 800711a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	3358      	adds	r3, #88	; 0x58
 8007120:	443b      	add	r3, r7
 8007122:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007128:	3301      	adds	r3, #1
 800712a:	643b      	str	r3, [r7, #64]	; 0x40
 800712c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800712e:	2b03      	cmp	r3, #3
 8007130:	d9dd      	bls.n	80070ee <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007132:	2300      	movs	r3, #0
 8007134:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007138:	2b00      	cmp	r3, #0
 800713a:	d002      	beq.n	8007142 <find_volume+0x192>
 800713c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800713e:	3b01      	subs	r3, #1
 8007140:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	3358      	adds	r3, #88	; 0x58
 8007148:	443b      	add	r3, r7
 800714a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800714e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <find_volume+0x1b2>
 8007156:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007158:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800715a:	f7ff fed3 	bl	8006f04 <check_fs>
 800715e:	4603      	mov	r3, r0
 8007160:	e000      	b.n	8007164 <find_volume+0x1b4>
 8007162:	2303      	movs	r3, #3
 8007164:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007168:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800716c:	2b01      	cmp	r3, #1
 800716e:	d905      	bls.n	800717c <find_volume+0x1cc>
 8007170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007172:	3301      	adds	r3, #1
 8007174:	643b      	str	r3, [r7, #64]	; 0x40
 8007176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007178:	2b03      	cmp	r3, #3
 800717a:	d9e2      	bls.n	8007142 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800717c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007180:	2b04      	cmp	r3, #4
 8007182:	d101      	bne.n	8007188 <find_volume+0x1d8>
 8007184:	2301      	movs	r3, #1
 8007186:	e191      	b.n	80074ac <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007188:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800718c:	2b01      	cmp	r3, #1
 800718e:	d901      	bls.n	8007194 <find_volume+0x1e4>
 8007190:	230d      	movs	r3, #13
 8007192:	e18b      	b.n	80074ac <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	3338      	adds	r3, #56	; 0x38
 8007198:	330b      	adds	r3, #11
 800719a:	4618      	mov	r0, r3
 800719c:	f7fe fdfa 	bl	8005d94 <ld_word>
 80071a0:	4603      	mov	r3, r0
 80071a2:	461a      	mov	r2, r3
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	899b      	ldrh	r3, [r3, #12]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d001      	beq.n	80071b0 <find_volume+0x200>
 80071ac:	230d      	movs	r3, #13
 80071ae:	e17d      	b.n	80074ac <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80071b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b2:	3338      	adds	r3, #56	; 0x38
 80071b4:	3316      	adds	r3, #22
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fe fdec 	bl	8005d94 <ld_word>
 80071bc:	4603      	mov	r3, r0
 80071be:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80071c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d106      	bne.n	80071d4 <find_volume+0x224>
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	3338      	adds	r3, #56	; 0x38
 80071ca:	3324      	adds	r3, #36	; 0x24
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fe fdf9 	bl	8005dc4 <ld_dword>
 80071d2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80071d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071d8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80071da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071dc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80071e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80071e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e6:	789b      	ldrb	r3, [r3, #2]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d005      	beq.n	80071f8 <find_volume+0x248>
 80071ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ee:	789b      	ldrb	r3, [r3, #2]
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d001      	beq.n	80071f8 <find_volume+0x248>
 80071f4:	230d      	movs	r3, #13
 80071f6:	e159      	b.n	80074ac <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80071f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fa:	789b      	ldrb	r3, [r3, #2]
 80071fc:	461a      	mov	r2, r3
 80071fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007200:	fb02 f303 	mul.w	r3, r2, r3
 8007204:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800720c:	b29a      	uxth	r2, r3
 800720e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007210:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	895b      	ldrh	r3, [r3, #10]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d008      	beq.n	800722c <find_volume+0x27c>
 800721a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721c:	895b      	ldrh	r3, [r3, #10]
 800721e:	461a      	mov	r2, r3
 8007220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007222:	895b      	ldrh	r3, [r3, #10]
 8007224:	3b01      	subs	r3, #1
 8007226:	4013      	ands	r3, r2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <find_volume+0x280>
 800722c:	230d      	movs	r3, #13
 800722e:	e13d      	b.n	80074ac <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007232:	3338      	adds	r3, #56	; 0x38
 8007234:	3311      	adds	r3, #17
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe fdac 	bl	8005d94 <ld_word>
 800723c:	4603      	mov	r3, r0
 800723e:	461a      	mov	r2, r3
 8007240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007242:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007246:	891b      	ldrh	r3, [r3, #8]
 8007248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800724a:	8992      	ldrh	r2, [r2, #12]
 800724c:	0952      	lsrs	r2, r2, #5
 800724e:	b292      	uxth	r2, r2
 8007250:	fbb3 f1f2 	udiv	r1, r3, r2
 8007254:	fb01 f202 	mul.w	r2, r1, r2
 8007258:	1a9b      	subs	r3, r3, r2
 800725a:	b29b      	uxth	r3, r3
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <find_volume+0x2b8>
 8007260:	230d      	movs	r3, #13
 8007262:	e123      	b.n	80074ac <find_volume+0x4fc>
 8007264:	20000288 	.word	0x20000288

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726a:	3338      	adds	r3, #56	; 0x38
 800726c:	3313      	adds	r3, #19
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe fd90 	bl	8005d94 <ld_word>
 8007274:	4603      	mov	r3, r0
 8007276:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800727a:	2b00      	cmp	r3, #0
 800727c:	d106      	bne.n	800728c <find_volume+0x2dc>
 800727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007280:	3338      	adds	r3, #56	; 0x38
 8007282:	3320      	adds	r3, #32
 8007284:	4618      	mov	r0, r3
 8007286:	f7fe fd9d 	bl	8005dc4 <ld_dword>
 800728a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	3338      	adds	r3, #56	; 0x38
 8007290:	330e      	adds	r3, #14
 8007292:	4618      	mov	r0, r3
 8007294:	f7fe fd7e 	bl	8005d94 <ld_word>
 8007298:	4603      	mov	r3, r0
 800729a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800729c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <find_volume+0x2f6>
 80072a2:	230d      	movs	r3, #13
 80072a4:	e102      	b.n	80074ac <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80072a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80072a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072aa:	4413      	add	r3, r2
 80072ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072ae:	8911      	ldrh	r1, [r2, #8]
 80072b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072b2:	8992      	ldrh	r2, [r2, #12]
 80072b4:	0952      	lsrs	r2, r2, #5
 80072b6:	b292      	uxth	r2, r2
 80072b8:	fbb1 f2f2 	udiv	r2, r1, r2
 80072bc:	b292      	uxth	r2, r2
 80072be:	4413      	add	r3, r2
 80072c0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80072c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d201      	bcs.n	80072ce <find_volume+0x31e>
 80072ca:	230d      	movs	r3, #13
 80072cc:	e0ee      	b.n	80074ac <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80072ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072d6:	8952      	ldrh	r2, [r2, #10]
 80072d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80072dc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <find_volume+0x338>
 80072e4:	230d      	movs	r3, #13
 80072e6:	e0e1      	b.n	80074ac <find_volume+0x4fc>
		fmt = FS_FAT32;
 80072e8:	2303      	movs	r3, #3
 80072ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d802      	bhi.n	80072fe <find_volume+0x34e>
 80072f8:	2302      	movs	r3, #2
 80072fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007304:	4293      	cmp	r3, r2
 8007306:	d802      	bhi.n	800730e <find_volume+0x35e>
 8007308:	2301      	movs	r3, #1
 800730a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	1c9a      	adds	r2, r3, #2
 8007312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007314:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800731a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800731c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800731e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007320:	441a      	add	r2, r3
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007326:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	441a      	add	r2, r3
 800732c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007330:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007334:	2b03      	cmp	r3, #3
 8007336:	d11e      	bne.n	8007376 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733a:	3338      	adds	r3, #56	; 0x38
 800733c:	332a      	adds	r3, #42	; 0x2a
 800733e:	4618      	mov	r0, r3
 8007340:	f7fe fd28 	bl	8005d94 <ld_word>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <find_volume+0x39e>
 800734a:	230d      	movs	r3, #13
 800734c:	e0ae      	b.n	80074ac <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007350:	891b      	ldrh	r3, [r3, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <find_volume+0x3aa>
 8007356:	230d      	movs	r3, #13
 8007358:	e0a8      	b.n	80074ac <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800735a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735c:	3338      	adds	r3, #56	; 0x38
 800735e:	332c      	adds	r3, #44	; 0x2c
 8007360:	4618      	mov	r0, r3
 8007362:	f7fe fd2f 	bl	8005dc4 <ld_dword>
 8007366:	4602      	mov	r2, r0
 8007368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800736c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	647b      	str	r3, [r7, #68]	; 0x44
 8007374:	e01f      	b.n	80073b6 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007378:	891b      	ldrh	r3, [r3, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <find_volume+0x3d2>
 800737e:	230d      	movs	r3, #13
 8007380:	e094      	b.n	80074ac <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007388:	441a      	add	r2, r3
 800738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800738e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007392:	2b02      	cmp	r3, #2
 8007394:	d103      	bne.n	800739e <find_volume+0x3ee>
 8007396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	e00a      	b.n	80073b4 <find_volume+0x404>
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a0:	69da      	ldr	r2, [r3, #28]
 80073a2:	4613      	mov	r3, r2
 80073a4:	005b      	lsls	r3, r3, #1
 80073a6:	4413      	add	r3, r2
 80073a8:	085a      	lsrs	r2, r3, #1
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80073b4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	6a1a      	ldr	r2, [r3, #32]
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	899b      	ldrh	r3, [r3, #12]
 80073be:	4619      	mov	r1, r3
 80073c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073c2:	440b      	add	r3, r1
 80073c4:	3b01      	subs	r3, #1
 80073c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073c8:	8989      	ldrh	r1, [r1, #12]
 80073ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d201      	bcs.n	80073d6 <find_volume+0x426>
 80073d2:	230d      	movs	r3, #13
 80073d4:	e06a      	b.n	80074ac <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80073d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d8:	f04f 32ff 	mov.w	r2, #4294967295
 80073dc:	619a      	str	r2, [r3, #24]
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	699a      	ldr	r2, [r3, #24]
 80073e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	2280      	movs	r2, #128	; 0x80
 80073ea:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80073ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d149      	bne.n	8007488 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80073f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f6:	3338      	adds	r3, #56	; 0x38
 80073f8:	3330      	adds	r3, #48	; 0x30
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe fcca 	bl	8005d94 <ld_word>
 8007400:	4603      	mov	r3, r0
 8007402:	2b01      	cmp	r3, #1
 8007404:	d140      	bne.n	8007488 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007408:	3301      	adds	r3, #1
 800740a:	4619      	mov	r1, r3
 800740c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800740e:	f7fe fec7 	bl	80061a0 <move_window>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d137      	bne.n	8007488 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	2200      	movs	r2, #0
 800741c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007420:	3338      	adds	r3, #56	; 0x38
 8007422:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007426:	4618      	mov	r0, r3
 8007428:	f7fe fcb4 	bl	8005d94 <ld_word>
 800742c:	4603      	mov	r3, r0
 800742e:	461a      	mov	r2, r3
 8007430:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007434:	429a      	cmp	r2, r3
 8007436:	d127      	bne.n	8007488 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	3338      	adds	r3, #56	; 0x38
 800743c:	4618      	mov	r0, r3
 800743e:	f7fe fcc1 	bl	8005dc4 <ld_dword>
 8007442:	4603      	mov	r3, r0
 8007444:	4a1b      	ldr	r2, [pc, #108]	; (80074b4 <find_volume+0x504>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d11e      	bne.n	8007488 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744c:	3338      	adds	r3, #56	; 0x38
 800744e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe fcb6 	bl	8005dc4 <ld_dword>
 8007458:	4603      	mov	r3, r0
 800745a:	4a17      	ldr	r2, [pc, #92]	; (80074b8 <find_volume+0x508>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d113      	bne.n	8007488 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	3338      	adds	r3, #56	; 0x38
 8007464:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007468:	4618      	mov	r0, r3
 800746a:	f7fe fcab 	bl	8005dc4 <ld_dword>
 800746e:	4602      	mov	r2, r0
 8007470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007472:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007476:	3338      	adds	r3, #56	; 0x38
 8007478:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800747c:	4618      	mov	r0, r3
 800747e:	f7fe fca1 	bl	8005dc4 <ld_dword>
 8007482:	4602      	mov	r2, r0
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800748e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007490:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <find_volume+0x50c>)
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	3301      	adds	r3, #1
 8007496:	b29a      	uxth	r2, r3
 8007498:	4b08      	ldr	r3, [pc, #32]	; (80074bc <find_volume+0x50c>)
 800749a:	801a      	strh	r2, [r3, #0]
 800749c:	4b07      	ldr	r3, [pc, #28]	; (80074bc <find_volume+0x50c>)
 800749e:	881a      	ldrh	r2, [r3, #0]
 80074a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80074a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074a6:	f7fe fe13 	bl	80060d0 <clear_lock>
#endif
	return FR_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3758      	adds	r7, #88	; 0x58
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	41615252 	.word	0x41615252
 80074b8:	61417272 	.word	0x61417272
 80074bc:	2000028c 	.word	0x2000028c

080074c0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80074ca:	2309      	movs	r3, #9
 80074cc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d02e      	beq.n	8007532 <validate+0x72>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d02a      	beq.n	8007532 <validate+0x72>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d025      	beq.n	8007532 <validate+0x72>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	889a      	ldrh	r2, [r3, #4]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	88db      	ldrh	r3, [r3, #6]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d11e      	bne.n	8007532 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fe fd2a 	bl	8005f52 <lock_fs>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d014      	beq.n	800752e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	785b      	ldrb	r3, [r3, #1]
 800750a:	4618      	mov	r0, r3
 800750c:	f7fe fba4 	bl	8005c58 <disk_status>
 8007510:	4603      	mov	r3, r0
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d102      	bne.n	8007520 <validate+0x60>
				res = FR_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	73fb      	strb	r3, [r7, #15]
 800751e:	e008      	b.n	8007532 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2100      	movs	r1, #0
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fd29 	bl	8005f7e <unlock_fs>
 800752c:	e001      	b.n	8007532 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800752e:	230f      	movs	r3, #15
 8007530:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d102      	bne.n	800753e <validate+0x7e>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	e000      	b.n	8007540 <validate+0x80>
 800753e:	2300      	movs	r3, #0
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	6013      	str	r3, [r2, #0]
	return res;
 8007544:	7bfb      	ldrb	r3, [r7, #15]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	4613      	mov	r3, r2
 800755c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007562:	f107 0310 	add.w	r3, r7, #16
 8007566:	4618      	mov	r0, r3
 8007568:	f7ff fc88 	bl	8006e7c <get_ldnumber>
 800756c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	2b00      	cmp	r3, #0
 8007572:	da01      	bge.n	8007578 <f_mount+0x28>
 8007574:	230b      	movs	r3, #11
 8007576:	e048      	b.n	800760a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007578:	4a26      	ldr	r2, [pc, #152]	; (8007614 <f_mount+0xc4>)
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007580:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00f      	beq.n	80075a8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007588:	69b8      	ldr	r0, [r7, #24]
 800758a:	f7fe fda1 	bl	80060d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f972 	bl	800787c <ff_del_syncobj>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <f_mount+0x52>
 800759e:	2302      	movs	r3, #2
 80075a0:	e033      	b.n	800760a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	2200      	movs	r2, #0
 80075a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00f      	beq.n	80075ce <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	3310      	adds	r3, #16
 80075bc:	4619      	mov	r1, r3
 80075be:	4610      	mov	r0, r2
 80075c0:	f000 f941 	bl	8007846 <ff_cre_syncobj>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <f_mount+0x7e>
 80075ca:	2302      	movs	r3, #2
 80075cc:	e01d      	b.n	800760a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	4910      	ldr	r1, [pc, #64]	; (8007614 <f_mount+0xc4>)
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <f_mount+0x94>
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d001      	beq.n	80075e8 <f_mount+0x98>
 80075e4:	2300      	movs	r3, #0
 80075e6:	e010      	b.n	800760a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80075e8:	f107 010c 	add.w	r1, r7, #12
 80075ec:	f107 0308 	add.w	r3, r7, #8
 80075f0:	2200      	movs	r2, #0
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7ff fcdc 	bl	8006fb0 <find_volume>
 80075f8:	4603      	mov	r3, r0
 80075fa:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	7dfa      	ldrb	r2, [r7, #23]
 8007600:	4611      	mov	r1, r2
 8007602:	4618      	mov	r0, r3
 8007604:	f7fe fcbb 	bl	8005f7e <unlock_fs>
 8007608:	7dfb      	ldrb	r3, [r7, #23]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3720      	adds	r7, #32
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20000288 	.word	0x20000288

08007618 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <f_opendir+0x14>
 8007628:	2309      	movs	r3, #9
 800762a:	e06a      	b.n	8007702 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8007630:	f107 010c 	add.w	r1, r7, #12
 8007634:	463b      	mov	r3, r7
 8007636:	2200      	movs	r2, #0
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fcb9 	bl	8006fb0 <find_volume>
 800763e:	4603      	mov	r3, r0
 8007640:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007642:	7dfb      	ldrb	r3, [r7, #23]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d14f      	bne.n	80076e8 <f_opendir+0xd0>
		obj->fs = fs;
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff fb9c 	bl	8006d90 <follow_path>
 8007658:	4603      	mov	r3, r0
 800765a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800765c:	7dfb      	ldrb	r3, [r7, #23]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d13d      	bne.n	80076de <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007668:	b25b      	sxtb	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	db12      	blt.n	8007694 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	799b      	ldrb	r3, [r3, #6]
 8007672:	f003 0310 	and.w	r3, r3, #16
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	4619      	mov	r1, r3
 8007682:	4610      	mov	r0, r2
 8007684:	f7ff f9bf 	bl	8006a06 <ld_clust>
 8007688:	4602      	mov	r2, r0
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	609a      	str	r2, [r3, #8]
 800768e:	e001      	b.n	8007694 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8007690:	2305      	movs	r3, #5
 8007692:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8007694:	7dfb      	ldrb	r3, [r7, #23]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d121      	bne.n	80076de <f_opendir+0xc6>
				obj->id = fs->id;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	88da      	ldrh	r2, [r3, #6]
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80076a2:	2100      	movs	r1, #0
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7ff f84f 	bl	8006748 <dir_sdi>
 80076aa:	4603      	mov	r3, r0
 80076ac:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d114      	bne.n	80076de <f_opendir+0xc6>
					if (obj->sclust) {
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00d      	beq.n	80076d8 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80076bc:	2100      	movs	r1, #0
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7fe fc78 	bl	8005fb4 <inc_lock>
 80076c4:	4602      	mov	r2, r0
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d105      	bne.n	80076de <f_opendir+0xc6>
 80076d2:	2312      	movs	r3, #18
 80076d4:	75fb      	strb	r3, [r7, #23]
 80076d6:	e002      	b.n	80076de <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	2200      	movs	r2, #0
 80076dc:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80076de:	7dfb      	ldrb	r3, [r7, #23]
 80076e0:	2b04      	cmp	r3, #4
 80076e2:	d101      	bne.n	80076e8 <f_opendir+0xd0>
 80076e4:	2305      	movs	r3, #5
 80076e6:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d002      	beq.n	80076f4 <f_opendir+0xdc>
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	2200      	movs	r2, #0
 80076f2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	7dfa      	ldrb	r2, [r7, #23]
 80076f8:	4611      	mov	r1, r2
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe fc3f 	bl	8005f7e <unlock_fs>
 8007700:	7dfb      	ldrb	r3, [r7, #23]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f107 0208 	add.w	r2, r7, #8
 800771a:	4611      	mov	r1, r2
 800771c:	4618      	mov	r0, r3
 800771e:	f7ff fecf 	bl	80074c0 <validate>
 8007722:	4603      	mov	r3, r0
 8007724:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007726:	7bfb      	ldrb	r3, [r7, #15]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d126      	bne.n	800777a <f_readdir+0x70>
		if (!fno) {
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d106      	bne.n	8007740 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8007732:	2100      	movs	r1, #0
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7ff f807 	bl	8006748 <dir_sdi>
 800773a:	4603      	mov	r3, r0
 800773c:	73fb      	strb	r3, [r7, #15]
 800773e:	e01c      	b.n	800777a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8007740:	2100      	movs	r1, #0
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7ff f97e 	bl	8006a44 <dir_read>
 8007748:	4603      	mov	r3, r0
 800774a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	2b04      	cmp	r3, #4
 8007750:	d101      	bne.n	8007756 <f_readdir+0x4c>
 8007752:	2300      	movs	r3, #0
 8007754:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8007756:	7bfb      	ldrb	r3, [r7, #15]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10e      	bne.n	800777a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7ff fa22 	bl	8006ba8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007764:	2100      	movs	r1, #0
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff f877 	bl	800685a <dir_next>
 800776c:	4603      	mov	r3, r0
 800776e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	2b04      	cmp	r3, #4
 8007774:	d101      	bne.n	800777a <f_readdir+0x70>
 8007776:	2300      	movs	r3, #0
 8007778:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	7bfa      	ldrb	r2, [r7, #15]
 800777e:	4611      	mov	r1, r2
 8007780:	4618      	mov	r0, r3
 8007782:	f7fe fbfc 	bl	8005f7e <unlock_fs>
 8007786:	7bfb      	ldrb	r3, [r7, #15]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007790:	b480      	push	{r7}
 8007792:	b087      	sub	sp, #28
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	4613      	mov	r3, r2
 800779c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800779e:	2301      	movs	r3, #1
 80077a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80077a6:	4b1f      	ldr	r3, [pc, #124]	; (8007824 <FATFS_LinkDriverEx+0x94>)
 80077a8:	7a5b      	ldrb	r3, [r3, #9]
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d131      	bne.n	8007814 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80077b0:	4b1c      	ldr	r3, [pc, #112]	; (8007824 <FATFS_LinkDriverEx+0x94>)
 80077b2:	7a5b      	ldrb	r3, [r3, #9]
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	461a      	mov	r2, r3
 80077b8:	4b1a      	ldr	r3, [pc, #104]	; (8007824 <FATFS_LinkDriverEx+0x94>)
 80077ba:	2100      	movs	r1, #0
 80077bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80077be:	4b19      	ldr	r3, [pc, #100]	; (8007824 <FATFS_LinkDriverEx+0x94>)
 80077c0:	7a5b      	ldrb	r3, [r3, #9]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	4a17      	ldr	r2, [pc, #92]	; (8007824 <FATFS_LinkDriverEx+0x94>)
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80077ce:	4b15      	ldr	r3, [pc, #84]	; (8007824 <FATFS_LinkDriverEx+0x94>)
 80077d0:	7a5b      	ldrb	r3, [r3, #9]
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	461a      	mov	r2, r3
 80077d6:	4b13      	ldr	r3, [pc, #76]	; (8007824 <FATFS_LinkDriverEx+0x94>)
 80077d8:	4413      	add	r3, r2
 80077da:	79fa      	ldrb	r2, [r7, #7]
 80077dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80077de:	4b11      	ldr	r3, [pc, #68]	; (8007824 <FATFS_LinkDriverEx+0x94>)
 80077e0:	7a5b      	ldrb	r3, [r3, #9]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	1c5a      	adds	r2, r3, #1
 80077e6:	b2d1      	uxtb	r1, r2
 80077e8:	4a0e      	ldr	r2, [pc, #56]	; (8007824 <FATFS_LinkDriverEx+0x94>)
 80077ea:	7251      	strb	r1, [r2, #9]
 80077ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80077ee:	7dbb      	ldrb	r3, [r7, #22]
 80077f0:	3330      	adds	r3, #48	; 0x30
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	3301      	adds	r3, #1
 80077fc:	223a      	movs	r2, #58	; 0x3a
 80077fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	3302      	adds	r3, #2
 8007804:	222f      	movs	r2, #47	; 0x2f
 8007806:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	3303      	adds	r3, #3
 800780c:	2200      	movs	r2, #0
 800780e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007814:	7dfb      	ldrb	r3, [r7, #23]
}
 8007816:	4618      	mov	r0, r3
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	20000330 	.word	0x20000330

08007828 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007832:	2200      	movs	r2, #0
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f7ff ffaa 	bl	8007790 <FATFS_LinkDriverEx>
 800783c:	4603      	mov	r3, r0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b084      	sub	sp, #16
 800784a:	af00      	add	r7, sp, #0
 800784c:	4603      	mov	r3, r0
 800784e:	6039      	str	r1, [r7, #0]
 8007850:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8007852:	2200      	movs	r2, #0
 8007854:	2101      	movs	r1, #1
 8007856:	2001      	movs	r0, #1
 8007858:	f000 f9cc 	bl	8007bf4 <osSemaphoreNew>
 800785c:	4602      	mov	r2, r0
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	bf14      	ite	ne
 800786a:	2301      	movne	r3, #1
 800786c:	2300      	moveq	r3, #0
 800786e:	b2db      	uxtb	r3, r3
 8007870:	60fb      	str	r3, [r7, #12]

    return ret;
 8007872:	68fb      	ldr	r3, [r7, #12]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fb0f 	bl	8007ea8 <osSemaphoreDelete>
#endif
    return 1;
 800788a:	2301      	movs	r3, #1
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800789c:	2300      	movs	r3, #0
 800789e:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80078a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fa41 	bl	8007d2c <osSemaphoreAcquire>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80078b0:	2301      	movs	r3, #1
 80078b2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80078b4:	68fb      	ldr	r3, [r7, #12]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fa96 	bl	8007df8 <osSemaphoreRelease>
#endif
}
 80078cc:	bf00      	nop
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80078d4:	b480      	push	{r7}
 80078d6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80078d8:	bf00      	nop
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
	...

080078e4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078ea:	f3ef 8305 	mrs	r3, IPSR
 80078ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80078f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10f      	bne.n	8007916 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078f6:	f3ef 8310 	mrs	r3, PRIMASK
 80078fa:	607b      	str	r3, [r7, #4]
  return(result);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d105      	bne.n	800790e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007902:	f3ef 8311 	mrs	r3, BASEPRI
 8007906:	603b      	str	r3, [r7, #0]
  return(result);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d007      	beq.n	800791e <osKernelInitialize+0x3a>
 800790e:	4b0e      	ldr	r3, [pc, #56]	; (8007948 <osKernelInitialize+0x64>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2b02      	cmp	r3, #2
 8007914:	d103      	bne.n	800791e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007916:	f06f 0305 	mvn.w	r3, #5
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	e00c      	b.n	8007938 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800791e:	4b0a      	ldr	r3, [pc, #40]	; (8007948 <osKernelInitialize+0x64>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d105      	bne.n	8007932 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007926:	4b08      	ldr	r3, [pc, #32]	; (8007948 <osKernelInitialize+0x64>)
 8007928:	2201      	movs	r2, #1
 800792a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800792c:	2300      	movs	r3, #0
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	e002      	b.n	8007938 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007932:	f04f 33ff 	mov.w	r3, #4294967295
 8007936:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007938:	68fb      	ldr	r3, [r7, #12]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	2000033c 	.word	0x2000033c

0800794c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8007952:	f002 fbd9 	bl	800a108 <xTaskGetSchedulerState>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d004      	beq.n	8007966 <osKernelGetState+0x1a>
 800795c:	2b02      	cmp	r3, #2
 800795e:	d105      	bne.n	800796c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8007960:	2302      	movs	r3, #2
 8007962:	607b      	str	r3, [r7, #4]
      break;
 8007964:	e00c      	b.n	8007980 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8007966:	2303      	movs	r3, #3
 8007968:	607b      	str	r3, [r7, #4]
      break;
 800796a:	e009      	b.n	8007980 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800796c:	4b07      	ldr	r3, [pc, #28]	; (800798c <osKernelGetState+0x40>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d102      	bne.n	800797a <osKernelGetState+0x2e>
        state = osKernelReady;
 8007974:	2301      	movs	r3, #1
 8007976:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8007978:	e001      	b.n	800797e <osKernelGetState+0x32>
        state = osKernelInactive;
 800797a:	2300      	movs	r3, #0
 800797c:	607b      	str	r3, [r7, #4]
      break;
 800797e:	bf00      	nop
  }

  return (state);
 8007980:	687b      	ldr	r3, [r7, #4]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	2000033c 	.word	0x2000033c

08007990 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007996:	f3ef 8305 	mrs	r3, IPSR
 800799a:	60bb      	str	r3, [r7, #8]
  return(result);
 800799c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10f      	bne.n	80079c2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079a2:	f3ef 8310 	mrs	r3, PRIMASK
 80079a6:	607b      	str	r3, [r7, #4]
  return(result);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d105      	bne.n	80079ba <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079ae:	f3ef 8311 	mrs	r3, BASEPRI
 80079b2:	603b      	str	r3, [r7, #0]
  return(result);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d007      	beq.n	80079ca <osKernelStart+0x3a>
 80079ba:	4b0f      	ldr	r3, [pc, #60]	; (80079f8 <osKernelStart+0x68>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d103      	bne.n	80079ca <osKernelStart+0x3a>
    stat = osErrorISR;
 80079c2:	f06f 0305 	mvn.w	r3, #5
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	e010      	b.n	80079ec <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80079ca:	4b0b      	ldr	r3, [pc, #44]	; (80079f8 <osKernelStart+0x68>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d109      	bne.n	80079e6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80079d2:	f7ff ff7f 	bl	80078d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80079d6:	4b08      	ldr	r3, [pc, #32]	; (80079f8 <osKernelStart+0x68>)
 80079d8:	2202      	movs	r2, #2
 80079da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80079dc:	f001 ff24 	bl	8009828 <vTaskStartScheduler>
      stat = osOK;
 80079e0:	2300      	movs	r3, #0
 80079e2:	60fb      	str	r3, [r7, #12]
 80079e4:	e002      	b.n	80079ec <osKernelStart+0x5c>
    } else {
      stat = osError;
 80079e6:	f04f 33ff 	mov.w	r3, #4294967295
 80079ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80079ec:	68fb      	ldr	r3, [r7, #12]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	2000033c 	.word	0x2000033c

080079fc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a02:	f3ef 8305 	mrs	r3, IPSR
 8007a06:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a08:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10f      	bne.n	8007a2e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a12:	607b      	str	r3, [r7, #4]
  return(result);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d105      	bne.n	8007a26 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8007a1e:	603b      	str	r3, [r7, #0]
  return(result);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d007      	beq.n	8007a36 <osKernelGetTickCount+0x3a>
 8007a26:	4b08      	ldr	r3, [pc, #32]	; (8007a48 <osKernelGetTickCount+0x4c>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d103      	bne.n	8007a36 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8007a2e:	f002 f823 	bl	8009a78 <xTaskGetTickCountFromISR>
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	e002      	b.n	8007a3c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8007a36:	f002 f80f 	bl	8009a58 <xTaskGetTickCount>
 8007a3a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	2000033c 	.word	0x2000033c

08007a4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b090      	sub	sp, #64	; 0x40
 8007a50:	af04      	add	r7, sp, #16
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a5c:	f3ef 8305 	mrs	r3, IPSR
 8007a60:	61fb      	str	r3, [r7, #28]
  return(result);
 8007a62:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f040 808f 	bne.w	8007b88 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8007a6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d105      	bne.n	8007a82 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a76:	f3ef 8311 	mrs	r3, BASEPRI
 8007a7a:	617b      	str	r3, [r7, #20]
  return(result);
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <osThreadNew+0x3e>
 8007a82:	4b44      	ldr	r3, [pc, #272]	; (8007b94 <osThreadNew+0x148>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d07e      	beq.n	8007b88 <osThreadNew+0x13c>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d07b      	beq.n	8007b88 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007a90:	2380      	movs	r3, #128	; 0x80
 8007a92:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007a94:	2318      	movs	r3, #24
 8007a96:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007aa0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d045      	beq.n	8007b34 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <osThreadNew+0x6a>
        name = attr->name;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d008      	beq.n	8007adc <osThreadNew+0x90>
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	2b38      	cmp	r3, #56	; 0x38
 8007ace:	d805      	bhi.n	8007adc <osThreadNew+0x90>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <osThreadNew+0x94>
        return (NULL);
 8007adc:	2300      	movs	r3, #0
 8007ade:	e054      	b.n	8007b8a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	695b      	ldr	r3, [r3, #20]
 8007aec:	089b      	lsrs	r3, r3, #2
 8007aee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00e      	beq.n	8007b16 <osThreadNew+0xca>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	2b5b      	cmp	r3, #91	; 0x5b
 8007afe:	d90a      	bls.n	8007b16 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d006      	beq.n	8007b16 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <osThreadNew+0xca>
        mem = 1;
 8007b10:	2301      	movs	r3, #1
 8007b12:	623b      	str	r3, [r7, #32]
 8007b14:	e010      	b.n	8007b38 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10c      	bne.n	8007b38 <osThreadNew+0xec>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d108      	bne.n	8007b38 <osThreadNew+0xec>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d104      	bne.n	8007b38 <osThreadNew+0xec>
          mem = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	623b      	str	r3, [r7, #32]
 8007b32:	e001      	b.n	8007b38 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d110      	bne.n	8007b60 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b46:	9202      	str	r2, [sp, #8]
 8007b48:	9301      	str	r3, [sp, #4]
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f001 fc87 	bl	8009468 <xTaskCreateStatic>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	613b      	str	r3, [r7, #16]
 8007b5e:	e013      	b.n	8007b88 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007b60:	6a3b      	ldr	r3, [r7, #32]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d110      	bne.n	8007b88 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	f107 0310 	add.w	r3, r7, #16
 8007b6e:	9301      	str	r3, [sp, #4]
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f001 fcd8 	bl	800952e <xTaskCreate>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d001      	beq.n	8007b88 <osThreadNew+0x13c>
          hTask = NULL;
 8007b84:	2300      	movs	r3, #0
 8007b86:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007b88:	693b      	ldr	r3, [r7, #16]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3730      	adds	r7, #48	; 0x30
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	2000033c 	.word	0x2000033c

08007b98 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ba0:	f3ef 8305 	mrs	r3, IPSR
 8007ba4:	613b      	str	r3, [r7, #16]
  return(result);
 8007ba6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10f      	bne.n	8007bcc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bac:	f3ef 8310 	mrs	r3, PRIMASK
 8007bb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d105      	bne.n	8007bc4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bb8:	f3ef 8311 	mrs	r3, BASEPRI
 8007bbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d007      	beq.n	8007bd4 <osDelay+0x3c>
 8007bc4:	4b0a      	ldr	r3, [pc, #40]	; (8007bf0 <osDelay+0x58>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d103      	bne.n	8007bd4 <osDelay+0x3c>
    stat = osErrorISR;
 8007bcc:	f06f 0305 	mvn.w	r3, #5
 8007bd0:	617b      	str	r3, [r7, #20]
 8007bd2:	e007      	b.n	8007be4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d002      	beq.n	8007be4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f001 fdec 	bl	80097bc <vTaskDelay>
    }
  }

  return (stat);
 8007be4:	697b      	ldr	r3, [r7, #20]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3718      	adds	r7, #24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	2000033c 	.word	0x2000033c

08007bf4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b08c      	sub	sp, #48	; 0x30
 8007bf8:	af02      	add	r7, sp, #8
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007c00:	2300      	movs	r3, #0
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c04:	f3ef 8305 	mrs	r3, IPSR
 8007c08:	61bb      	str	r3, [r7, #24]
  return(result);
 8007c0a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f040 8086 	bne.w	8007d1e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c12:	f3ef 8310 	mrs	r3, PRIMASK
 8007c16:	617b      	str	r3, [r7, #20]
  return(result);
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d105      	bne.n	8007c2a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c1e:	f3ef 8311 	mrs	r3, BASEPRI
 8007c22:	613b      	str	r3, [r7, #16]
  return(result);
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <osSemaphoreNew+0x3e>
 8007c2a:	4b3f      	ldr	r3, [pc, #252]	; (8007d28 <osSemaphoreNew+0x134>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d075      	beq.n	8007d1e <osSemaphoreNew+0x12a>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d072      	beq.n	8007d1e <osSemaphoreNew+0x12a>
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d86e      	bhi.n	8007d1e <osSemaphoreNew+0x12a>
    mem = -1;
 8007c40:	f04f 33ff 	mov.w	r3, #4294967295
 8007c44:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d015      	beq.n	8007c78 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d006      	beq.n	8007c62 <osSemaphoreNew+0x6e>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	2b4f      	cmp	r3, #79	; 0x4f
 8007c5a:	d902      	bls.n	8007c62 <osSemaphoreNew+0x6e>
        mem = 1;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	623b      	str	r3, [r7, #32]
 8007c60:	e00c      	b.n	8007c7c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d108      	bne.n	8007c7c <osSemaphoreNew+0x88>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d104      	bne.n	8007c7c <osSemaphoreNew+0x88>
          mem = 0;
 8007c72:	2300      	movs	r3, #0
 8007c74:	623b      	str	r3, [r7, #32]
 8007c76:	e001      	b.n	8007c7c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007c7c:	6a3b      	ldr	r3, [r7, #32]
 8007c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c82:	d04c      	beq.n	8007d1e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d128      	bne.n	8007cdc <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d10a      	bne.n	8007ca6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	2203      	movs	r2, #3
 8007c96:	9200      	str	r2, [sp, #0]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	2001      	movs	r0, #1
 8007c9e:	f000 fbf7 	bl	8008490 <xQueueGenericCreateStatic>
 8007ca2:	6278      	str	r0, [r7, #36]	; 0x24
 8007ca4:	e005      	b.n	8007cb2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007ca6:	2203      	movs	r2, #3
 8007ca8:	2100      	movs	r1, #0
 8007caa:	2001      	movs	r0, #1
 8007cac:	f000 fc72 	bl	8008594 <xQueueGenericCreate>
 8007cb0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d022      	beq.n	8007cfe <osSemaphoreNew+0x10a>
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d01f      	beq.n	8007cfe <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cc6:	f000 fd3d 	bl	8008744 <xQueueGenericSend>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d016      	beq.n	8007cfe <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8007cd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cd2:	f001 f9f3 	bl	80090bc <vQueueDelete>
            hSemaphore = NULL;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8007cda:	e010      	b.n	8007cfe <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d108      	bne.n	8007cf4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	68b9      	ldr	r1, [r7, #8]
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 fcb7 	bl	800865e <xQueueCreateCountingSemaphoreStatic>
 8007cf0:	6278      	str	r0, [r7, #36]	; 0x24
 8007cf2:	e004      	b.n	8007cfe <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007cf4:	68b9      	ldr	r1, [r7, #8]
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f000 fcec 	bl	80086d4 <xQueueCreateCountingSemaphore>
 8007cfc:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00c      	beq.n	8007d1e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <osSemaphoreNew+0x11e>
          name = attr->name;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	61fb      	str	r3, [r7, #28]
 8007d10:	e001      	b.n	8007d16 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8007d12:	2300      	movs	r3, #0
 8007d14:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007d16:	69f9      	ldr	r1, [r7, #28]
 8007d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d1a:	f001 fb1d 	bl	8009358 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3728      	adds	r7, #40	; 0x28
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	2000033c 	.word	0x2000033c

08007d2c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b088      	sub	sp, #32
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d103      	bne.n	8007d4c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007d44:	f06f 0303 	mvn.w	r3, #3
 8007d48:	61fb      	str	r3, [r7, #28]
 8007d4a:	e04b      	b.n	8007de4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d4c:	f3ef 8305 	mrs	r3, IPSR
 8007d50:	617b      	str	r3, [r7, #20]
  return(result);
 8007d52:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10f      	bne.n	8007d78 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d58:	f3ef 8310 	mrs	r3, PRIMASK
 8007d5c:	613b      	str	r3, [r7, #16]
  return(result);
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d105      	bne.n	8007d70 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d64:	f3ef 8311 	mrs	r3, BASEPRI
 8007d68:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d026      	beq.n	8007dbe <osSemaphoreAcquire+0x92>
 8007d70:	4b1f      	ldr	r3, [pc, #124]	; (8007df0 <osSemaphoreAcquire+0xc4>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d122      	bne.n	8007dbe <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007d7e:	f06f 0303 	mvn.w	r3, #3
 8007d82:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007d84:	e02d      	b.n	8007de2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007d8a:	f107 0308 	add.w	r3, r7, #8
 8007d8e:	461a      	mov	r2, r3
 8007d90:	2100      	movs	r1, #0
 8007d92:	69b8      	ldr	r0, [r7, #24]
 8007d94:	f001 f90c 	bl	8008fb0 <xQueueReceiveFromISR>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d003      	beq.n	8007da6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8007d9e:	f06f 0302 	mvn.w	r3, #2
 8007da2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007da4:	e01d      	b.n	8007de2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d01a      	beq.n	8007de2 <osSemaphoreAcquire+0xb6>
 8007dac:	4b11      	ldr	r3, [pc, #68]	; (8007df4 <osSemaphoreAcquire+0xc8>)
 8007dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007dbc:	e011      	b.n	8007de2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007dbe:	6839      	ldr	r1, [r7, #0]
 8007dc0:	69b8      	ldr	r0, [r7, #24]
 8007dc2:	f000 ffe1 	bl	8008d88 <xQueueSemaphoreTake>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d00b      	beq.n	8007de4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8007dd2:	f06f 0301 	mvn.w	r3, #1
 8007dd6:	61fb      	str	r3, [r7, #28]
 8007dd8:	e004      	b.n	8007de4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007dda:	f06f 0302 	mvn.w	r3, #2
 8007dde:	61fb      	str	r3, [r7, #28]
 8007de0:	e000      	b.n	8007de4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8007de2:	bf00      	nop
      }
    }
  }

  return (stat);
 8007de4:	69fb      	ldr	r3, [r7, #28]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3720      	adds	r7, #32
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	2000033c 	.word	0x2000033c
 8007df4:	e000ed04 	.word	0xe000ed04

08007df8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d103      	bne.n	8007e16 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007e0e:	f06f 0303 	mvn.w	r3, #3
 8007e12:	61fb      	str	r3, [r7, #28]
 8007e14:	e03e      	b.n	8007e94 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e16:	f3ef 8305 	mrs	r3, IPSR
 8007e1a:	617b      	str	r3, [r7, #20]
  return(result);
 8007e1c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10f      	bne.n	8007e42 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e22:	f3ef 8310 	mrs	r3, PRIMASK
 8007e26:	613b      	str	r3, [r7, #16]
  return(result);
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d105      	bne.n	8007e3a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e2e:	f3ef 8311 	mrs	r3, BASEPRI
 8007e32:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d01e      	beq.n	8007e78 <osSemaphoreRelease+0x80>
 8007e3a:	4b19      	ldr	r3, [pc, #100]	; (8007ea0 <osSemaphoreRelease+0xa8>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d11a      	bne.n	8007e78 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8007e42:	2300      	movs	r3, #0
 8007e44:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007e46:	f107 0308 	add.w	r3, r7, #8
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	69b8      	ldr	r0, [r7, #24]
 8007e4e:	f000 fe1f 	bl	8008a90 <xQueueGiveFromISR>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d003      	beq.n	8007e60 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007e58:	f06f 0302 	mvn.w	r3, #2
 8007e5c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007e5e:	e018      	b.n	8007e92 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d015      	beq.n	8007e92 <osSemaphoreRelease+0x9a>
 8007e66:	4b0f      	ldr	r3, [pc, #60]	; (8007ea4 <osSemaphoreRelease+0xac>)
 8007e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007e76:	e00c      	b.n	8007e92 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007e78:	2300      	movs	r3, #0
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	69b8      	ldr	r0, [r7, #24]
 8007e80:	f000 fc60 	bl	8008744 <xQueueGenericSend>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d004      	beq.n	8007e94 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007e8a:	f06f 0302 	mvn.w	r3, #2
 8007e8e:	61fb      	str	r3, [r7, #28]
 8007e90:	e000      	b.n	8007e94 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007e92:	bf00      	nop
    }
  }

  return (stat);
 8007e94:	69fb      	ldr	r3, [r7, #28]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3720      	adds	r7, #32
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	2000033c 	.word	0x2000033c
 8007ea4:	e000ed04 	.word	0xe000ed04

08007ea8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b088      	sub	sp, #32
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eb4:	f3ef 8305 	mrs	r3, IPSR
 8007eb8:	617b      	str	r3, [r7, #20]
  return(result);
 8007eba:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10f      	bne.n	8007ee0 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ec4:	613b      	str	r3, [r7, #16]
  return(result);
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d105      	bne.n	8007ed8 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ecc:	f3ef 8311 	mrs	r3, BASEPRI
 8007ed0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d007      	beq.n	8007ee8 <osSemaphoreDelete+0x40>
 8007ed8:	4b0d      	ldr	r3, [pc, #52]	; (8007f10 <osSemaphoreDelete+0x68>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d103      	bne.n	8007ee8 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8007ee0:	f06f 0305 	mvn.w	r3, #5
 8007ee4:	61fb      	str	r3, [r7, #28]
 8007ee6:	e00e      	b.n	8007f06 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d103      	bne.n	8007ef6 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8007eee:	f06f 0303 	mvn.w	r3, #3
 8007ef2:	61fb      	str	r3, [r7, #28]
 8007ef4:	e007      	b.n	8007f06 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8007ef6:	69b8      	ldr	r0, [r7, #24]
 8007ef8:	f001 fa58 	bl	80093ac <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8007f00:	69b8      	ldr	r0, [r7, #24]
 8007f02:	f001 f8db 	bl	80090bc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8007f06:	69fb      	ldr	r3, [r7, #28]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3720      	adds	r7, #32
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	2000033c 	.word	0x2000033c

08007f14 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08c      	sub	sp, #48	; 0x30
 8007f18:	af02      	add	r7, sp, #8
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007f20:	2300      	movs	r3, #0
 8007f22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f24:	f3ef 8305 	mrs	r3, IPSR
 8007f28:	61bb      	str	r3, [r7, #24]
  return(result);
 8007f2a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d16f      	bne.n	8008010 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f30:	f3ef 8310 	mrs	r3, PRIMASK
 8007f34:	617b      	str	r3, [r7, #20]
  return(result);
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d105      	bne.n	8007f48 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f3c:	f3ef 8311 	mrs	r3, BASEPRI
 8007f40:	613b      	str	r3, [r7, #16]
  return(result);
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <osMessageQueueNew+0x3c>
 8007f48:	4b34      	ldr	r3, [pc, #208]	; (800801c <osMessageQueueNew+0x108>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d05f      	beq.n	8008010 <osMessageQueueNew+0xfc>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d05c      	beq.n	8008010 <osMessageQueueNew+0xfc>
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d059      	beq.n	8008010 <osMessageQueueNew+0xfc>
    mem = -1;
 8007f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f60:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d029      	beq.n	8007fbc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d012      	beq.n	8007f96 <osMessageQueueNew+0x82>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	2b4f      	cmp	r3, #79	; 0x4f
 8007f76:	d90e      	bls.n	8007f96 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00a      	beq.n	8007f96 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	695a      	ldr	r2, [r3, #20]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	68b9      	ldr	r1, [r7, #8]
 8007f88:	fb01 f303 	mul.w	r3, r1, r3
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d302      	bcc.n	8007f96 <osMessageQueueNew+0x82>
        mem = 1;
 8007f90:	2301      	movs	r3, #1
 8007f92:	623b      	str	r3, [r7, #32]
 8007f94:	e014      	b.n	8007fc0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d110      	bne.n	8007fc0 <osMessageQueueNew+0xac>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10c      	bne.n	8007fc0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d108      	bne.n	8007fc0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d104      	bne.n	8007fc0 <osMessageQueueNew+0xac>
          mem = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	623b      	str	r3, [r7, #32]
 8007fba:	e001      	b.n	8007fc0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d10b      	bne.n	8007fde <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	691a      	ldr	r2, [r3, #16]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	2100      	movs	r1, #0
 8007fd0:	9100      	str	r1, [sp, #0]
 8007fd2:	68b9      	ldr	r1, [r7, #8]
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f000 fa5b 	bl	8008490 <xQueueGenericCreateStatic>
 8007fda:	6278      	str	r0, [r7, #36]	; 0x24
 8007fdc:	e008      	b.n	8007ff0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d105      	bne.n	8007ff0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	68b9      	ldr	r1, [r7, #8]
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 fad3 	bl	8008594 <xQueueGenericCreate>
 8007fee:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00c      	beq.n	8008010 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d003      	beq.n	8008004 <osMessageQueueNew+0xf0>
        name = attr->name;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	61fb      	str	r3, [r7, #28]
 8008002:	e001      	b.n	8008008 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8008004:	2300      	movs	r3, #0
 8008006:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008008:	69f9      	ldr	r1, [r7, #28]
 800800a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800800c:	f001 f9a4 	bl	8009358 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008012:	4618      	mov	r0, r3
 8008014:	3728      	adds	r7, #40	; 0x28
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	2000033c 	.word	0x2000033c

08008020 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008020:	b580      	push	{r7, lr}
 8008022:	b08a      	sub	sp, #40	; 0x28
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	603b      	str	r3, [r7, #0]
 800802c:	4613      	mov	r3, r2
 800802e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008034:	2300      	movs	r3, #0
 8008036:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008038:	f3ef 8305 	mrs	r3, IPSR
 800803c:	61fb      	str	r3, [r7, #28]
  return(result);
 800803e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10f      	bne.n	8008064 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008044:	f3ef 8310 	mrs	r3, PRIMASK
 8008048:	61bb      	str	r3, [r7, #24]
  return(result);
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d105      	bne.n	800805c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008050:	f3ef 8311 	mrs	r3, BASEPRI
 8008054:	617b      	str	r3, [r7, #20]
  return(result);
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d02c      	beq.n	80080b6 <osMessageQueuePut+0x96>
 800805c:	4b28      	ldr	r3, [pc, #160]	; (8008100 <osMessageQueuePut+0xe0>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b02      	cmp	r3, #2
 8008062:	d128      	bne.n	80080b6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d005      	beq.n	8008076 <osMessageQueuePut+0x56>
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <osMessageQueuePut+0x56>
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8008076:	f06f 0303 	mvn.w	r3, #3
 800807a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800807c:	e039      	b.n	80080f2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800807e:	2300      	movs	r3, #0
 8008080:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008082:	f107 0210 	add.w	r2, r7, #16
 8008086:	2300      	movs	r3, #0
 8008088:	68b9      	ldr	r1, [r7, #8]
 800808a:	6a38      	ldr	r0, [r7, #32]
 800808c:	f000 fc60 	bl	8008950 <xQueueGenericSendFromISR>
 8008090:	4603      	mov	r3, r0
 8008092:	2b01      	cmp	r3, #1
 8008094:	d003      	beq.n	800809e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8008096:	f06f 0302 	mvn.w	r3, #2
 800809a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800809c:	e029      	b.n	80080f2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d026      	beq.n	80080f2 <osMessageQueuePut+0xd2>
 80080a4:	4b17      	ldr	r3, [pc, #92]	; (8008104 <osMessageQueuePut+0xe4>)
 80080a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80080b4:	e01d      	b.n	80080f2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <osMessageQueuePut+0xa2>
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d103      	bne.n	80080ca <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80080c2:	f06f 0303 	mvn.w	r3, #3
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
 80080c8:	e014      	b.n	80080f4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80080ca:	2300      	movs	r3, #0
 80080cc:	683a      	ldr	r2, [r7, #0]
 80080ce:	68b9      	ldr	r1, [r7, #8]
 80080d0:	6a38      	ldr	r0, [r7, #32]
 80080d2:	f000 fb37 	bl	8008744 <xQueueGenericSend>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d00b      	beq.n	80080f4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d003      	beq.n	80080ea <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80080e2:	f06f 0301 	mvn.w	r3, #1
 80080e6:	627b      	str	r3, [r7, #36]	; 0x24
 80080e8:	e004      	b.n	80080f4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80080ea:	f06f 0302 	mvn.w	r3, #2
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
 80080f0:	e000      	b.n	80080f4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80080f2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80080f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3728      	adds	r7, #40	; 0x28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	2000033c 	.word	0x2000033c
 8008104:	e000ed04 	.word	0xe000ed04

08008108 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008108:	b580      	push	{r7, lr}
 800810a:	b08a      	sub	sp, #40	; 0x28
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800811a:	2300      	movs	r3, #0
 800811c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800811e:	f3ef 8305 	mrs	r3, IPSR
 8008122:	61fb      	str	r3, [r7, #28]
  return(result);
 8008124:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10f      	bne.n	800814a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800812a:	f3ef 8310 	mrs	r3, PRIMASK
 800812e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d105      	bne.n	8008142 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008136:	f3ef 8311 	mrs	r3, BASEPRI
 800813a:	617b      	str	r3, [r7, #20]
  return(result);
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d02c      	beq.n	800819c <osMessageQueueGet+0x94>
 8008142:	4b28      	ldr	r3, [pc, #160]	; (80081e4 <osMessageQueueGet+0xdc>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b02      	cmp	r3, #2
 8008148:	d128      	bne.n	800819c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800814a:	6a3b      	ldr	r3, [r7, #32]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d005      	beq.n	800815c <osMessageQueueGet+0x54>
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d002      	beq.n	800815c <osMessageQueueGet+0x54>
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800815c:	f06f 0303 	mvn.w	r3, #3
 8008160:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008162:	e038      	b.n	80081d6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8008164:	2300      	movs	r3, #0
 8008166:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008168:	f107 0310 	add.w	r3, r7, #16
 800816c:	461a      	mov	r2, r3
 800816e:	68b9      	ldr	r1, [r7, #8]
 8008170:	6a38      	ldr	r0, [r7, #32]
 8008172:	f000 ff1d 	bl	8008fb0 <xQueueReceiveFromISR>
 8008176:	4603      	mov	r3, r0
 8008178:	2b01      	cmp	r3, #1
 800817a:	d003      	beq.n	8008184 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800817c:	f06f 0302 	mvn.w	r3, #2
 8008180:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008182:	e028      	b.n	80081d6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d025      	beq.n	80081d6 <osMessageQueueGet+0xce>
 800818a:	4b17      	ldr	r3, [pc, #92]	; (80081e8 <osMessageQueueGet+0xe0>)
 800818c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800819a:	e01c      	b.n	80081d6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d002      	beq.n	80081a8 <osMessageQueueGet+0xa0>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d103      	bne.n	80081b0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80081a8:	f06f 0303 	mvn.w	r3, #3
 80081ac:	627b      	str	r3, [r7, #36]	; 0x24
 80081ae:	e013      	b.n	80081d8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	68b9      	ldr	r1, [r7, #8]
 80081b4:	6a38      	ldr	r0, [r7, #32]
 80081b6:	f000 fd01 	bl	8008bbc <xQueueReceive>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d00b      	beq.n	80081d8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d003      	beq.n	80081ce <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80081c6:	f06f 0301 	mvn.w	r3, #1
 80081ca:	627b      	str	r3, [r7, #36]	; 0x24
 80081cc:	e004      	b.n	80081d8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80081ce:	f06f 0302 	mvn.w	r3, #2
 80081d2:	627b      	str	r3, [r7, #36]	; 0x24
 80081d4:	e000      	b.n	80081d8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80081d6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3728      	adds	r7, #40	; 0x28
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	2000033c 	.word	0x2000033c
 80081e8:	e000ed04 	.word	0xe000ed04

080081ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4a07      	ldr	r2, [pc, #28]	; (8008218 <vApplicationGetIdleTaskMemory+0x2c>)
 80081fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	4a06      	ldr	r2, [pc, #24]	; (800821c <vApplicationGetIdleTaskMemory+0x30>)
 8008202:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2280      	movs	r2, #128	; 0x80
 8008208:	601a      	str	r2, [r3, #0]
}
 800820a:	bf00      	nop
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	20000340 	.word	0x20000340
 800821c:	2000039c 	.word	0x2000039c

08008220 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	4a07      	ldr	r2, [pc, #28]	; (800824c <vApplicationGetTimerTaskMemory+0x2c>)
 8008230:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	4a06      	ldr	r2, [pc, #24]	; (8008250 <vApplicationGetTimerTaskMemory+0x30>)
 8008236:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800823e:	601a      	str	r2, [r3, #0]
}
 8008240:	bf00      	nop
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	2000059c 	.word	0x2000059c
 8008250:	200005f8 	.word	0x200005f8

08008254 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f103 0208 	add.w	r2, r3, #8
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f04f 32ff 	mov.w	r2, #4294967295
 800826c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f103 0208 	add.w	r2, r3, #8
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f103 0208 	add.w	r2, r3, #8
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80082a2:	bf00      	nop
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082ae:	b480      	push	{r7}
 80082b0:	b085      	sub	sp, #20
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	689a      	ldr	r2, [r3, #8]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	1c5a      	adds	r2, r3, #1
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	601a      	str	r2, [r3, #0]
}
 80082ea:	bf00      	nop
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082f6:	b480      	push	{r7}
 80082f8:	b085      	sub	sp, #20
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830c:	d103      	bne.n	8008316 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	e00c      	b.n	8008330 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	3308      	adds	r3, #8
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	e002      	b.n	8008324 <vListInsert+0x2e>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	429a      	cmp	r2, r3
 800832e:	d2f6      	bcs.n	800831e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	683a      	ldr	r2, [r7, #0]
 800833e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	601a      	str	r2, [r3, #0]
}
 800835c:	bf00      	nop
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	6892      	ldr	r2, [r2, #8]
 800837e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	6852      	ldr	r2, [r2, #4]
 8008388:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	429a      	cmp	r2, r3
 8008392:	d103      	bne.n	800839c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	689a      	ldr	r2, [r3, #8]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	1e5a      	subs	r2, r3, #1
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3714      	adds	r7, #20
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10c      	bne.n	80083ea <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	b672      	cpsid	i
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	b662      	cpsie	i
 80083e4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80083e6:	bf00      	nop
 80083e8:	e7fe      	b.n	80083e8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80083ea:	f002 fcdf 	bl	800adac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f6:	68f9      	ldr	r1, [r7, #12]
 80083f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083fa:	fb01 f303 	mul.w	r3, r1, r3
 80083fe:	441a      	add	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841a:	3b01      	subs	r3, #1
 800841c:	68f9      	ldr	r1, [r7, #12]
 800841e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008420:	fb01 f303 	mul.w	r3, r1, r3
 8008424:	441a      	add	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	22ff      	movs	r2, #255	; 0xff
 800842e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	22ff      	movs	r2, #255	; 0xff
 8008436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d114      	bne.n	800846a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d01a      	beq.n	800847e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3310      	adds	r3, #16
 800844c:	4618      	mov	r0, r3
 800844e:	f001 fc95 	bl	8009d7c <xTaskRemoveFromEventList>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d012      	beq.n	800847e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008458:	4b0c      	ldr	r3, [pc, #48]	; (800848c <xQueueGenericReset+0xd0>)
 800845a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	e009      	b.n	800847e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	3310      	adds	r3, #16
 800846e:	4618      	mov	r0, r3
 8008470:	f7ff fef0 	bl	8008254 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	3324      	adds	r3, #36	; 0x24
 8008478:	4618      	mov	r0, r3
 800847a:	f7ff feeb 	bl	8008254 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800847e:	f002 fcc9 	bl	800ae14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008482:	2301      	movs	r3, #1
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	e000ed04 	.word	0xe000ed04

08008490 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008490:	b580      	push	{r7, lr}
 8008492:	b08e      	sub	sp, #56	; 0x38
 8008494:	af02      	add	r7, sp, #8
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10c      	bne.n	80084be <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a8:	b672      	cpsid	i
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	b662      	cpsie	i
 80084b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084ba:	bf00      	nop
 80084bc:	e7fe      	b.n	80084bc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10c      	bne.n	80084de <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	b672      	cpsid	i
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	b662      	cpsie	i
 80084d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084da:	bf00      	nop
 80084dc:	e7fe      	b.n	80084dc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <xQueueGenericCreateStatic+0x5a>
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d001      	beq.n	80084ee <xQueueGenericCreateStatic+0x5e>
 80084ea:	2301      	movs	r3, #1
 80084ec:	e000      	b.n	80084f0 <xQueueGenericCreateStatic+0x60>
 80084ee:	2300      	movs	r3, #0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10c      	bne.n	800850e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	b672      	cpsid	i
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	b662      	cpsie	i
 8008508:	623b      	str	r3, [r7, #32]
}
 800850a:	bf00      	nop
 800850c:	e7fe      	b.n	800850c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d102      	bne.n	800851a <xQueueGenericCreateStatic+0x8a>
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <xQueueGenericCreateStatic+0x8e>
 800851a:	2301      	movs	r3, #1
 800851c:	e000      	b.n	8008520 <xQueueGenericCreateStatic+0x90>
 800851e:	2300      	movs	r3, #0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10c      	bne.n	800853e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008528:	b672      	cpsid	i
 800852a:	f383 8811 	msr	BASEPRI, r3
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	b662      	cpsie	i
 8008538:	61fb      	str	r3, [r7, #28]
}
 800853a:	bf00      	nop
 800853c:	e7fe      	b.n	800853c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800853e:	2350      	movs	r3, #80	; 0x50
 8008540:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2b50      	cmp	r3, #80	; 0x50
 8008546:	d00c      	beq.n	8008562 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854c:	b672      	cpsid	i
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	b662      	cpsie	i
 800855c:	61bb      	str	r3, [r7, #24]
}
 800855e:	bf00      	nop
 8008560:	e7fe      	b.n	8008560 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008562:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00d      	beq.n	800858a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008570:	2201      	movs	r2, #1
 8008572:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008576:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800857a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	4613      	mov	r3, r2
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	68b9      	ldr	r1, [r7, #8]
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 f847 	bl	8008618 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800858a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800858c:	4618      	mov	r0, r3
 800858e:	3730      	adds	r7, #48	; 0x30
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008594:	b580      	push	{r7, lr}
 8008596:	b08a      	sub	sp, #40	; 0x28
 8008598:	af02      	add	r7, sp, #8
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10c      	bne.n	80085c2 <xQueueGenericCreate+0x2e>
	__asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ac:	b672      	cpsid	i
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	b662      	cpsie	i
 80085bc:	613b      	str	r3, [r7, #16]
}
 80085be:	bf00      	nop
 80085c0:	e7fe      	b.n	80085c0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d102      	bne.n	80085ce <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80085c8:	2300      	movs	r3, #0
 80085ca:	61fb      	str	r3, [r7, #28]
 80085cc:	e004      	b.n	80085d8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	fb02 f303 	mul.w	r3, r2, r3
 80085d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	3350      	adds	r3, #80	; 0x50
 80085dc:	4618      	mov	r0, r3
 80085de:	f002 fd11 	bl	800b004 <pvPortMalloc>
 80085e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d011      	beq.n	800860e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	3350      	adds	r3, #80	; 0x50
 80085f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80085fc:	79fa      	ldrb	r2, [r7, #7]
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	4613      	mov	r3, r2
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	68b9      	ldr	r1, [r7, #8]
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 f805 	bl	8008618 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800860e:	69bb      	ldr	r3, [r7, #24]
	}
 8008610:	4618      	mov	r0, r3
 8008612:	3720      	adds	r7, #32
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d103      	bne.n	8008634 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	601a      	str	r2, [r3, #0]
 8008632:	e002      	b.n	800863a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008646:	2101      	movs	r1, #1
 8008648:	69b8      	ldr	r0, [r7, #24]
 800864a:	f7ff feb7 	bl	80083bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	78fa      	ldrb	r2, [r7, #3]
 8008652:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008656:	bf00      	nop
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800865e:	b580      	push	{r7, lr}
 8008660:	b08a      	sub	sp, #40	; 0x28
 8008662:	af02      	add	r7, sp, #8
 8008664:	60f8      	str	r0, [r7, #12]
 8008666:	60b9      	str	r1, [r7, #8]
 8008668:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10c      	bne.n	800868a <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	b672      	cpsid	i
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	b662      	cpsie	i
 8008684:	61bb      	str	r3, [r7, #24]
}
 8008686:	bf00      	nop
 8008688:	e7fe      	b.n	8008688 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	429a      	cmp	r2, r3
 8008690:	d90c      	bls.n	80086ac <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008696:	b672      	cpsid	i
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	b662      	cpsie	i
 80086a6:	617b      	str	r3, [r7, #20]
}
 80086a8:	bf00      	nop
 80086aa:	e7fe      	b.n	80086aa <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80086ac:	2302      	movs	r3, #2
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	2100      	movs	r1, #0
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f7ff feea 	bl	8008490 <xQueueGenericCreateStatic>
 80086bc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80086ca:	69fb      	ldr	r3, [r7, #28]
	}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3720      	adds	r7, #32
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10c      	bne.n	80086fe <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80086e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e8:	b672      	cpsid	i
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	b662      	cpsie	i
 80086f8:	613b      	str	r3, [r7, #16]
}
 80086fa:	bf00      	nop
 80086fc:	e7fe      	b.n	80086fc <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	429a      	cmp	r2, r3
 8008704:	d90c      	bls.n	8008720 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8008706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870a:	b672      	cpsid	i
 800870c:	f383 8811 	msr	BASEPRI, r3
 8008710:	f3bf 8f6f 	isb	sy
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	b662      	cpsie	i
 800871a:	60fb      	str	r3, [r7, #12]
}
 800871c:	bf00      	nop
 800871e:	e7fe      	b.n	800871e <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008720:	2202      	movs	r2, #2
 8008722:	2100      	movs	r1, #0
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff ff35 	bl	8008594 <xQueueGenericCreate>
 800872a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d002      	beq.n	8008738 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008738:	697b      	ldr	r3, [r7, #20]
	}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
	...

08008744 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b08e      	sub	sp, #56	; 0x38
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
 8008750:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008752:	2300      	movs	r3, #0
 8008754:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800875a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10c      	bne.n	800877a <xQueueGenericSend+0x36>
	__asm volatile
 8008760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008764:	b672      	cpsid	i
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	b662      	cpsie	i
 8008774:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008776:	bf00      	nop
 8008778:	e7fe      	b.n	8008778 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d103      	bne.n	8008788 <xQueueGenericSend+0x44>
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008784:	2b00      	cmp	r3, #0
 8008786:	d101      	bne.n	800878c <xQueueGenericSend+0x48>
 8008788:	2301      	movs	r3, #1
 800878a:	e000      	b.n	800878e <xQueueGenericSend+0x4a>
 800878c:	2300      	movs	r3, #0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10c      	bne.n	80087ac <xQueueGenericSend+0x68>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	b672      	cpsid	i
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	b662      	cpsie	i
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087a8:	bf00      	nop
 80087aa:	e7fe      	b.n	80087aa <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d103      	bne.n	80087ba <xQueueGenericSend+0x76>
 80087b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d101      	bne.n	80087be <xQueueGenericSend+0x7a>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e000      	b.n	80087c0 <xQueueGenericSend+0x7c>
 80087be:	2300      	movs	r3, #0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10c      	bne.n	80087de <xQueueGenericSend+0x9a>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	b672      	cpsid	i
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	b662      	cpsie	i
 80087d8:	623b      	str	r3, [r7, #32]
}
 80087da:	bf00      	nop
 80087dc:	e7fe      	b.n	80087dc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087de:	f001 fc93 	bl	800a108 <xTaskGetSchedulerState>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d102      	bne.n	80087ee <xQueueGenericSend+0xaa>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <xQueueGenericSend+0xae>
 80087ee:	2301      	movs	r3, #1
 80087f0:	e000      	b.n	80087f4 <xQueueGenericSend+0xb0>
 80087f2:	2300      	movs	r3, #0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10c      	bne.n	8008812 <xQueueGenericSend+0xce>
	__asm volatile
 80087f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fc:	b672      	cpsid	i
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	b662      	cpsie	i
 800880c:	61fb      	str	r3, [r7, #28]
}
 800880e:	bf00      	nop
 8008810:	e7fe      	b.n	8008810 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008812:	f002 facb 	bl	800adac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881e:	429a      	cmp	r2, r3
 8008820:	d302      	bcc.n	8008828 <xQueueGenericSend+0xe4>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	2b02      	cmp	r3, #2
 8008826:	d129      	bne.n	800887c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	68b9      	ldr	r1, [r7, #8]
 800882c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800882e:	f000 fc82 	bl	8009136 <prvCopyDataToQueue>
 8008832:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008838:	2b00      	cmp	r3, #0
 800883a:	d010      	beq.n	800885e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883e:	3324      	adds	r3, #36	; 0x24
 8008840:	4618      	mov	r0, r3
 8008842:	f001 fa9b 	bl	8009d7c <xTaskRemoveFromEventList>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d013      	beq.n	8008874 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800884c:	4b3f      	ldr	r3, [pc, #252]	; (800894c <xQueueGenericSend+0x208>)
 800884e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	e00a      	b.n	8008874 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800885e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008860:	2b00      	cmp	r3, #0
 8008862:	d007      	beq.n	8008874 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008864:	4b39      	ldr	r3, [pc, #228]	; (800894c <xQueueGenericSend+0x208>)
 8008866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008874:	f002 face 	bl	800ae14 <vPortExitCritical>
				return pdPASS;
 8008878:	2301      	movs	r3, #1
 800887a:	e063      	b.n	8008944 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d103      	bne.n	800888a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008882:	f002 fac7 	bl	800ae14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008886:	2300      	movs	r3, #0
 8008888:	e05c      	b.n	8008944 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800888a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888c:	2b00      	cmp	r3, #0
 800888e:	d106      	bne.n	800889e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008890:	f107 0314 	add.w	r3, r7, #20
 8008894:	4618      	mov	r0, r3
 8008896:	f001 fad7 	bl	8009e48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800889a:	2301      	movs	r3, #1
 800889c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800889e:	f002 fab9 	bl	800ae14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088a2:	f001 f82b 	bl	80098fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088a6:	f002 fa81 	bl	800adac <vPortEnterCritical>
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088b0:	b25b      	sxtb	r3, r3
 80088b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b6:	d103      	bne.n	80088c0 <xQueueGenericSend+0x17c>
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088c6:	b25b      	sxtb	r3, r3
 80088c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088cc:	d103      	bne.n	80088d6 <xQueueGenericSend+0x192>
 80088ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088d6:	f002 fa9d 	bl	800ae14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088da:	1d3a      	adds	r2, r7, #4
 80088dc:	f107 0314 	add.w	r3, r7, #20
 80088e0:	4611      	mov	r1, r2
 80088e2:	4618      	mov	r0, r3
 80088e4:	f001 fac6 	bl	8009e74 <xTaskCheckForTimeOut>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d124      	bne.n	8008938 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088f0:	f000 fd19 	bl	8009326 <prvIsQueueFull>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d018      	beq.n	800892c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	3310      	adds	r3, #16
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	4611      	mov	r1, r2
 8008902:	4618      	mov	r0, r3
 8008904:	f001 f9e6 	bl	8009cd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800890a:	f000 fca4 	bl	8009256 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800890e:	f001 f803 	bl	8009918 <xTaskResumeAll>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	f47f af7c 	bne.w	8008812 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800891a:	4b0c      	ldr	r3, [pc, #48]	; (800894c <xQueueGenericSend+0x208>)
 800891c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	e772      	b.n	8008812 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800892c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800892e:	f000 fc92 	bl	8009256 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008932:	f000 fff1 	bl	8009918 <xTaskResumeAll>
 8008936:	e76c      	b.n	8008812 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800893a:	f000 fc8c 	bl	8009256 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800893e:	f000 ffeb 	bl	8009918 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008942:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008944:	4618      	mov	r0, r3
 8008946:	3738      	adds	r7, #56	; 0x38
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	e000ed04 	.word	0xe000ed04

08008950 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b08e      	sub	sp, #56	; 0x38
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
 800895c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10c      	bne.n	8008982 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896c:	b672      	cpsid	i
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	b662      	cpsie	i
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800897e:	bf00      	nop
 8008980:	e7fe      	b.n	8008980 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d103      	bne.n	8008990 <xQueueGenericSendFromISR+0x40>
 8008988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898c:	2b00      	cmp	r3, #0
 800898e:	d101      	bne.n	8008994 <xQueueGenericSendFromISR+0x44>
 8008990:	2301      	movs	r3, #1
 8008992:	e000      	b.n	8008996 <xQueueGenericSendFromISR+0x46>
 8008994:	2300      	movs	r3, #0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10c      	bne.n	80089b4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899e:	b672      	cpsid	i
 80089a0:	f383 8811 	msr	BASEPRI, r3
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	b662      	cpsie	i
 80089ae:	623b      	str	r3, [r7, #32]
}
 80089b0:	bf00      	nop
 80089b2:	e7fe      	b.n	80089b2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d103      	bne.n	80089c2 <xQueueGenericSendFromISR+0x72>
 80089ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d101      	bne.n	80089c6 <xQueueGenericSendFromISR+0x76>
 80089c2:	2301      	movs	r3, #1
 80089c4:	e000      	b.n	80089c8 <xQueueGenericSendFromISR+0x78>
 80089c6:	2300      	movs	r3, #0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10c      	bne.n	80089e6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d0:	b672      	cpsid	i
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	b662      	cpsie	i
 80089e0:	61fb      	str	r3, [r7, #28]
}
 80089e2:	bf00      	nop
 80089e4:	e7fe      	b.n	80089e4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089e6:	f002 fac9 	bl	800af7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089ea:	f3ef 8211 	mrs	r2, BASEPRI
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	b672      	cpsid	i
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	b662      	cpsie	i
 8008a02:	61ba      	str	r2, [r7, #24]
 8008a04:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a06:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a08:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d302      	bcc.n	8008a1c <xQueueGenericSendFromISR+0xcc>
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d12c      	bne.n	8008a76 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	68b9      	ldr	r1, [r7, #8]
 8008a2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a2c:	f000 fb83 	bl	8009136 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a30:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a38:	d112      	bne.n	8008a60 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d016      	beq.n	8008a70 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a44:	3324      	adds	r3, #36	; 0x24
 8008a46:	4618      	mov	r0, r3
 8008a48:	f001 f998 	bl	8009d7c <xTaskRemoveFromEventList>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00e      	beq.n	8008a70 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00b      	beq.n	8008a70 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	e007      	b.n	8008a70 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a64:	3301      	adds	r3, #1
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	b25a      	sxtb	r2, r3
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a70:	2301      	movs	r3, #1
 8008a72:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008a74:	e001      	b.n	8008a7a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	637b      	str	r3, [r7, #52]	; 0x34
 8008a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3738      	adds	r7, #56	; 0x38
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b08e      	sub	sp, #56	; 0x38
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10c      	bne.n	8008abe <xQueueGiveFromISR+0x2e>
	__asm volatile
 8008aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa8:	b672      	cpsid	i
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	b662      	cpsie	i
 8008ab8:	623b      	str	r3, [r7, #32]
}
 8008aba:	bf00      	nop
 8008abc:	e7fe      	b.n	8008abc <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00c      	beq.n	8008ae0 <xQueueGiveFromISR+0x50>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	b672      	cpsid	i
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	b662      	cpsie	i
 8008ada:	61fb      	str	r3, [r7, #28]
}
 8008adc:	bf00      	nop
 8008ade:	e7fe      	b.n	8008ade <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d103      	bne.n	8008af0 <xQueueGiveFromISR+0x60>
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <xQueueGiveFromISR+0x64>
 8008af0:	2301      	movs	r3, #1
 8008af2:	e000      	b.n	8008af6 <xQueueGiveFromISR+0x66>
 8008af4:	2300      	movs	r3, #0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10c      	bne.n	8008b14 <xQueueGiveFromISR+0x84>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	b672      	cpsid	i
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	b662      	cpsie	i
 8008b0e:	61bb      	str	r3, [r7, #24]
}
 8008b10:	bf00      	nop
 8008b12:	e7fe      	b.n	8008b12 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b14:	f002 fa32 	bl	800af7c <vPortValidateInterruptPriority>
	__asm volatile
 8008b18:	f3ef 8211 	mrs	r2, BASEPRI
 8008b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b20:	b672      	cpsid	i
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	b662      	cpsie	i
 8008b30:	617a      	str	r2, [r7, #20]
 8008b32:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008b34:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b36:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d22b      	bcs.n	8008ba0 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b54:	1c5a      	adds	r2, r3, #1
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b62:	d112      	bne.n	8008b8a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d016      	beq.n	8008b9a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6e:	3324      	adds	r3, #36	; 0x24
 8008b70:	4618      	mov	r0, r3
 8008b72:	f001 f903 	bl	8009d7c <xTaskRemoveFromEventList>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00e      	beq.n	8008b9a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00b      	beq.n	8008b9a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	2201      	movs	r2, #1
 8008b86:	601a      	str	r2, [r3, #0]
 8008b88:	e007      	b.n	8008b9a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b8e:	3301      	adds	r3, #1
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	b25a      	sxtb	r2, r3
 8008b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b9e:	e001      	b.n	8008ba4 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8008ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f383 8811 	msr	BASEPRI, r3
}
 8008bae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3738      	adds	r7, #56	; 0x38
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
	...

08008bbc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08c      	sub	sp, #48	; 0x30
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10c      	bne.n	8008bf0 <xQueueReceive+0x34>
	__asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bda:	b672      	cpsid	i
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	b662      	cpsie	i
 8008bea:	623b      	str	r3, [r7, #32]
}
 8008bec:	bf00      	nop
 8008bee:	e7fe      	b.n	8008bee <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d103      	bne.n	8008bfe <xQueueReceive+0x42>
 8008bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d101      	bne.n	8008c02 <xQueueReceive+0x46>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e000      	b.n	8008c04 <xQueueReceive+0x48>
 8008c02:	2300      	movs	r3, #0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d10c      	bne.n	8008c22 <xQueueReceive+0x66>
	__asm volatile
 8008c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0c:	b672      	cpsid	i
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	b662      	cpsie	i
 8008c1c:	61fb      	str	r3, [r7, #28]
}
 8008c1e:	bf00      	nop
 8008c20:	e7fe      	b.n	8008c20 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c22:	f001 fa71 	bl	800a108 <xTaskGetSchedulerState>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d102      	bne.n	8008c32 <xQueueReceive+0x76>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <xQueueReceive+0x7a>
 8008c32:	2301      	movs	r3, #1
 8008c34:	e000      	b.n	8008c38 <xQueueReceive+0x7c>
 8008c36:	2300      	movs	r3, #0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10c      	bne.n	8008c56 <xQueueReceive+0x9a>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c40:	b672      	cpsid	i
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	b662      	cpsie	i
 8008c50:	61bb      	str	r3, [r7, #24]
}
 8008c52:	bf00      	nop
 8008c54:	e7fe      	b.n	8008c54 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c56:	f002 f8a9 	bl	800adac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d01f      	beq.n	8008ca6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c66:	68b9      	ldr	r1, [r7, #8]
 8008c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c6a:	f000 face 	bl	800920a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	1e5a      	subs	r2, r3, #1
 8008c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00f      	beq.n	8008c9e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c80:	3310      	adds	r3, #16
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 f87a 	bl	8009d7c <xTaskRemoveFromEventList>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d007      	beq.n	8008c9e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c8e:	4b3d      	ldr	r3, [pc, #244]	; (8008d84 <xQueueReceive+0x1c8>)
 8008c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c94:	601a      	str	r2, [r3, #0]
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c9e:	f002 f8b9 	bl	800ae14 <vPortExitCritical>
				return pdPASS;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e069      	b.n	8008d7a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d103      	bne.n	8008cb4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008cac:	f002 f8b2 	bl	800ae14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	e062      	b.n	8008d7a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d106      	bne.n	8008cc8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cba:	f107 0310 	add.w	r3, r7, #16
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f001 f8c2 	bl	8009e48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cc8:	f002 f8a4 	bl	800ae14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ccc:	f000 fe16 	bl	80098fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cd0:	f002 f86c 	bl	800adac <vPortEnterCritical>
 8008cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cda:	b25b      	sxtb	r3, r3
 8008cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce0:	d103      	bne.n	8008cea <xQueueReceive+0x12e>
 8008ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cf0:	b25b      	sxtb	r3, r3
 8008cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf6:	d103      	bne.n	8008d00 <xQueueReceive+0x144>
 8008cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d00:	f002 f888 	bl	800ae14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d04:	1d3a      	adds	r2, r7, #4
 8008d06:	f107 0310 	add.w	r3, r7, #16
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f001 f8b1 	bl	8009e74 <xTaskCheckForTimeOut>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d123      	bne.n	8008d60 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d1a:	f000 faee 	bl	80092fa <prvIsQueueEmpty>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d017      	beq.n	8008d54 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	3324      	adds	r3, #36	; 0x24
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f000 ffd1 	bl	8009cd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d34:	f000 fa8f 	bl	8009256 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d38:	f000 fdee 	bl	8009918 <xTaskResumeAll>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d189      	bne.n	8008c56 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008d42:	4b10      	ldr	r3, [pc, #64]	; (8008d84 <xQueueReceive+0x1c8>)
 8008d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d48:	601a      	str	r2, [r3, #0]
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	e780      	b.n	8008c56 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d56:	f000 fa7e 	bl	8009256 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d5a:	f000 fddd 	bl	8009918 <xTaskResumeAll>
 8008d5e:	e77a      	b.n	8008c56 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d62:	f000 fa78 	bl	8009256 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d66:	f000 fdd7 	bl	8009918 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d6c:	f000 fac5 	bl	80092fa <prvIsQueueEmpty>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f43f af6f 	beq.w	8008c56 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3730      	adds	r7, #48	; 0x30
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	e000ed04 	.word	0xe000ed04

08008d88 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b08e      	sub	sp, #56	; 0x38
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d92:	2300      	movs	r3, #0
 8008d94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10c      	bne.n	8008dbe <xQueueSemaphoreTake+0x36>
	__asm volatile
 8008da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da8:	b672      	cpsid	i
 8008daa:	f383 8811 	msr	BASEPRI, r3
 8008dae:	f3bf 8f6f 	isb	sy
 8008db2:	f3bf 8f4f 	dsb	sy
 8008db6:	b662      	cpsie	i
 8008db8:	623b      	str	r3, [r7, #32]
}
 8008dba:	bf00      	nop
 8008dbc:	e7fe      	b.n	8008dbc <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00c      	beq.n	8008de0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8008dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dca:	b672      	cpsid	i
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	b662      	cpsie	i
 8008dda:	61fb      	str	r3, [r7, #28]
}
 8008ddc:	bf00      	nop
 8008dde:	e7fe      	b.n	8008dde <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008de0:	f001 f992 	bl	800a108 <xTaskGetSchedulerState>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d102      	bne.n	8008df0 <xQueueSemaphoreTake+0x68>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <xQueueSemaphoreTake+0x6c>
 8008df0:	2301      	movs	r3, #1
 8008df2:	e000      	b.n	8008df6 <xQueueSemaphoreTake+0x6e>
 8008df4:	2300      	movs	r3, #0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10c      	bne.n	8008e14 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfe:	b672      	cpsid	i
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	b662      	cpsie	i
 8008e0e:	61bb      	str	r3, [r7, #24]
}
 8008e10:	bf00      	nop
 8008e12:	e7fe      	b.n	8008e12 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e14:	f001 ffca 	bl	800adac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d024      	beq.n	8008e6e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e26:	1e5a      	subs	r2, r3, #1
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d104      	bne.n	8008e3e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008e34:	f001 fae6 	bl	800a404 <pvTaskIncrementMutexHeldCount>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00f      	beq.n	8008e66 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e48:	3310      	adds	r3, #16
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 ff96 	bl	8009d7c <xTaskRemoveFromEventList>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d007      	beq.n	8008e66 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e56:	4b55      	ldr	r3, [pc, #340]	; (8008fac <xQueueSemaphoreTake+0x224>)
 8008e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e66:	f001 ffd5 	bl	800ae14 <vPortExitCritical>
				return pdPASS;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e099      	b.n	8008fa2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d113      	bne.n	8008e9c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00c      	beq.n	8008e94 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7e:	b672      	cpsid	i
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	b662      	cpsie	i
 8008e8e:	617b      	str	r3, [r7, #20]
}
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008e94:	f001 ffbe 	bl	800ae14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	e082      	b.n	8008fa2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d106      	bne.n	8008eb0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ea2:	f107 030c 	add.w	r3, r7, #12
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 ffce 	bl	8009e48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008eac:	2301      	movs	r3, #1
 8008eae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008eb0:	f001 ffb0 	bl	800ae14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008eb4:	f000 fd22 	bl	80098fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008eb8:	f001 ff78 	bl	800adac <vPortEnterCritical>
 8008ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ec2:	b25b      	sxtb	r3, r3
 8008ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec8:	d103      	bne.n	8008ed2 <xQueueSemaphoreTake+0x14a>
 8008eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ed8:	b25b      	sxtb	r3, r3
 8008eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ede:	d103      	bne.n	8008ee8 <xQueueSemaphoreTake+0x160>
 8008ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ee8:	f001 ff94 	bl	800ae14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008eec:	463a      	mov	r2, r7
 8008eee:	f107 030c 	add.w	r3, r7, #12
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 ffbd 	bl	8009e74 <xTaskCheckForTimeOut>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d132      	bne.n	8008f66 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f02:	f000 f9fa 	bl	80092fa <prvIsQueueEmpty>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d026      	beq.n	8008f5a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d109      	bne.n	8008f28 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8008f14:	f001 ff4a 	bl	800adac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f001 f911 	bl	800a144 <xTaskPriorityInherit>
 8008f22:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008f24:	f001 ff76 	bl	800ae14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2a:	3324      	adds	r3, #36	; 0x24
 8008f2c:	683a      	ldr	r2, [r7, #0]
 8008f2e:	4611      	mov	r1, r2
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 fecf 	bl	8009cd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f38:	f000 f98d 	bl	8009256 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f3c:	f000 fcec 	bl	8009918 <xTaskResumeAll>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f47f af66 	bne.w	8008e14 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8008f48:	4b18      	ldr	r3, [pc, #96]	; (8008fac <xQueueSemaphoreTake+0x224>)
 8008f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	e75c      	b.n	8008e14 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008f5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f5c:	f000 f97b 	bl	8009256 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f60:	f000 fcda 	bl	8009918 <xTaskResumeAll>
 8008f64:	e756      	b.n	8008e14 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008f66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f68:	f000 f975 	bl	8009256 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f6c:	f000 fcd4 	bl	8009918 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f72:	f000 f9c2 	bl	80092fa <prvIsQueueEmpty>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f43f af4b 	beq.w	8008e14 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00d      	beq.n	8008fa0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8008f84:	f001 ff12 	bl	800adac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008f88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f8a:	f000 f8bc 	bl	8009106 <prvGetDisinheritPriorityAfterTimeout>
 8008f8e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f96:	4618      	mov	r0, r3
 8008f98:	f001 f9ae 	bl	800a2f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008f9c:	f001 ff3a 	bl	800ae14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008fa0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3738      	adds	r7, #56	; 0x38
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	e000ed04 	.word	0xe000ed04

08008fb0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b08e      	sub	sp, #56	; 0x38
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10c      	bne.n	8008fe0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fca:	b672      	cpsid	i
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	b662      	cpsie	i
 8008fda:	623b      	str	r3, [r7, #32]
}
 8008fdc:	bf00      	nop
 8008fde:	e7fe      	b.n	8008fde <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d103      	bne.n	8008fee <xQueueReceiveFromISR+0x3e>
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <xQueueReceiveFromISR+0x42>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e000      	b.n	8008ff4 <xQueueReceiveFromISR+0x44>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10c      	bne.n	8009012 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8008ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffc:	b672      	cpsid	i
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	b662      	cpsie	i
 800900c:	61fb      	str	r3, [r7, #28]
}
 800900e:	bf00      	nop
 8009010:	e7fe      	b.n	8009010 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009012:	f001 ffb3 	bl	800af7c <vPortValidateInterruptPriority>
	__asm volatile
 8009016:	f3ef 8211 	mrs	r2, BASEPRI
 800901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901e:	b672      	cpsid	i
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	b662      	cpsie	i
 800902e:	61ba      	str	r2, [r7, #24]
 8009030:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009032:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009034:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	2b00      	cmp	r3, #0
 8009040:	d02f      	beq.n	80090a2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009044:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800904c:	68b9      	ldr	r1, [r7, #8]
 800904e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009050:	f000 f8db 	bl	800920a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009056:	1e5a      	subs	r2, r3, #1
 8009058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800905c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009064:	d112      	bne.n	800908c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d016      	beq.n	800909c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	3310      	adds	r3, #16
 8009072:	4618      	mov	r0, r3
 8009074:	f000 fe82 	bl	8009d7c <xTaskRemoveFromEventList>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00e      	beq.n	800909c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00b      	beq.n	800909c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	e007      	b.n	800909c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800908c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009090:	3301      	adds	r3, #1
 8009092:	b2db      	uxtb	r3, r3
 8009094:	b25a      	sxtb	r2, r3
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800909c:	2301      	movs	r3, #1
 800909e:	637b      	str	r3, [r7, #52]	; 0x34
 80090a0:	e001      	b.n	80090a6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	637b      	str	r3, [r7, #52]	; 0x34
 80090a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	f383 8811 	msr	BASEPRI, r3
}
 80090b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3738      	adds	r7, #56	; 0x38
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10c      	bne.n	80090e8 <vQueueDelete+0x2c>
	__asm volatile
 80090ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d2:	b672      	cpsid	i
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	b662      	cpsie	i
 80090e2:	60bb      	str	r3, [r7, #8]
}
 80090e4:	bf00      	nop
 80090e6:	e7fe      	b.n	80090e6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f000 f95f 	bl	80093ac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d102      	bne.n	80090fe <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f002 f84d 	bl	800b198 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80090fe:	bf00      	nop
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009106:	b480      	push	{r7}
 8009108:	b085      	sub	sp, #20
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	2b00      	cmp	r3, #0
 8009114:	d006      	beq.n	8009124 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009120:	60fb      	str	r3, [r7, #12]
 8009122:	e001      	b.n	8009128 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009124:	2300      	movs	r3, #0
 8009126:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009128:	68fb      	ldr	r3, [r7, #12]
	}
 800912a:	4618      	mov	r0, r3
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b086      	sub	sp, #24
 800913a:	af00      	add	r7, sp, #0
 800913c:	60f8      	str	r0, [r7, #12]
 800913e:	60b9      	str	r1, [r7, #8]
 8009140:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009142:	2300      	movs	r3, #0
 8009144:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10d      	bne.n	8009170 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d14d      	bne.n	80091f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	4618      	mov	r0, r3
 8009162:	f001 f857 	bl	800a214 <xTaskPriorityDisinherit>
 8009166:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	609a      	str	r2, [r3, #8]
 800916e:	e043      	b.n	80091f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d119      	bne.n	80091aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6858      	ldr	r0, [r3, #4]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917e:	461a      	mov	r2, r3
 8009180:	68b9      	ldr	r1, [r7, #8]
 8009182:	f002 f947 	bl	800b414 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	685a      	ldr	r2, [r3, #4]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918e:	441a      	add	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	429a      	cmp	r2, r3
 800919e:	d32b      	bcc.n	80091f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	605a      	str	r2, [r3, #4]
 80091a8:	e026      	b.n	80091f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	68d8      	ldr	r0, [r3, #12]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b2:	461a      	mov	r2, r3
 80091b4:	68b9      	ldr	r1, [r7, #8]
 80091b6:	f002 f92d 	bl	800b414 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	68da      	ldr	r2, [r3, #12]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c2:	425b      	negs	r3, r3
 80091c4:	441a      	add	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	68da      	ldr	r2, [r3, #12]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d207      	bcs.n	80091e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	689a      	ldr	r2, [r3, #8]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091de:	425b      	negs	r3, r3
 80091e0:	441a      	add	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d105      	bne.n	80091f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d002      	beq.n	80091f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	3b01      	subs	r3, #1
 80091f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009200:	697b      	ldr	r3, [r7, #20]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3718      	adds	r7, #24
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b082      	sub	sp, #8
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009218:	2b00      	cmp	r3, #0
 800921a:	d018      	beq.n	800924e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	68da      	ldr	r2, [r3, #12]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009224:	441a      	add	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	68da      	ldr	r2, [r3, #12]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	429a      	cmp	r2, r3
 8009234:	d303      	bcc.n	800923e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68d9      	ldr	r1, [r3, #12]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009246:	461a      	mov	r2, r3
 8009248:	6838      	ldr	r0, [r7, #0]
 800924a:	f002 f8e3 	bl	800b414 <memcpy>
	}
}
 800924e:	bf00      	nop
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b084      	sub	sp, #16
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800925e:	f001 fda5 	bl	800adac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009268:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800926a:	e011      	b.n	8009290 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009270:	2b00      	cmp	r3, #0
 8009272:	d012      	beq.n	800929a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	3324      	adds	r3, #36	; 0x24
 8009278:	4618      	mov	r0, r3
 800927a:	f000 fd7f 	bl	8009d7c <xTaskRemoveFromEventList>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009284:	f000 fe5c 	bl	8009f40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009288:	7bfb      	ldrb	r3, [r7, #15]
 800928a:	3b01      	subs	r3, #1
 800928c:	b2db      	uxtb	r3, r3
 800928e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009294:	2b00      	cmp	r3, #0
 8009296:	dce9      	bgt.n	800926c <prvUnlockQueue+0x16>
 8009298:	e000      	b.n	800929c <prvUnlockQueue+0x46>
					break;
 800929a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	22ff      	movs	r2, #255	; 0xff
 80092a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80092a4:	f001 fdb6 	bl	800ae14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80092a8:	f001 fd80 	bl	800adac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092b4:	e011      	b.n	80092da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d012      	beq.n	80092e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3310      	adds	r3, #16
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 fd5a 	bl	8009d7c <xTaskRemoveFromEventList>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80092ce:	f000 fe37 	bl	8009f40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80092d2:	7bbb      	ldrb	r3, [r7, #14]
 80092d4:	3b01      	subs	r3, #1
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	dce9      	bgt.n	80092b6 <prvUnlockQueue+0x60>
 80092e2:	e000      	b.n	80092e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80092e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	22ff      	movs	r2, #255	; 0xff
 80092ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80092ee:	f001 fd91 	bl	800ae14 <vPortExitCritical>
}
 80092f2:	bf00      	nop
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009302:	f001 fd53 	bl	800adac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930a:	2b00      	cmp	r3, #0
 800930c:	d102      	bne.n	8009314 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800930e:	2301      	movs	r3, #1
 8009310:	60fb      	str	r3, [r7, #12]
 8009312:	e001      	b.n	8009318 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009314:	2300      	movs	r3, #0
 8009316:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009318:	f001 fd7c 	bl	800ae14 <vPortExitCritical>

	return xReturn;
 800931c:	68fb      	ldr	r3, [r7, #12]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b084      	sub	sp, #16
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800932e:	f001 fd3d 	bl	800adac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800933a:	429a      	cmp	r2, r3
 800933c:	d102      	bne.n	8009344 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800933e:	2301      	movs	r3, #1
 8009340:	60fb      	str	r3, [r7, #12]
 8009342:	e001      	b.n	8009348 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009344:	2300      	movs	r3, #0
 8009346:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009348:	f001 fd64 	bl	800ae14 <vPortExitCritical>

	return xReturn;
 800934c:	68fb      	ldr	r3, [r7, #12]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
	...

08009358 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009362:	2300      	movs	r3, #0
 8009364:	60fb      	str	r3, [r7, #12]
 8009366:	e014      	b.n	8009392 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009368:	4a0f      	ldr	r2, [pc, #60]	; (80093a8 <vQueueAddToRegistry+0x50>)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10b      	bne.n	800938c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009374:	490c      	ldr	r1, [pc, #48]	; (80093a8 <vQueueAddToRegistry+0x50>)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800937e:	4a0a      	ldr	r2, [pc, #40]	; (80093a8 <vQueueAddToRegistry+0x50>)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	00db      	lsls	r3, r3, #3
 8009384:	4413      	add	r3, r2
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800938a:	e006      	b.n	800939a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	3301      	adds	r3, #1
 8009390:	60fb      	str	r3, [r7, #12]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2b07      	cmp	r3, #7
 8009396:	d9e7      	bls.n	8009368 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009398:	bf00      	nop
 800939a:	bf00      	nop
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	200009f8 	.word	0x200009f8

080093ac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093b4:	2300      	movs	r3, #0
 80093b6:	60fb      	str	r3, [r7, #12]
 80093b8:	e016      	b.n	80093e8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80093ba:	4a10      	ldr	r2, [pc, #64]	; (80093fc <vQueueUnregisterQueue+0x50>)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	00db      	lsls	r3, r3, #3
 80093c0:	4413      	add	r3, r2
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d10b      	bne.n	80093e2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80093ca:	4a0c      	ldr	r2, [pc, #48]	; (80093fc <vQueueUnregisterQueue+0x50>)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2100      	movs	r1, #0
 80093d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80093d4:	4a09      	ldr	r2, [pc, #36]	; (80093fc <vQueueUnregisterQueue+0x50>)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	00db      	lsls	r3, r3, #3
 80093da:	4413      	add	r3, r2
 80093dc:	2200      	movs	r2, #0
 80093de:	605a      	str	r2, [r3, #4]
				break;
 80093e0:	e006      	b.n	80093f0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	3301      	adds	r3, #1
 80093e6:	60fb      	str	r3, [r7, #12]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2b07      	cmp	r3, #7
 80093ec:	d9e5      	bls.n	80093ba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80093ee:	bf00      	nop
 80093f0:	bf00      	nop
 80093f2:	3714      	adds	r7, #20
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr
 80093fc:	200009f8 	.word	0x200009f8

08009400 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009410:	f001 fccc 	bl	800adac <vPortEnterCritical>
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800941a:	b25b      	sxtb	r3, r3
 800941c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009420:	d103      	bne.n	800942a <vQueueWaitForMessageRestricted+0x2a>
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009430:	b25b      	sxtb	r3, r3
 8009432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009436:	d103      	bne.n	8009440 <vQueueWaitForMessageRestricted+0x40>
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009440:	f001 fce8 	bl	800ae14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009448:	2b00      	cmp	r3, #0
 800944a:	d106      	bne.n	800945a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	3324      	adds	r3, #36	; 0x24
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	68b9      	ldr	r1, [r7, #8]
 8009454:	4618      	mov	r0, r3
 8009456:	f000 fc63 	bl	8009d20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800945a:	6978      	ldr	r0, [r7, #20]
 800945c:	f7ff fefb 	bl	8009256 <prvUnlockQueue>
	}
 8009460:	bf00      	nop
 8009462:	3718      	adds	r7, #24
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009468:	b580      	push	{r7, lr}
 800946a:	b08e      	sub	sp, #56	; 0x38
 800946c:	af04      	add	r7, sp, #16
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
 8009474:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10c      	bne.n	8009496 <xTaskCreateStatic+0x2e>
	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009480:	b672      	cpsid	i
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	b662      	cpsie	i
 8009490:	623b      	str	r3, [r7, #32]
}
 8009492:	bf00      	nop
 8009494:	e7fe      	b.n	8009494 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10c      	bne.n	80094b6 <xTaskCreateStatic+0x4e>
	__asm volatile
 800949c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a0:	b672      	cpsid	i
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	b662      	cpsie	i
 80094b0:	61fb      	str	r3, [r7, #28]
}
 80094b2:	bf00      	nop
 80094b4:	e7fe      	b.n	80094b4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80094b6:	235c      	movs	r3, #92	; 0x5c
 80094b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	2b5c      	cmp	r3, #92	; 0x5c
 80094be:	d00c      	beq.n	80094da <xTaskCreateStatic+0x72>
	__asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c4:	b672      	cpsid	i
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	b662      	cpsie	i
 80094d4:	61bb      	str	r3, [r7, #24]
}
 80094d6:	bf00      	nop
 80094d8:	e7fe      	b.n	80094d8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80094da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80094dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d01e      	beq.n	8009520 <xTaskCreateStatic+0xb8>
 80094e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d01b      	beq.n	8009520 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80094e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80094f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f4:	2202      	movs	r2, #2
 80094f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80094fa:	2300      	movs	r3, #0
 80094fc:	9303      	str	r3, [sp, #12]
 80094fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009500:	9302      	str	r3, [sp, #8]
 8009502:	f107 0314 	add.w	r3, r7, #20
 8009506:	9301      	str	r3, [sp, #4]
 8009508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	68b9      	ldr	r1, [r7, #8]
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f000 f850 	bl	80095b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009518:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800951a:	f000 f8df 	bl	80096dc <prvAddNewTaskToReadyList>
 800951e:	e001      	b.n	8009524 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009520:	2300      	movs	r3, #0
 8009522:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009524:	697b      	ldr	r3, [r7, #20]
	}
 8009526:	4618      	mov	r0, r3
 8009528:	3728      	adds	r7, #40	; 0x28
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800952e:	b580      	push	{r7, lr}
 8009530:	b08c      	sub	sp, #48	; 0x30
 8009532:	af04      	add	r7, sp, #16
 8009534:	60f8      	str	r0, [r7, #12]
 8009536:	60b9      	str	r1, [r7, #8]
 8009538:	603b      	str	r3, [r7, #0]
 800953a:	4613      	mov	r3, r2
 800953c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800953e:	88fb      	ldrh	r3, [r7, #6]
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4618      	mov	r0, r3
 8009544:	f001 fd5e 	bl	800b004 <pvPortMalloc>
 8009548:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00e      	beq.n	800956e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009550:	205c      	movs	r0, #92	; 0x5c
 8009552:	f001 fd57 	bl	800b004 <pvPortMalloc>
 8009556:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	631a      	str	r2, [r3, #48]	; 0x30
 8009564:	e005      	b.n	8009572 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009566:	6978      	ldr	r0, [r7, #20]
 8009568:	f001 fe16 	bl	800b198 <vPortFree>
 800956c:	e001      	b.n	8009572 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800956e:	2300      	movs	r3, #0
 8009570:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d017      	beq.n	80095a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009580:	88fa      	ldrh	r2, [r7, #6]
 8009582:	2300      	movs	r3, #0
 8009584:	9303      	str	r3, [sp, #12]
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	9302      	str	r3, [sp, #8]
 800958a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958c:	9301      	str	r3, [sp, #4]
 800958e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	68b9      	ldr	r1, [r7, #8]
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 f80e 	bl	80095b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800959c:	69f8      	ldr	r0, [r7, #28]
 800959e:	f000 f89d 	bl	80096dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80095a2:	2301      	movs	r3, #1
 80095a4:	61bb      	str	r3, [r7, #24]
 80095a6:	e002      	b.n	80095ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80095a8:	f04f 33ff 	mov.w	r3, #4294967295
 80095ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80095ae:	69bb      	ldr	r3, [r7, #24]
	}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3720      	adds	r7, #32
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b088      	sub	sp, #32
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
 80095c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80095c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	461a      	mov	r2, r3
 80095d0:	21a5      	movs	r1, #165	; 0xa5
 80095d2:	f001 ff2d 	bl	800b430 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095da:	6879      	ldr	r1, [r7, #4]
 80095dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80095e0:	440b      	add	r3, r1
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4413      	add	r3, r2
 80095e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	f023 0307 	bic.w	r3, r3, #7
 80095ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	f003 0307 	and.w	r3, r3, #7
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00c      	beq.n	8009614 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80095fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fe:	b672      	cpsid	i
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	b662      	cpsie	i
 800960e:	617b      	str	r3, [r7, #20]
}
 8009610:	bf00      	nop
 8009612:	e7fe      	b.n	8009612 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d01f      	beq.n	800965a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800961a:	2300      	movs	r3, #0
 800961c:	61fb      	str	r3, [r7, #28]
 800961e:	e012      	b.n	8009646 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	4413      	add	r3, r2
 8009626:	7819      	ldrb	r1, [r3, #0]
 8009628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800962a:	69fb      	ldr	r3, [r7, #28]
 800962c:	4413      	add	r3, r2
 800962e:	3334      	adds	r3, #52	; 0x34
 8009630:	460a      	mov	r2, r1
 8009632:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	4413      	add	r3, r2
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d006      	beq.n	800964e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	3301      	adds	r3, #1
 8009644:	61fb      	str	r3, [r7, #28]
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	2b0f      	cmp	r3, #15
 800964a:	d9e9      	bls.n	8009620 <prvInitialiseNewTask+0x68>
 800964c:	e000      	b.n	8009650 <prvInitialiseNewTask+0x98>
			{
				break;
 800964e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009658:	e003      	b.n	8009662 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800965a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965c:	2200      	movs	r2, #0
 800965e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009664:	2b37      	cmp	r3, #55	; 0x37
 8009666:	d901      	bls.n	800966c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009668:	2337      	movs	r3, #55	; 0x37
 800966a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800966c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009670:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009676:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967a:	2200      	movs	r2, #0
 800967c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800967e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009680:	3304      	adds	r3, #4
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fe06 	bl	8008294 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968a:	3318      	adds	r3, #24
 800968c:	4618      	mov	r0, r3
 800968e:	f7fe fe01 	bl	8008294 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009696:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800969e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80096a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80096a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096aa:	2200      	movs	r2, #0
 80096ac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	68f9      	ldr	r1, [r7, #12]
 80096ba:	69b8      	ldr	r0, [r7, #24]
 80096bc:	f001 fa66 	bl	800ab8c <pxPortInitialiseStack>
 80096c0:	4602      	mov	r2, r0
 80096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80096c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80096cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096d2:	bf00      	nop
 80096d4:	3720      	adds	r7, #32
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
	...

080096dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80096e4:	f001 fb62 	bl	800adac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80096e8:	4b2d      	ldr	r3, [pc, #180]	; (80097a0 <prvAddNewTaskToReadyList+0xc4>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3301      	adds	r3, #1
 80096ee:	4a2c      	ldr	r2, [pc, #176]	; (80097a0 <prvAddNewTaskToReadyList+0xc4>)
 80096f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80096f2:	4b2c      	ldr	r3, [pc, #176]	; (80097a4 <prvAddNewTaskToReadyList+0xc8>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d109      	bne.n	800970e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80096fa:	4a2a      	ldr	r2, [pc, #168]	; (80097a4 <prvAddNewTaskToReadyList+0xc8>)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009700:	4b27      	ldr	r3, [pc, #156]	; (80097a0 <prvAddNewTaskToReadyList+0xc4>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d110      	bne.n	800972a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009708:	f000 fc3e 	bl	8009f88 <prvInitialiseTaskLists>
 800970c:	e00d      	b.n	800972a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800970e:	4b26      	ldr	r3, [pc, #152]	; (80097a8 <prvAddNewTaskToReadyList+0xcc>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d109      	bne.n	800972a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009716:	4b23      	ldr	r3, [pc, #140]	; (80097a4 <prvAddNewTaskToReadyList+0xc8>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009720:	429a      	cmp	r2, r3
 8009722:	d802      	bhi.n	800972a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009724:	4a1f      	ldr	r2, [pc, #124]	; (80097a4 <prvAddNewTaskToReadyList+0xc8>)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800972a:	4b20      	ldr	r3, [pc, #128]	; (80097ac <prvAddNewTaskToReadyList+0xd0>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	3301      	adds	r3, #1
 8009730:	4a1e      	ldr	r2, [pc, #120]	; (80097ac <prvAddNewTaskToReadyList+0xd0>)
 8009732:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009734:	4b1d      	ldr	r3, [pc, #116]	; (80097ac <prvAddNewTaskToReadyList+0xd0>)
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009740:	4b1b      	ldr	r3, [pc, #108]	; (80097b0 <prvAddNewTaskToReadyList+0xd4>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	429a      	cmp	r2, r3
 8009746:	d903      	bls.n	8009750 <prvAddNewTaskToReadyList+0x74>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974c:	4a18      	ldr	r2, [pc, #96]	; (80097b0 <prvAddNewTaskToReadyList+0xd4>)
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009754:	4613      	mov	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4413      	add	r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4a15      	ldr	r2, [pc, #84]	; (80097b4 <prvAddNewTaskToReadyList+0xd8>)
 800975e:	441a      	add	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	3304      	adds	r3, #4
 8009764:	4619      	mov	r1, r3
 8009766:	4610      	mov	r0, r2
 8009768:	f7fe fda1 	bl	80082ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800976c:	f001 fb52 	bl	800ae14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009770:	4b0d      	ldr	r3, [pc, #52]	; (80097a8 <prvAddNewTaskToReadyList+0xcc>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00e      	beq.n	8009796 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009778:	4b0a      	ldr	r3, [pc, #40]	; (80097a4 <prvAddNewTaskToReadyList+0xc8>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009782:	429a      	cmp	r2, r3
 8009784:	d207      	bcs.n	8009796 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009786:	4b0c      	ldr	r3, [pc, #48]	; (80097b8 <prvAddNewTaskToReadyList+0xdc>)
 8009788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800978c:	601a      	str	r2, [r3, #0]
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009796:	bf00      	nop
 8009798:	3708      	adds	r7, #8
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	20000f0c 	.word	0x20000f0c
 80097a4:	20000a38 	.word	0x20000a38
 80097a8:	20000f18 	.word	0x20000f18
 80097ac:	20000f28 	.word	0x20000f28
 80097b0:	20000f14 	.word	0x20000f14
 80097b4:	20000a3c 	.word	0x20000a3c
 80097b8:	e000ed04 	.word	0xe000ed04

080097bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80097c4:	2300      	movs	r3, #0
 80097c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d019      	beq.n	8009802 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80097ce:	4b14      	ldr	r3, [pc, #80]	; (8009820 <vTaskDelay+0x64>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00c      	beq.n	80097f0 <vTaskDelay+0x34>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097da:	b672      	cpsid	i
 80097dc:	f383 8811 	msr	BASEPRI, r3
 80097e0:	f3bf 8f6f 	isb	sy
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	b662      	cpsie	i
 80097ea:	60bb      	str	r3, [r7, #8]
}
 80097ec:	bf00      	nop
 80097ee:	e7fe      	b.n	80097ee <vTaskDelay+0x32>
			vTaskSuspendAll();
 80097f0:	f000 f884 	bl	80098fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80097f4:	2100      	movs	r1, #0
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fe18 	bl	800a42c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80097fc:	f000 f88c 	bl	8009918 <xTaskResumeAll>
 8009800:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d107      	bne.n	8009818 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009808:	4b06      	ldr	r3, [pc, #24]	; (8009824 <vTaskDelay+0x68>)
 800980a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800980e:	601a      	str	r2, [r3, #0]
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009818:	bf00      	nop
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	20000f34 	.word	0x20000f34
 8009824:	e000ed04 	.word	0xe000ed04

08009828 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b08a      	sub	sp, #40	; 0x28
 800982c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800982e:	2300      	movs	r3, #0
 8009830:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009832:	2300      	movs	r3, #0
 8009834:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009836:	463a      	mov	r2, r7
 8009838:	1d39      	adds	r1, r7, #4
 800983a:	f107 0308 	add.w	r3, r7, #8
 800983e:	4618      	mov	r0, r3
 8009840:	f7fe fcd4 	bl	80081ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	9202      	str	r2, [sp, #8]
 800984c:	9301      	str	r3, [sp, #4]
 800984e:	2300      	movs	r3, #0
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	2300      	movs	r3, #0
 8009854:	460a      	mov	r2, r1
 8009856:	4923      	ldr	r1, [pc, #140]	; (80098e4 <vTaskStartScheduler+0xbc>)
 8009858:	4823      	ldr	r0, [pc, #140]	; (80098e8 <vTaskStartScheduler+0xc0>)
 800985a:	f7ff fe05 	bl	8009468 <xTaskCreateStatic>
 800985e:	4603      	mov	r3, r0
 8009860:	4a22      	ldr	r2, [pc, #136]	; (80098ec <vTaskStartScheduler+0xc4>)
 8009862:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009864:	4b21      	ldr	r3, [pc, #132]	; (80098ec <vTaskStartScheduler+0xc4>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d002      	beq.n	8009872 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800986c:	2301      	movs	r3, #1
 800986e:	617b      	str	r3, [r7, #20]
 8009870:	e001      	b.n	8009876 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009872:	2300      	movs	r3, #0
 8009874:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	2b01      	cmp	r3, #1
 800987a:	d102      	bne.n	8009882 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800987c:	f000 fe2a 	bl	800a4d4 <xTimerCreateTimerTask>
 8009880:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d118      	bne.n	80098ba <vTaskStartScheduler+0x92>
	__asm volatile
 8009888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988c:	b672      	cpsid	i
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	b662      	cpsie	i
 800989c:	613b      	str	r3, [r7, #16]
}
 800989e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80098a0:	4b13      	ldr	r3, [pc, #76]	; (80098f0 <vTaskStartScheduler+0xc8>)
 80098a2:	f04f 32ff 	mov.w	r2, #4294967295
 80098a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80098a8:	4b12      	ldr	r3, [pc, #72]	; (80098f4 <vTaskStartScheduler+0xcc>)
 80098aa:	2201      	movs	r2, #1
 80098ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80098ae:	4b12      	ldr	r3, [pc, #72]	; (80098f8 <vTaskStartScheduler+0xd0>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80098b4:	f001 f9fc 	bl	800acb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80098b8:	e010      	b.n	80098dc <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c0:	d10c      	bne.n	80098dc <vTaskStartScheduler+0xb4>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c6:	b672      	cpsid	i
 80098c8:	f383 8811 	msr	BASEPRI, r3
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	b662      	cpsie	i
 80098d6:	60fb      	str	r3, [r7, #12]
}
 80098d8:	bf00      	nop
 80098da:	e7fe      	b.n	80098da <vTaskStartScheduler+0xb2>
}
 80098dc:	bf00      	nop
 80098de:	3718      	adds	r7, #24
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	0800b4b4 	.word	0x0800b4b4
 80098e8:	08009f59 	.word	0x08009f59
 80098ec:	20000f30 	.word	0x20000f30
 80098f0:	20000f2c 	.word	0x20000f2c
 80098f4:	20000f18 	.word	0x20000f18
 80098f8:	20000f10 	.word	0x20000f10

080098fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80098fc:	b480      	push	{r7}
 80098fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009900:	4b04      	ldr	r3, [pc, #16]	; (8009914 <vTaskSuspendAll+0x18>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	3301      	adds	r3, #1
 8009906:	4a03      	ldr	r2, [pc, #12]	; (8009914 <vTaskSuspendAll+0x18>)
 8009908:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800990a:	bf00      	nop
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	20000f34 	.word	0x20000f34

08009918 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800991e:	2300      	movs	r3, #0
 8009920:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009922:	2300      	movs	r3, #0
 8009924:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009926:	4b43      	ldr	r3, [pc, #268]	; (8009a34 <xTaskResumeAll+0x11c>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10c      	bne.n	8009948 <xTaskResumeAll+0x30>
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009932:	b672      	cpsid	i
 8009934:	f383 8811 	msr	BASEPRI, r3
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	b662      	cpsie	i
 8009942:	603b      	str	r3, [r7, #0]
}
 8009944:	bf00      	nop
 8009946:	e7fe      	b.n	8009946 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009948:	f001 fa30 	bl	800adac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800994c:	4b39      	ldr	r3, [pc, #228]	; (8009a34 <xTaskResumeAll+0x11c>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	3b01      	subs	r3, #1
 8009952:	4a38      	ldr	r2, [pc, #224]	; (8009a34 <xTaskResumeAll+0x11c>)
 8009954:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009956:	4b37      	ldr	r3, [pc, #220]	; (8009a34 <xTaskResumeAll+0x11c>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d162      	bne.n	8009a24 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800995e:	4b36      	ldr	r3, [pc, #216]	; (8009a38 <xTaskResumeAll+0x120>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d05e      	beq.n	8009a24 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009966:	e02f      	b.n	80099c8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009968:	4b34      	ldr	r3, [pc, #208]	; (8009a3c <xTaskResumeAll+0x124>)
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	3318      	adds	r3, #24
 8009974:	4618      	mov	r0, r3
 8009976:	f7fe fcf7 	bl	8008368 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	3304      	adds	r3, #4
 800997e:	4618      	mov	r0, r3
 8009980:	f7fe fcf2 	bl	8008368 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009988:	4b2d      	ldr	r3, [pc, #180]	; (8009a40 <xTaskResumeAll+0x128>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	429a      	cmp	r2, r3
 800998e:	d903      	bls.n	8009998 <xTaskResumeAll+0x80>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009994:	4a2a      	ldr	r2, [pc, #168]	; (8009a40 <xTaskResumeAll+0x128>)
 8009996:	6013      	str	r3, [r2, #0]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800999c:	4613      	mov	r3, r2
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4413      	add	r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	4a27      	ldr	r2, [pc, #156]	; (8009a44 <xTaskResumeAll+0x12c>)
 80099a6:	441a      	add	r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	3304      	adds	r3, #4
 80099ac:	4619      	mov	r1, r3
 80099ae:	4610      	mov	r0, r2
 80099b0:	f7fe fc7d 	bl	80082ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b8:	4b23      	ldr	r3, [pc, #140]	; (8009a48 <xTaskResumeAll+0x130>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099be:	429a      	cmp	r2, r3
 80099c0:	d302      	bcc.n	80099c8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80099c2:	4b22      	ldr	r3, [pc, #136]	; (8009a4c <xTaskResumeAll+0x134>)
 80099c4:	2201      	movs	r2, #1
 80099c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099c8:	4b1c      	ldr	r3, [pc, #112]	; (8009a3c <xTaskResumeAll+0x124>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1cb      	bne.n	8009968 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80099d6:	f000 fb77 	bl	800a0c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80099da:	4b1d      	ldr	r3, [pc, #116]	; (8009a50 <xTaskResumeAll+0x138>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d010      	beq.n	8009a08 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80099e6:	f000 f859 	bl	8009a9c <xTaskIncrementTick>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80099f0:	4b16      	ldr	r3, [pc, #88]	; (8009a4c <xTaskResumeAll+0x134>)
 80099f2:	2201      	movs	r2, #1
 80099f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	3b01      	subs	r3, #1
 80099fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1f1      	bne.n	80099e6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8009a02:	4b13      	ldr	r3, [pc, #76]	; (8009a50 <xTaskResumeAll+0x138>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a08:	4b10      	ldr	r3, [pc, #64]	; (8009a4c <xTaskResumeAll+0x134>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d009      	beq.n	8009a24 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a10:	2301      	movs	r3, #1
 8009a12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a14:	4b0f      	ldr	r3, [pc, #60]	; (8009a54 <xTaskResumeAll+0x13c>)
 8009a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a1a:	601a      	str	r2, [r3, #0]
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a24:	f001 f9f6 	bl	800ae14 <vPortExitCritical>

	return xAlreadyYielded;
 8009a28:	68bb      	ldr	r3, [r7, #8]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20000f34 	.word	0x20000f34
 8009a38:	20000f0c 	.word	0x20000f0c
 8009a3c:	20000ecc 	.word	0x20000ecc
 8009a40:	20000f14 	.word	0x20000f14
 8009a44:	20000a3c 	.word	0x20000a3c
 8009a48:	20000a38 	.word	0x20000a38
 8009a4c:	20000f20 	.word	0x20000f20
 8009a50:	20000f1c 	.word	0x20000f1c
 8009a54:	e000ed04 	.word	0xe000ed04

08009a58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009a5e:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <xTaskGetTickCount+0x1c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009a64:	687b      	ldr	r3, [r7, #4]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	20000f10 	.word	0x20000f10

08009a78 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a7e:	f001 fa7d 	bl	800af7c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009a82:	2300      	movs	r3, #0
 8009a84:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009a86:	4b04      	ldr	r3, [pc, #16]	; (8009a98 <xTaskGetTickCountFromISR+0x20>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a8c:	683b      	ldr	r3, [r7, #0]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	20000f10 	.word	0x20000f10

08009a9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aa6:	4b50      	ldr	r3, [pc, #320]	; (8009be8 <xTaskIncrementTick+0x14c>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f040 808b 	bne.w	8009bc6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ab0:	4b4e      	ldr	r3, [pc, #312]	; (8009bec <xTaskIncrementTick+0x150>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009ab8:	4a4c      	ldr	r2, [pc, #304]	; (8009bec <xTaskIncrementTick+0x150>)
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d122      	bne.n	8009b0a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ac4:	4b4a      	ldr	r3, [pc, #296]	; (8009bf0 <xTaskIncrementTick+0x154>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00c      	beq.n	8009ae8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad2:	b672      	cpsid	i
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	b662      	cpsie	i
 8009ae2:	603b      	str	r3, [r7, #0]
}
 8009ae4:	bf00      	nop
 8009ae6:	e7fe      	b.n	8009ae6 <xTaskIncrementTick+0x4a>
 8009ae8:	4b41      	ldr	r3, [pc, #260]	; (8009bf0 <xTaskIncrementTick+0x154>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	60fb      	str	r3, [r7, #12]
 8009aee:	4b41      	ldr	r3, [pc, #260]	; (8009bf4 <xTaskIncrementTick+0x158>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a3f      	ldr	r2, [pc, #252]	; (8009bf0 <xTaskIncrementTick+0x154>)
 8009af4:	6013      	str	r3, [r2, #0]
 8009af6:	4a3f      	ldr	r2, [pc, #252]	; (8009bf4 <xTaskIncrementTick+0x158>)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6013      	str	r3, [r2, #0]
 8009afc:	4b3e      	ldr	r3, [pc, #248]	; (8009bf8 <xTaskIncrementTick+0x15c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3301      	adds	r3, #1
 8009b02:	4a3d      	ldr	r2, [pc, #244]	; (8009bf8 <xTaskIncrementTick+0x15c>)
 8009b04:	6013      	str	r3, [r2, #0]
 8009b06:	f000 fadf 	bl	800a0c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b0a:	4b3c      	ldr	r3, [pc, #240]	; (8009bfc <xTaskIncrementTick+0x160>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d349      	bcc.n	8009ba8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b14:	4b36      	ldr	r3, [pc, #216]	; (8009bf0 <xTaskIncrementTick+0x154>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d104      	bne.n	8009b28 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b1e:	4b37      	ldr	r3, [pc, #220]	; (8009bfc <xTaskIncrementTick+0x160>)
 8009b20:	f04f 32ff 	mov.w	r2, #4294967295
 8009b24:	601a      	str	r2, [r3, #0]
					break;
 8009b26:	e03f      	b.n	8009ba8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b28:	4b31      	ldr	r3, [pc, #196]	; (8009bf0 <xTaskIncrementTick+0x154>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b38:	693a      	ldr	r2, [r7, #16]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d203      	bcs.n	8009b48 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b40:	4a2e      	ldr	r2, [pc, #184]	; (8009bfc <xTaskIncrementTick+0x160>)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b46:	e02f      	b.n	8009ba8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7fe fc0b 	bl	8008368 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d004      	beq.n	8009b64 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	3318      	adds	r3, #24
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe fc02 	bl	8008368 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b68:	4b25      	ldr	r3, [pc, #148]	; (8009c00 <xTaskIncrementTick+0x164>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d903      	bls.n	8009b78 <xTaskIncrementTick+0xdc>
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b74:	4a22      	ldr	r2, [pc, #136]	; (8009c00 <xTaskIncrementTick+0x164>)
 8009b76:	6013      	str	r3, [r2, #0]
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4a1f      	ldr	r2, [pc, #124]	; (8009c04 <xTaskIncrementTick+0x168>)
 8009b86:	441a      	add	r2, r3
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	4610      	mov	r0, r2
 8009b90:	f7fe fb8d 	bl	80082ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b98:	4b1b      	ldr	r3, [pc, #108]	; (8009c08 <xTaskIncrementTick+0x16c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d3b8      	bcc.n	8009b14 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ba6:	e7b5      	b.n	8009b14 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ba8:	4b17      	ldr	r3, [pc, #92]	; (8009c08 <xTaskIncrementTick+0x16c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bae:	4915      	ldr	r1, [pc, #84]	; (8009c04 <xTaskIncrementTick+0x168>)
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	440b      	add	r3, r1
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d907      	bls.n	8009bd0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	617b      	str	r3, [r7, #20]
 8009bc4:	e004      	b.n	8009bd0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009bc6:	4b11      	ldr	r3, [pc, #68]	; (8009c0c <xTaskIncrementTick+0x170>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	4a0f      	ldr	r2, [pc, #60]	; (8009c0c <xTaskIncrementTick+0x170>)
 8009bce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009bd0:	4b0f      	ldr	r3, [pc, #60]	; (8009c10 <xTaskIncrementTick+0x174>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d001      	beq.n	8009bdc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009bdc:	697b      	ldr	r3, [r7, #20]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3718      	adds	r7, #24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	20000f34 	.word	0x20000f34
 8009bec:	20000f10 	.word	0x20000f10
 8009bf0:	20000ec4 	.word	0x20000ec4
 8009bf4:	20000ec8 	.word	0x20000ec8
 8009bf8:	20000f24 	.word	0x20000f24
 8009bfc:	20000f2c 	.word	0x20000f2c
 8009c00:	20000f14 	.word	0x20000f14
 8009c04:	20000a3c 	.word	0x20000a3c
 8009c08:	20000a38 	.word	0x20000a38
 8009c0c:	20000f1c 	.word	0x20000f1c
 8009c10:	20000f20 	.word	0x20000f20

08009c14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c1a:	4b29      	ldr	r3, [pc, #164]	; (8009cc0 <vTaskSwitchContext+0xac>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c22:	4b28      	ldr	r3, [pc, #160]	; (8009cc4 <vTaskSwitchContext+0xb0>)
 8009c24:	2201      	movs	r2, #1
 8009c26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c28:	e043      	b.n	8009cb2 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8009c2a:	4b26      	ldr	r3, [pc, #152]	; (8009cc4 <vTaskSwitchContext+0xb0>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c30:	4b25      	ldr	r3, [pc, #148]	; (8009cc8 <vTaskSwitchContext+0xb4>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	60fb      	str	r3, [r7, #12]
 8009c36:	e012      	b.n	8009c5e <vTaskSwitchContext+0x4a>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d10c      	bne.n	8009c58 <vTaskSwitchContext+0x44>
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c42:	b672      	cpsid	i
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	b662      	cpsie	i
 8009c52:	607b      	str	r3, [r7, #4]
}
 8009c54:	bf00      	nop
 8009c56:	e7fe      	b.n	8009c56 <vTaskSwitchContext+0x42>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	60fb      	str	r3, [r7, #12]
 8009c5e:	491b      	ldr	r1, [pc, #108]	; (8009ccc <vTaskSwitchContext+0xb8>)
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	4613      	mov	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	440b      	add	r3, r1
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0e2      	beq.n	8009c38 <vTaskSwitchContext+0x24>
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	4613      	mov	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4a13      	ldr	r2, [pc, #76]	; (8009ccc <vTaskSwitchContext+0xb8>)
 8009c7e:	4413      	add	r3, r2
 8009c80:	60bb      	str	r3, [r7, #8]
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	605a      	str	r2, [r3, #4]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	685a      	ldr	r2, [r3, #4]
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	3308      	adds	r3, #8
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d104      	bne.n	8009ca2 <vTaskSwitchContext+0x8e>
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	605a      	str	r2, [r3, #4]
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	4a09      	ldr	r2, [pc, #36]	; (8009cd0 <vTaskSwitchContext+0xbc>)
 8009caa:	6013      	str	r3, [r2, #0]
 8009cac:	4a06      	ldr	r2, [pc, #24]	; (8009cc8 <vTaskSwitchContext+0xb4>)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6013      	str	r3, [r2, #0]
}
 8009cb2:	bf00      	nop
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	20000f34 	.word	0x20000f34
 8009cc4:	20000f20 	.word	0x20000f20
 8009cc8:	20000f14 	.word	0x20000f14
 8009ccc:	20000a3c 	.word	0x20000a3c
 8009cd0:	20000a38 	.word	0x20000a38

08009cd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10c      	bne.n	8009cfe <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce8:	b672      	cpsid	i
 8009cea:	f383 8811 	msr	BASEPRI, r3
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	b662      	cpsie	i
 8009cf8:	60fb      	str	r3, [r7, #12]
}
 8009cfa:	bf00      	nop
 8009cfc:	e7fe      	b.n	8009cfc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009cfe:	4b07      	ldr	r3, [pc, #28]	; (8009d1c <vTaskPlaceOnEventList+0x48>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3318      	adds	r3, #24
 8009d04:	4619      	mov	r1, r3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7fe faf5 	bl	80082f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d0c:	2101      	movs	r1, #1
 8009d0e:	6838      	ldr	r0, [r7, #0]
 8009d10:	f000 fb8c 	bl	800a42c <prvAddCurrentTaskToDelayedList>
}
 8009d14:	bf00      	nop
 8009d16:	3710      	adds	r7, #16
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	20000a38 	.word	0x20000a38

08009d20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d10c      	bne.n	8009d4c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8009d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d36:	b672      	cpsid	i
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	b662      	cpsie	i
 8009d46:	617b      	str	r3, [r7, #20]
}
 8009d48:	bf00      	nop
 8009d4a:	e7fe      	b.n	8009d4a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d4c:	4b0a      	ldr	r3, [pc, #40]	; (8009d78 <vTaskPlaceOnEventListRestricted+0x58>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3318      	adds	r3, #24
 8009d52:	4619      	mov	r1, r3
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f7fe faaa 	bl	80082ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d002      	beq.n	8009d66 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8009d60:	f04f 33ff 	mov.w	r3, #4294967295
 8009d64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009d66:	6879      	ldr	r1, [r7, #4]
 8009d68:	68b8      	ldr	r0, [r7, #8]
 8009d6a:	f000 fb5f 	bl	800a42c <prvAddCurrentTaskToDelayedList>
	}
 8009d6e:	bf00      	nop
 8009d70:	3718      	adds	r7, #24
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	20000a38 	.word	0x20000a38

08009d7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b086      	sub	sp, #24
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d10c      	bne.n	8009dac <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d96:	b672      	cpsid	i
 8009d98:	f383 8811 	msr	BASEPRI, r3
 8009d9c:	f3bf 8f6f 	isb	sy
 8009da0:	f3bf 8f4f 	dsb	sy
 8009da4:	b662      	cpsie	i
 8009da6:	60fb      	str	r3, [r7, #12]
}
 8009da8:	bf00      	nop
 8009daa:	e7fe      	b.n	8009daa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	3318      	adds	r3, #24
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fe fad9 	bl	8008368 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009db6:	4b1e      	ldr	r3, [pc, #120]	; (8009e30 <xTaskRemoveFromEventList+0xb4>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d11d      	bne.n	8009dfa <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fe fad0 	bl	8008368 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dcc:	4b19      	ldr	r3, [pc, #100]	; (8009e34 <xTaskRemoveFromEventList+0xb8>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d903      	bls.n	8009ddc <xTaskRemoveFromEventList+0x60>
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd8:	4a16      	ldr	r2, [pc, #88]	; (8009e34 <xTaskRemoveFromEventList+0xb8>)
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de0:	4613      	mov	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4413      	add	r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	4a13      	ldr	r2, [pc, #76]	; (8009e38 <xTaskRemoveFromEventList+0xbc>)
 8009dea:	441a      	add	r2, r3
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	3304      	adds	r3, #4
 8009df0:	4619      	mov	r1, r3
 8009df2:	4610      	mov	r0, r2
 8009df4:	f7fe fa5b 	bl	80082ae <vListInsertEnd>
 8009df8:	e005      	b.n	8009e06 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	3318      	adds	r3, #24
 8009dfe:	4619      	mov	r1, r3
 8009e00:	480e      	ldr	r0, [pc, #56]	; (8009e3c <xTaskRemoveFromEventList+0xc0>)
 8009e02:	f7fe fa54 	bl	80082ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e0a:	4b0d      	ldr	r3, [pc, #52]	; (8009e40 <xTaskRemoveFromEventList+0xc4>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d905      	bls.n	8009e20 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e14:	2301      	movs	r3, #1
 8009e16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e18:	4b0a      	ldr	r3, [pc, #40]	; (8009e44 <xTaskRemoveFromEventList+0xc8>)
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	e001      	b.n	8009e24 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009e20:	2300      	movs	r3, #0
 8009e22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e24:	697b      	ldr	r3, [r7, #20]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3718      	adds	r7, #24
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	20000f34 	.word	0x20000f34
 8009e34:	20000f14 	.word	0x20000f14
 8009e38:	20000a3c 	.word	0x20000a3c
 8009e3c:	20000ecc 	.word	0x20000ecc
 8009e40:	20000a38 	.word	0x20000a38
 8009e44:	20000f20 	.word	0x20000f20

08009e48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e50:	4b06      	ldr	r3, [pc, #24]	; (8009e6c <vTaskInternalSetTimeOutState+0x24>)
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e58:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <vTaskInternalSetTimeOutState+0x28>)
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	605a      	str	r2, [r3, #4]
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	20000f24 	.word	0x20000f24
 8009e70:	20000f10 	.word	0x20000f10

08009e74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b088      	sub	sp, #32
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d10c      	bne.n	8009e9e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e88:	b672      	cpsid	i
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	b662      	cpsie	i
 8009e98:	613b      	str	r3, [r7, #16]
}
 8009e9a:	bf00      	nop
 8009e9c:	e7fe      	b.n	8009e9c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10c      	bne.n	8009ebe <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea8:	b672      	cpsid	i
 8009eaa:	f383 8811 	msr	BASEPRI, r3
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	b662      	cpsie	i
 8009eb8:	60fb      	str	r3, [r7, #12]
}
 8009eba:	bf00      	nop
 8009ebc:	e7fe      	b.n	8009ebc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009ebe:	f000 ff75 	bl	800adac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ec2:	4b1d      	ldr	r3, [pc, #116]	; (8009f38 <xTaskCheckForTimeOut+0xc4>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	69ba      	ldr	r2, [r7, #24]
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eda:	d102      	bne.n	8009ee2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009edc:	2300      	movs	r3, #0
 8009ede:	61fb      	str	r3, [r7, #28]
 8009ee0:	e023      	b.n	8009f2a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	4b15      	ldr	r3, [pc, #84]	; (8009f3c <xTaskCheckForTimeOut+0xc8>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d007      	beq.n	8009efe <xTaskCheckForTimeOut+0x8a>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	69ba      	ldr	r2, [r7, #24]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d302      	bcc.n	8009efe <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	61fb      	str	r3, [r7, #28]
 8009efc:	e015      	b.n	8009f2a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	697a      	ldr	r2, [r7, #20]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d20b      	bcs.n	8009f20 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	1ad2      	subs	r2, r2, r3
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f7ff ff97 	bl	8009e48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	61fb      	str	r3, [r7, #28]
 8009f1e:	e004      	b.n	8009f2a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	2200      	movs	r2, #0
 8009f24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f26:	2301      	movs	r3, #1
 8009f28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f2a:	f000 ff73 	bl	800ae14 <vPortExitCritical>

	return xReturn;
 8009f2e:	69fb      	ldr	r3, [r7, #28]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3720      	adds	r7, #32
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	20000f10 	.word	0x20000f10
 8009f3c:	20000f24 	.word	0x20000f24

08009f40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f40:	b480      	push	{r7}
 8009f42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f44:	4b03      	ldr	r3, [pc, #12]	; (8009f54 <vTaskMissedYield+0x14>)
 8009f46:	2201      	movs	r2, #1
 8009f48:	601a      	str	r2, [r3, #0]
}
 8009f4a:	bf00      	nop
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr
 8009f54:	20000f20 	.word	0x20000f20

08009f58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f60:	f000 f852 	bl	800a008 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f64:	4b06      	ldr	r3, [pc, #24]	; (8009f80 <prvIdleTask+0x28>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d9f9      	bls.n	8009f60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009f6c:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <prvIdleTask+0x2c>)
 8009f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	f3bf 8f4f 	dsb	sy
 8009f78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009f7c:	e7f0      	b.n	8009f60 <prvIdleTask+0x8>
 8009f7e:	bf00      	nop
 8009f80:	20000a3c 	.word	0x20000a3c
 8009f84:	e000ed04 	.word	0xe000ed04

08009f88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f8e:	2300      	movs	r3, #0
 8009f90:	607b      	str	r3, [r7, #4]
 8009f92:	e00c      	b.n	8009fae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	4613      	mov	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4413      	add	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4a12      	ldr	r2, [pc, #72]	; (8009fe8 <prvInitialiseTaskLists+0x60>)
 8009fa0:	4413      	add	r3, r2
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fe f956 	bl	8008254 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	3301      	adds	r3, #1
 8009fac:	607b      	str	r3, [r7, #4]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2b37      	cmp	r3, #55	; 0x37
 8009fb2:	d9ef      	bls.n	8009f94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009fb4:	480d      	ldr	r0, [pc, #52]	; (8009fec <prvInitialiseTaskLists+0x64>)
 8009fb6:	f7fe f94d 	bl	8008254 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009fba:	480d      	ldr	r0, [pc, #52]	; (8009ff0 <prvInitialiseTaskLists+0x68>)
 8009fbc:	f7fe f94a 	bl	8008254 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009fc0:	480c      	ldr	r0, [pc, #48]	; (8009ff4 <prvInitialiseTaskLists+0x6c>)
 8009fc2:	f7fe f947 	bl	8008254 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009fc6:	480c      	ldr	r0, [pc, #48]	; (8009ff8 <prvInitialiseTaskLists+0x70>)
 8009fc8:	f7fe f944 	bl	8008254 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009fcc:	480b      	ldr	r0, [pc, #44]	; (8009ffc <prvInitialiseTaskLists+0x74>)
 8009fce:	f7fe f941 	bl	8008254 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009fd2:	4b0b      	ldr	r3, [pc, #44]	; (800a000 <prvInitialiseTaskLists+0x78>)
 8009fd4:	4a05      	ldr	r2, [pc, #20]	; (8009fec <prvInitialiseTaskLists+0x64>)
 8009fd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009fd8:	4b0a      	ldr	r3, [pc, #40]	; (800a004 <prvInitialiseTaskLists+0x7c>)
 8009fda:	4a05      	ldr	r2, [pc, #20]	; (8009ff0 <prvInitialiseTaskLists+0x68>)
 8009fdc:	601a      	str	r2, [r3, #0]
}
 8009fde:	bf00      	nop
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20000a3c 	.word	0x20000a3c
 8009fec:	20000e9c 	.word	0x20000e9c
 8009ff0:	20000eb0 	.word	0x20000eb0
 8009ff4:	20000ecc 	.word	0x20000ecc
 8009ff8:	20000ee0 	.word	0x20000ee0
 8009ffc:	20000ef8 	.word	0x20000ef8
 800a000:	20000ec4 	.word	0x20000ec4
 800a004:	20000ec8 	.word	0x20000ec8

0800a008 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a00e:	e019      	b.n	800a044 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a010:	f000 fecc 	bl	800adac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a014:	4b10      	ldr	r3, [pc, #64]	; (800a058 <prvCheckTasksWaitingTermination+0x50>)
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	3304      	adds	r3, #4
 800a020:	4618      	mov	r0, r3
 800a022:	f7fe f9a1 	bl	8008368 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a026:	4b0d      	ldr	r3, [pc, #52]	; (800a05c <prvCheckTasksWaitingTermination+0x54>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	3b01      	subs	r3, #1
 800a02c:	4a0b      	ldr	r2, [pc, #44]	; (800a05c <prvCheckTasksWaitingTermination+0x54>)
 800a02e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a030:	4b0b      	ldr	r3, [pc, #44]	; (800a060 <prvCheckTasksWaitingTermination+0x58>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3b01      	subs	r3, #1
 800a036:	4a0a      	ldr	r2, [pc, #40]	; (800a060 <prvCheckTasksWaitingTermination+0x58>)
 800a038:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a03a:	f000 feeb 	bl	800ae14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f810 	bl	800a064 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a044:	4b06      	ldr	r3, [pc, #24]	; (800a060 <prvCheckTasksWaitingTermination+0x58>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1e1      	bne.n	800a010 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a04c:	bf00      	nop
 800a04e:	bf00      	nop
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	20000ee0 	.word	0x20000ee0
 800a05c:	20000f0c 	.word	0x20000f0c
 800a060:	20000ef4 	.word	0x20000ef4

0800a064 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a072:	2b00      	cmp	r3, #0
 800a074:	d108      	bne.n	800a088 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a07a:	4618      	mov	r0, r3
 800a07c:	f001 f88c 	bl	800b198 <vPortFree>
				vPortFree( pxTCB );
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f001 f889 	bl	800b198 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a086:	e01a      	b.n	800a0be <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d103      	bne.n	800a09a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f001 f880 	bl	800b198 <vPortFree>
	}
 800a098:	e011      	b.n	800a0be <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d00c      	beq.n	800a0be <prvDeleteTCB+0x5a>
	__asm volatile
 800a0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a8:	b672      	cpsid	i
 800a0aa:	f383 8811 	msr	BASEPRI, r3
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	f3bf 8f4f 	dsb	sy
 800a0b6:	b662      	cpsie	i
 800a0b8:	60fb      	str	r3, [r7, #12]
}
 800a0ba:	bf00      	nop
 800a0bc:	e7fe      	b.n	800a0bc <prvDeleteTCB+0x58>
	}
 800a0be:	bf00      	nop
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
	...

0800a0c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0ce:	4b0c      	ldr	r3, [pc, #48]	; (800a100 <prvResetNextTaskUnblockTime+0x38>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d104      	bne.n	800a0e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a0d8:	4b0a      	ldr	r3, [pc, #40]	; (800a104 <prvResetNextTaskUnblockTime+0x3c>)
 800a0da:	f04f 32ff 	mov.w	r2, #4294967295
 800a0de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a0e0:	e008      	b.n	800a0f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0e2:	4b07      	ldr	r3, [pc, #28]	; (800a100 <prvResetNextTaskUnblockTime+0x38>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	4a04      	ldr	r2, [pc, #16]	; (800a104 <prvResetNextTaskUnblockTime+0x3c>)
 800a0f2:	6013      	str	r3, [r2, #0]
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	20000ec4 	.word	0x20000ec4
 800a104:	20000f2c 	.word	0x20000f2c

0800a108 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a10e:	4b0b      	ldr	r3, [pc, #44]	; (800a13c <xTaskGetSchedulerState+0x34>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d102      	bne.n	800a11c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a116:	2301      	movs	r3, #1
 800a118:	607b      	str	r3, [r7, #4]
 800a11a:	e008      	b.n	800a12e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a11c:	4b08      	ldr	r3, [pc, #32]	; (800a140 <xTaskGetSchedulerState+0x38>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d102      	bne.n	800a12a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a124:	2302      	movs	r3, #2
 800a126:	607b      	str	r3, [r7, #4]
 800a128:	e001      	b.n	800a12e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a12a:	2300      	movs	r3, #0
 800a12c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a12e:	687b      	ldr	r3, [r7, #4]
	}
 800a130:	4618      	mov	r0, r3
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	20000f18 	.word	0x20000f18
 800a140:	20000f34 	.word	0x20000f34

0800a144 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a150:	2300      	movs	r3, #0
 800a152:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d051      	beq.n	800a1fe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a15e:	4b2a      	ldr	r3, [pc, #168]	; (800a208 <xTaskPriorityInherit+0xc4>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a164:	429a      	cmp	r2, r3
 800a166:	d241      	bcs.n	800a1ec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	699b      	ldr	r3, [r3, #24]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	db06      	blt.n	800a17e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a170:	4b25      	ldr	r3, [pc, #148]	; (800a208 <xTaskPriorityInherit+0xc4>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a176:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	6959      	ldr	r1, [r3, #20]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a186:	4613      	mov	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4413      	add	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	4a1f      	ldr	r2, [pc, #124]	; (800a20c <xTaskPriorityInherit+0xc8>)
 800a190:	4413      	add	r3, r2
 800a192:	4299      	cmp	r1, r3
 800a194:	d122      	bne.n	800a1dc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	3304      	adds	r3, #4
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7fe f8e4 	bl	8008368 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a1a0:	4b19      	ldr	r3, [pc, #100]	; (800a208 <xTaskPriorityInherit+0xc4>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ae:	4b18      	ldr	r3, [pc, #96]	; (800a210 <xTaskPriorityInherit+0xcc>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d903      	bls.n	800a1be <xTaskPriorityInherit+0x7a>
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ba:	4a15      	ldr	r2, [pc, #84]	; (800a210 <xTaskPriorityInherit+0xcc>)
 800a1bc:	6013      	str	r3, [r2, #0]
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	4413      	add	r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4a10      	ldr	r2, [pc, #64]	; (800a20c <xTaskPriorityInherit+0xc8>)
 800a1cc:	441a      	add	r2, r3
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	3304      	adds	r3, #4
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	4610      	mov	r0, r2
 800a1d6:	f7fe f86a 	bl	80082ae <vListInsertEnd>
 800a1da:	e004      	b.n	800a1e6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a1dc:	4b0a      	ldr	r3, [pc, #40]	; (800a208 <xTaskPriorityInherit+0xc4>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	60fb      	str	r3, [r7, #12]
 800a1ea:	e008      	b.n	800a1fe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1f0:	4b05      	ldr	r3, [pc, #20]	; (800a208 <xTaskPriorityInherit+0xc4>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d201      	bcs.n	800a1fe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
	}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	20000a38 	.word	0x20000a38
 800a20c:	20000a3c 	.word	0x20000a3c
 800a210:	20000f14 	.word	0x20000f14

0800a214 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a220:	2300      	movs	r3, #0
 800a222:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d05a      	beq.n	800a2e0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a22a:	4b30      	ldr	r3, [pc, #192]	; (800a2ec <xTaskPriorityDisinherit+0xd8>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	693a      	ldr	r2, [r7, #16]
 800a230:	429a      	cmp	r2, r3
 800a232:	d00c      	beq.n	800a24e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a238:	b672      	cpsid	i
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	b662      	cpsie	i
 800a248:	60fb      	str	r3, [r7, #12]
}
 800a24a:	bf00      	nop
 800a24c:	e7fe      	b.n	800a24c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a252:	2b00      	cmp	r3, #0
 800a254:	d10c      	bne.n	800a270 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25a:	b672      	cpsid	i
 800a25c:	f383 8811 	msr	BASEPRI, r3
 800a260:	f3bf 8f6f 	isb	sy
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	b662      	cpsie	i
 800a26a:	60bb      	str	r3, [r7, #8]
}
 800a26c:	bf00      	nop
 800a26e:	e7fe      	b.n	800a26e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a274:	1e5a      	subs	r2, r3, #1
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a282:	429a      	cmp	r2, r3
 800a284:	d02c      	beq.n	800a2e0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d128      	bne.n	800a2e0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	3304      	adds	r3, #4
 800a292:	4618      	mov	r0, r3
 800a294:	f7fe f868 	bl	8008368 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b0:	4b0f      	ldr	r3, [pc, #60]	; (800a2f0 <xTaskPriorityDisinherit+0xdc>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d903      	bls.n	800a2c0 <xTaskPriorityDisinherit+0xac>
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2bc:	4a0c      	ldr	r2, [pc, #48]	; (800a2f0 <xTaskPriorityDisinherit+0xdc>)
 800a2be:	6013      	str	r3, [r2, #0]
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4a09      	ldr	r2, [pc, #36]	; (800a2f4 <xTaskPriorityDisinherit+0xe0>)
 800a2ce:	441a      	add	r2, r3
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	f7fd ffe9 	bl	80082ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a2e0:	697b      	ldr	r3, [r7, #20]
	}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3718      	adds	r7, #24
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	20000a38 	.word	0x20000a38
 800a2f0:	20000f14 	.word	0x20000f14
 800a2f4:	20000a3c 	.word	0x20000a3c

0800a2f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b088      	sub	sp, #32
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a306:	2301      	movs	r3, #1
 800a308:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d06e      	beq.n	800a3ee <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10c      	bne.n	800a332 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31c:	b672      	cpsid	i
 800a31e:	f383 8811 	msr	BASEPRI, r3
 800a322:	f3bf 8f6f 	isb	sy
 800a326:	f3bf 8f4f 	dsb	sy
 800a32a:	b662      	cpsie	i
 800a32c:	60fb      	str	r3, [r7, #12]
}
 800a32e:	bf00      	nop
 800a330:	e7fe      	b.n	800a330 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a336:	683a      	ldr	r2, [r7, #0]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d902      	bls.n	800a342 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	61fb      	str	r3, [r7, #28]
 800a340:	e002      	b.n	800a348 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a346:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34c:	69fa      	ldr	r2, [r7, #28]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d04d      	beq.n	800a3ee <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a356:	697a      	ldr	r2, [r7, #20]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d148      	bne.n	800a3ee <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a35c:	4b26      	ldr	r3, [pc, #152]	; (800a3f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	69ba      	ldr	r2, [r7, #24]
 800a362:	429a      	cmp	r2, r3
 800a364:	d10c      	bne.n	800a380 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800a366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36a:	b672      	cpsid	i
 800a36c:	f383 8811 	msr	BASEPRI, r3
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	b662      	cpsie	i
 800a37a:	60bb      	str	r3, [r7, #8]
}
 800a37c:	bf00      	nop
 800a37e:	e7fe      	b.n	800a37e <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a384:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	69fa      	ldr	r2, [r7, #28]
 800a38a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a38c:	69bb      	ldr	r3, [r7, #24]
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	2b00      	cmp	r3, #0
 800a392:	db04      	blt.n	800a39e <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	6959      	ldr	r1, [r3, #20]
 800a3a2:	693a      	ldr	r2, [r7, #16]
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	4413      	add	r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	4a13      	ldr	r2, [pc, #76]	; (800a3fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a3ae:	4413      	add	r3, r2
 800a3b0:	4299      	cmp	r1, r3
 800a3b2:	d11c      	bne.n	800a3ee <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	3304      	adds	r3, #4
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7fd ffd5 	bl	8008368 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c2:	4b0f      	ldr	r3, [pc, #60]	; (800a400 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d903      	bls.n	800a3d2 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ce:	4a0c      	ldr	r2, [pc, #48]	; (800a400 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a3d0:	6013      	str	r3, [r2, #0]
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	4413      	add	r3, r2
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	4a07      	ldr	r2, [pc, #28]	; (800a3fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a3e0:	441a      	add	r2, r3
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	3304      	adds	r3, #4
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	4610      	mov	r0, r2
 800a3ea:	f7fd ff60 	bl	80082ae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a3ee:	bf00      	nop
 800a3f0:	3720      	adds	r7, #32
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	20000a38 	.word	0x20000a38
 800a3fc:	20000a3c 	.word	0x20000a3c
 800a400:	20000f14 	.word	0x20000f14

0800a404 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a404:	b480      	push	{r7}
 800a406:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a408:	4b07      	ldr	r3, [pc, #28]	; (800a428 <pvTaskIncrementMutexHeldCount+0x24>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d004      	beq.n	800a41a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a410:	4b05      	ldr	r3, [pc, #20]	; (800a428 <pvTaskIncrementMutexHeldCount+0x24>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a416:	3201      	adds	r2, #1
 800a418:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a41a:	4b03      	ldr	r3, [pc, #12]	; (800a428 <pvTaskIncrementMutexHeldCount+0x24>)
 800a41c:	681b      	ldr	r3, [r3, #0]
	}
 800a41e:	4618      	mov	r0, r3
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr
 800a428:	20000a38 	.word	0x20000a38

0800a42c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a436:	4b21      	ldr	r3, [pc, #132]	; (800a4bc <prvAddCurrentTaskToDelayedList+0x90>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a43c:	4b20      	ldr	r3, [pc, #128]	; (800a4c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	3304      	adds	r3, #4
 800a442:	4618      	mov	r0, r3
 800a444:	f7fd ff90 	bl	8008368 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a44e:	d10a      	bne.n	800a466 <prvAddCurrentTaskToDelayedList+0x3a>
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d007      	beq.n	800a466 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a456:	4b1a      	ldr	r3, [pc, #104]	; (800a4c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	3304      	adds	r3, #4
 800a45c:	4619      	mov	r1, r3
 800a45e:	4819      	ldr	r0, [pc, #100]	; (800a4c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a460:	f7fd ff25 	bl	80082ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a464:	e026      	b.n	800a4b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4413      	add	r3, r2
 800a46c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a46e:	4b14      	ldr	r3, [pc, #80]	; (800a4c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d209      	bcs.n	800a492 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a47e:	4b12      	ldr	r3, [pc, #72]	; (800a4c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	4b0f      	ldr	r3, [pc, #60]	; (800a4c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	3304      	adds	r3, #4
 800a488:	4619      	mov	r1, r3
 800a48a:	4610      	mov	r0, r2
 800a48c:	f7fd ff33 	bl	80082f6 <vListInsert>
}
 800a490:	e010      	b.n	800a4b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a492:	4b0e      	ldr	r3, [pc, #56]	; (800a4cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	4b0a      	ldr	r3, [pc, #40]	; (800a4c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	3304      	adds	r3, #4
 800a49c:	4619      	mov	r1, r3
 800a49e:	4610      	mov	r0, r2
 800a4a0:	f7fd ff29 	bl	80082f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a4a4:	4b0a      	ldr	r3, [pc, #40]	; (800a4d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d202      	bcs.n	800a4b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a4ae:	4a08      	ldr	r2, [pc, #32]	; (800a4d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	6013      	str	r3, [r2, #0]
}
 800a4b4:	bf00      	nop
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	20000f10 	.word	0x20000f10
 800a4c0:	20000a38 	.word	0x20000a38
 800a4c4:	20000ef8 	.word	0x20000ef8
 800a4c8:	20000ec8 	.word	0x20000ec8
 800a4cc:	20000ec4 	.word	0x20000ec4
 800a4d0:	20000f2c 	.word	0x20000f2c

0800a4d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b08a      	sub	sp, #40	; 0x28
 800a4d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a4de:	f000 fb15 	bl	800ab0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a4e2:	4b1d      	ldr	r3, [pc, #116]	; (800a558 <xTimerCreateTimerTask+0x84>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d021      	beq.n	800a52e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a4f2:	1d3a      	adds	r2, r7, #4
 800a4f4:	f107 0108 	add.w	r1, r7, #8
 800a4f8:	f107 030c 	add.w	r3, r7, #12
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fd fe8f 	bl	8008220 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a502:	6879      	ldr	r1, [r7, #4]
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	9202      	str	r2, [sp, #8]
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	2302      	movs	r3, #2
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	2300      	movs	r3, #0
 800a512:	460a      	mov	r2, r1
 800a514:	4911      	ldr	r1, [pc, #68]	; (800a55c <xTimerCreateTimerTask+0x88>)
 800a516:	4812      	ldr	r0, [pc, #72]	; (800a560 <xTimerCreateTimerTask+0x8c>)
 800a518:	f7fe ffa6 	bl	8009468 <xTaskCreateStatic>
 800a51c:	4603      	mov	r3, r0
 800a51e:	4a11      	ldr	r2, [pc, #68]	; (800a564 <xTimerCreateTimerTask+0x90>)
 800a520:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a522:	4b10      	ldr	r3, [pc, #64]	; (800a564 <xTimerCreateTimerTask+0x90>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d001      	beq.n	800a52e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a52a:	2301      	movs	r3, #1
 800a52c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d10c      	bne.n	800a54e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800a534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a538:	b672      	cpsid	i
 800a53a:	f383 8811 	msr	BASEPRI, r3
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f3bf 8f4f 	dsb	sy
 800a546:	b662      	cpsie	i
 800a548:	613b      	str	r3, [r7, #16]
}
 800a54a:	bf00      	nop
 800a54c:	e7fe      	b.n	800a54c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a54e:	697b      	ldr	r3, [r7, #20]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3718      	adds	r7, #24
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	20000f68 	.word	0x20000f68
 800a55c:	0800b4bc 	.word	0x0800b4bc
 800a560:	0800a6a5 	.word	0x0800a6a5
 800a564:	20000f6c 	.word	0x20000f6c

0800a568 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b08a      	sub	sp, #40	; 0x28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
 800a574:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a576:	2300      	movs	r3, #0
 800a578:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10c      	bne.n	800a59a <xTimerGenericCommand+0x32>
	__asm volatile
 800a580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a584:	b672      	cpsid	i
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	b662      	cpsie	i
 800a594:	623b      	str	r3, [r7, #32]
}
 800a596:	bf00      	nop
 800a598:	e7fe      	b.n	800a598 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a59a:	4b1a      	ldr	r3, [pc, #104]	; (800a604 <xTimerGenericCommand+0x9c>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d02a      	beq.n	800a5f8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	2b05      	cmp	r3, #5
 800a5b2:	dc18      	bgt.n	800a5e6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a5b4:	f7ff fda8 	bl	800a108 <xTaskGetSchedulerState>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d109      	bne.n	800a5d2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a5be:	4b11      	ldr	r3, [pc, #68]	; (800a604 <xTimerGenericCommand+0x9c>)
 800a5c0:	6818      	ldr	r0, [r3, #0]
 800a5c2:	f107 0110 	add.w	r1, r7, #16
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ca:	f7fe f8bb 	bl	8008744 <xQueueGenericSend>
 800a5ce:	6278      	str	r0, [r7, #36]	; 0x24
 800a5d0:	e012      	b.n	800a5f8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a5d2:	4b0c      	ldr	r3, [pc, #48]	; (800a604 <xTimerGenericCommand+0x9c>)
 800a5d4:	6818      	ldr	r0, [r3, #0]
 800a5d6:	f107 0110 	add.w	r1, r7, #16
 800a5da:	2300      	movs	r3, #0
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f7fe f8b1 	bl	8008744 <xQueueGenericSend>
 800a5e2:	6278      	str	r0, [r7, #36]	; 0x24
 800a5e4:	e008      	b.n	800a5f8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a5e6:	4b07      	ldr	r3, [pc, #28]	; (800a604 <xTimerGenericCommand+0x9c>)
 800a5e8:	6818      	ldr	r0, [r3, #0]
 800a5ea:	f107 0110 	add.w	r1, r7, #16
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	683a      	ldr	r2, [r7, #0]
 800a5f2:	f7fe f9ad 	bl	8008950 <xQueueGenericSendFromISR>
 800a5f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3728      	adds	r7, #40	; 0x28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	20000f68 	.word	0x20000f68

0800a608 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b088      	sub	sp, #32
 800a60c:	af02      	add	r7, sp, #8
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a612:	4b23      	ldr	r3, [pc, #140]	; (800a6a0 <prvProcessExpiredTimer+0x98>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	3304      	adds	r3, #4
 800a620:	4618      	mov	r0, r3
 800a622:	f7fd fea1 	bl	8008368 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a62c:	f003 0304 	and.w	r3, r3, #4
 800a630:	2b00      	cmp	r3, #0
 800a632:	d024      	beq.n	800a67e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	699a      	ldr	r2, [r3, #24]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	18d1      	adds	r1, r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	6978      	ldr	r0, [r7, #20]
 800a642:	f000 f8d3 	bl	800a7ec <prvInsertTimerInActiveList>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d021      	beq.n	800a690 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a64c:	2300      	movs	r3, #0
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	2300      	movs	r3, #0
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	2100      	movs	r1, #0
 800a656:	6978      	ldr	r0, [r7, #20]
 800a658:	f7ff ff86 	bl	800a568 <xTimerGenericCommand>
 800a65c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d115      	bne.n	800a690 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800a664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a668:	b672      	cpsid	i
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	b662      	cpsie	i
 800a678:	60fb      	str	r3, [r7, #12]
}
 800a67a:	bf00      	nop
 800a67c:	e7fe      	b.n	800a67c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a684:	f023 0301 	bic.w	r3, r3, #1
 800a688:	b2da      	uxtb	r2, r3
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	6a1b      	ldr	r3, [r3, #32]
 800a694:	6978      	ldr	r0, [r7, #20]
 800a696:	4798      	blx	r3
}
 800a698:	bf00      	nop
 800a69a:	3718      	adds	r7, #24
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	20000f60 	.word	0x20000f60

0800a6a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6ac:	f107 0308 	add.w	r3, r7, #8
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f000 f857 	bl	800a764 <prvGetNextExpireTime>
 800a6b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f000 f803 	bl	800a6c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a6c2:	f000 f8d5 	bl	800a870 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6c6:	e7f1      	b.n	800a6ac <prvTimerTask+0x8>

0800a6c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a6d2:	f7ff f913 	bl	80098fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6d6:	f107 0308 	add.w	r3, r7, #8
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 f866 	bl	800a7ac <prvSampleTimeNow>
 800a6e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d130      	bne.n	800a74a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d10a      	bne.n	800a704 <prvProcessTimerOrBlockTask+0x3c>
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d806      	bhi.n	800a704 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a6f6:	f7ff f90f 	bl	8009918 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a6fa:	68f9      	ldr	r1, [r7, #12]
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7ff ff83 	bl	800a608 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a702:	e024      	b.n	800a74e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d008      	beq.n	800a71c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a70a:	4b13      	ldr	r3, [pc, #76]	; (800a758 <prvProcessTimerOrBlockTask+0x90>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d101      	bne.n	800a718 <prvProcessTimerOrBlockTask+0x50>
 800a714:	2301      	movs	r3, #1
 800a716:	e000      	b.n	800a71a <prvProcessTimerOrBlockTask+0x52>
 800a718:	2300      	movs	r3, #0
 800a71a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a71c:	4b0f      	ldr	r3, [pc, #60]	; (800a75c <prvProcessTimerOrBlockTask+0x94>)
 800a71e:	6818      	ldr	r0, [r3, #0]
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	1ad3      	subs	r3, r2, r3
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	4619      	mov	r1, r3
 800a72a:	f7fe fe69 	bl	8009400 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a72e:	f7ff f8f3 	bl	8009918 <xTaskResumeAll>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10a      	bne.n	800a74e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a738:	4b09      	ldr	r3, [pc, #36]	; (800a760 <prvProcessTimerOrBlockTask+0x98>)
 800a73a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a73e:	601a      	str	r2, [r3, #0]
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	f3bf 8f6f 	isb	sy
}
 800a748:	e001      	b.n	800a74e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a74a:	f7ff f8e5 	bl	8009918 <xTaskResumeAll>
}
 800a74e:	bf00      	nop
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	20000f64 	.word	0x20000f64
 800a75c:	20000f68 	.word	0x20000f68
 800a760:	e000ed04 	.word	0xe000ed04

0800a764 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a76c:	4b0e      	ldr	r3, [pc, #56]	; (800a7a8 <prvGetNextExpireTime+0x44>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d101      	bne.n	800a77a <prvGetNextExpireTime+0x16>
 800a776:	2201      	movs	r2, #1
 800a778:	e000      	b.n	800a77c <prvGetNextExpireTime+0x18>
 800a77a:	2200      	movs	r2, #0
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d105      	bne.n	800a794 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a788:	4b07      	ldr	r3, [pc, #28]	; (800a7a8 <prvGetNextExpireTime+0x44>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	60fb      	str	r3, [r7, #12]
 800a792:	e001      	b.n	800a798 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a794:	2300      	movs	r3, #0
 800a796:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a798:	68fb      	ldr	r3, [r7, #12]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3714      	adds	r7, #20
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	20000f60 	.word	0x20000f60

0800a7ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a7b4:	f7ff f950 	bl	8009a58 <xTaskGetTickCount>
 800a7b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a7ba:	4b0b      	ldr	r3, [pc, #44]	; (800a7e8 <prvSampleTimeNow+0x3c>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d205      	bcs.n	800a7d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a7c4:	f000 f93c 	bl	800aa40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	601a      	str	r2, [r3, #0]
 800a7ce:	e002      	b.n	800a7d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a7d6:	4a04      	ldr	r2, [pc, #16]	; (800a7e8 <prvSampleTimeNow+0x3c>)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	20000f70 	.word	0x20000f70

0800a7ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
 800a7f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d812      	bhi.n	800a838 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	1ad2      	subs	r2, r2, r3
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	699b      	ldr	r3, [r3, #24]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d302      	bcc.n	800a826 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a820:	2301      	movs	r3, #1
 800a822:	617b      	str	r3, [r7, #20]
 800a824:	e01b      	b.n	800a85e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a826:	4b10      	ldr	r3, [pc, #64]	; (800a868 <prvInsertTimerInActiveList+0x7c>)
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	3304      	adds	r3, #4
 800a82e:	4619      	mov	r1, r3
 800a830:	4610      	mov	r0, r2
 800a832:	f7fd fd60 	bl	80082f6 <vListInsert>
 800a836:	e012      	b.n	800a85e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d206      	bcs.n	800a84e <prvInsertTimerInActiveList+0x62>
 800a840:	68ba      	ldr	r2, [r7, #8]
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	429a      	cmp	r2, r3
 800a846:	d302      	bcc.n	800a84e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a848:	2301      	movs	r3, #1
 800a84a:	617b      	str	r3, [r7, #20]
 800a84c:	e007      	b.n	800a85e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a84e:	4b07      	ldr	r3, [pc, #28]	; (800a86c <prvInsertTimerInActiveList+0x80>)
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	3304      	adds	r3, #4
 800a856:	4619      	mov	r1, r3
 800a858:	4610      	mov	r0, r2
 800a85a:	f7fd fd4c 	bl	80082f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a85e:	697b      	ldr	r3, [r7, #20]
}
 800a860:	4618      	mov	r0, r3
 800a862:	3718      	adds	r7, #24
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	20000f64 	.word	0x20000f64
 800a86c:	20000f60 	.word	0x20000f60

0800a870 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b08e      	sub	sp, #56	; 0x38
 800a874:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a876:	e0d0      	b.n	800aa1a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	da1a      	bge.n	800a8b4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a87e:	1d3b      	adds	r3, r7, #4
 800a880:	3304      	adds	r3, #4
 800a882:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a886:	2b00      	cmp	r3, #0
 800a888:	d10c      	bne.n	800a8a4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800a88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88e:	b672      	cpsid	i
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	b662      	cpsie	i
 800a89e:	61fb      	str	r3, [r7, #28]
}
 800a8a0:	bf00      	nop
 800a8a2:	e7fe      	b.n	800a8a2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8aa:	6850      	ldr	r0, [r2, #4]
 800a8ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8ae:	6892      	ldr	r2, [r2, #8]
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f2c0 80ae 	blt.w	800aa18 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d004      	beq.n	800a8d2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7fd fd4b 	bl	8008368 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8d2:	463b      	mov	r3, r7
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7ff ff69 	bl	800a7ac <prvSampleTimeNow>
 800a8da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b09      	cmp	r3, #9
 800a8e0:	f200 809b 	bhi.w	800aa1a <prvProcessReceivedCommands+0x1aa>
 800a8e4:	a201      	add	r2, pc, #4	; (adr r2, 800a8ec <prvProcessReceivedCommands+0x7c>)
 800a8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ea:	bf00      	nop
 800a8ec:	0800a915 	.word	0x0800a915
 800a8f0:	0800a915 	.word	0x0800a915
 800a8f4:	0800a915 	.word	0x0800a915
 800a8f8:	0800a98d 	.word	0x0800a98d
 800a8fc:	0800a9a1 	.word	0x0800a9a1
 800a900:	0800a9ef 	.word	0x0800a9ef
 800a904:	0800a915 	.word	0x0800a915
 800a908:	0800a915 	.word	0x0800a915
 800a90c:	0800a98d 	.word	0x0800a98d
 800a910:	0800a9a1 	.word	0x0800a9a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a916:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a91a:	f043 0301 	orr.w	r3, r3, #1
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a922:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	18d1      	adds	r1, r2, r3
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a934:	f7ff ff5a 	bl	800a7ec <prvInsertTimerInActiveList>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d06d      	beq.n	800aa1a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a944:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a94c:	f003 0304 	and.w	r3, r3, #4
 800a950:	2b00      	cmp	r3, #0
 800a952:	d062      	beq.n	800aa1a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	699b      	ldr	r3, [r3, #24]
 800a95a:	441a      	add	r2, r3
 800a95c:	2300      	movs	r3, #0
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	2300      	movs	r3, #0
 800a962:	2100      	movs	r1, #0
 800a964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a966:	f7ff fdff 	bl	800a568 <xTimerGenericCommand>
 800a96a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a96c:	6a3b      	ldr	r3, [r7, #32]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d153      	bne.n	800aa1a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a976:	b672      	cpsid	i
 800a978:	f383 8811 	msr	BASEPRI, r3
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	b662      	cpsie	i
 800a986:	61bb      	str	r3, [r7, #24]
}
 800a988:	bf00      	nop
 800a98a:	e7fe      	b.n	800a98a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a992:	f023 0301 	bic.w	r3, r3, #1
 800a996:	b2da      	uxtb	r2, r3
 800a998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a99e:	e03c      	b.n	800aa1a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9a6:	f043 0301 	orr.w	r3, r3, #1
 800a9aa:	b2da      	uxtb	r2, r3
 800a9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ba:	699b      	ldr	r3, [r3, #24]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10c      	bne.n	800a9da <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800a9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c4:	b672      	cpsid	i
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	b662      	cpsie	i
 800a9d4:	617b      	str	r3, [r7, #20]
}
 800a9d6:	bf00      	nop
 800a9d8:	e7fe      	b.n	800a9d8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9dc:	699a      	ldr	r2, [r3, #24]
 800a9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e0:	18d1      	adds	r1, r2, r3
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9e8:	f7ff ff00 	bl	800a7ec <prvInsertTimerInActiveList>
					break;
 800a9ec:	e015      	b.n	800aa1a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9f4:	f003 0302 	and.w	r3, r3, #2
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d103      	bne.n	800aa04 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800a9fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9fe:	f000 fbcb 	bl	800b198 <vPortFree>
 800aa02:	e00a      	b.n	800aa1a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa0a:	f023 0301 	bic.w	r3, r3, #1
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa16:	e000      	b.n	800aa1a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aa18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa1a:	4b08      	ldr	r3, [pc, #32]	; (800aa3c <prvProcessReceivedCommands+0x1cc>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	1d39      	adds	r1, r7, #4
 800aa20:	2200      	movs	r2, #0
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe f8ca 	bl	8008bbc <xQueueReceive>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f47f af24 	bne.w	800a878 <prvProcessReceivedCommands+0x8>
	}
}
 800aa30:	bf00      	nop
 800aa32:	bf00      	nop
 800aa34:	3730      	adds	r7, #48	; 0x30
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20000f68 	.word	0x20000f68

0800aa40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b088      	sub	sp, #32
 800aa44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa46:	e04a      	b.n	800aade <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa48:	4b2e      	ldr	r3, [pc, #184]	; (800ab04 <prvSwitchTimerLists+0xc4>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa52:	4b2c      	ldr	r3, [pc, #176]	; (800ab04 <prvSwitchTimerLists+0xc4>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	3304      	adds	r3, #4
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7fd fc81 	bl	8008368 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	6a1b      	ldr	r3, [r3, #32]
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa74:	f003 0304 	and.w	r3, r3, #4
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d030      	beq.n	800aade <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	693a      	ldr	r2, [r7, #16]
 800aa82:	4413      	add	r3, r2
 800aa84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d90e      	bls.n	800aaac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	68ba      	ldr	r2, [r7, #8]
 800aa92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa9a:	4b1a      	ldr	r3, [pc, #104]	; (800ab04 <prvSwitchTimerLists+0xc4>)
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	4610      	mov	r0, r2
 800aaa6:	f7fd fc26 	bl	80082f6 <vListInsert>
 800aaaa:	e018      	b.n	800aade <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aaac:	2300      	movs	r3, #0
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	2300      	movs	r3, #0
 800aab2:	693a      	ldr	r2, [r7, #16]
 800aab4:	2100      	movs	r1, #0
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f7ff fd56 	bl	800a568 <xTimerGenericCommand>
 800aabc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10c      	bne.n	800aade <prvSwitchTimerLists+0x9e>
	__asm volatile
 800aac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac8:	b672      	cpsid	i
 800aaca:	f383 8811 	msr	BASEPRI, r3
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	b662      	cpsie	i
 800aad8:	603b      	str	r3, [r7, #0]
}
 800aada:	bf00      	nop
 800aadc:	e7fe      	b.n	800aadc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aade:	4b09      	ldr	r3, [pc, #36]	; (800ab04 <prvSwitchTimerLists+0xc4>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1af      	bne.n	800aa48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aae8:	4b06      	ldr	r3, [pc, #24]	; (800ab04 <prvSwitchTimerLists+0xc4>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aaee:	4b06      	ldr	r3, [pc, #24]	; (800ab08 <prvSwitchTimerLists+0xc8>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a04      	ldr	r2, [pc, #16]	; (800ab04 <prvSwitchTimerLists+0xc4>)
 800aaf4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aaf6:	4a04      	ldr	r2, [pc, #16]	; (800ab08 <prvSwitchTimerLists+0xc8>)
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	6013      	str	r3, [r2, #0]
}
 800aafc:	bf00      	nop
 800aafe:	3718      	adds	r7, #24
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	20000f60 	.word	0x20000f60
 800ab08:	20000f64 	.word	0x20000f64

0800ab0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ab12:	f000 f94b 	bl	800adac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab16:	4b15      	ldr	r3, [pc, #84]	; (800ab6c <prvCheckForValidListAndQueue+0x60>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d120      	bne.n	800ab60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab1e:	4814      	ldr	r0, [pc, #80]	; (800ab70 <prvCheckForValidListAndQueue+0x64>)
 800ab20:	f7fd fb98 	bl	8008254 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab24:	4813      	ldr	r0, [pc, #76]	; (800ab74 <prvCheckForValidListAndQueue+0x68>)
 800ab26:	f7fd fb95 	bl	8008254 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab2a:	4b13      	ldr	r3, [pc, #76]	; (800ab78 <prvCheckForValidListAndQueue+0x6c>)
 800ab2c:	4a10      	ldr	r2, [pc, #64]	; (800ab70 <prvCheckForValidListAndQueue+0x64>)
 800ab2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab30:	4b12      	ldr	r3, [pc, #72]	; (800ab7c <prvCheckForValidListAndQueue+0x70>)
 800ab32:	4a10      	ldr	r2, [pc, #64]	; (800ab74 <prvCheckForValidListAndQueue+0x68>)
 800ab34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab36:	2300      	movs	r3, #0
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	4b11      	ldr	r3, [pc, #68]	; (800ab80 <prvCheckForValidListAndQueue+0x74>)
 800ab3c:	4a11      	ldr	r2, [pc, #68]	; (800ab84 <prvCheckForValidListAndQueue+0x78>)
 800ab3e:	2110      	movs	r1, #16
 800ab40:	200a      	movs	r0, #10
 800ab42:	f7fd fca5 	bl	8008490 <xQueueGenericCreateStatic>
 800ab46:	4603      	mov	r3, r0
 800ab48:	4a08      	ldr	r2, [pc, #32]	; (800ab6c <prvCheckForValidListAndQueue+0x60>)
 800ab4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab4c:	4b07      	ldr	r3, [pc, #28]	; (800ab6c <prvCheckForValidListAndQueue+0x60>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d005      	beq.n	800ab60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab54:	4b05      	ldr	r3, [pc, #20]	; (800ab6c <prvCheckForValidListAndQueue+0x60>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	490b      	ldr	r1, [pc, #44]	; (800ab88 <prvCheckForValidListAndQueue+0x7c>)
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fe fbfc 	bl	8009358 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab60:	f000 f958 	bl	800ae14 <vPortExitCritical>
}
 800ab64:	bf00      	nop
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	20000f68 	.word	0x20000f68
 800ab70:	20000f38 	.word	0x20000f38
 800ab74:	20000f4c 	.word	0x20000f4c
 800ab78:	20000f60 	.word	0x20000f60
 800ab7c:	20000f64 	.word	0x20000f64
 800ab80:	20001014 	.word	0x20001014
 800ab84:	20000f74 	.word	0x20000f74
 800ab88:	0800b4c4 	.word	0x0800b4c4

0800ab8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	3b04      	subs	r3, #4
 800ab9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	3b04      	subs	r3, #4
 800abaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	f023 0201 	bic.w	r2, r3, #1
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	3b04      	subs	r3, #4
 800abba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800abbc:	4a0c      	ldr	r2, [pc, #48]	; (800abf0 <pxPortInitialiseStack+0x64>)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	3b14      	subs	r3, #20
 800abc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	3b04      	subs	r3, #4
 800abd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f06f 0202 	mvn.w	r2, #2
 800abda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	3b20      	subs	r3, #32
 800abe0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800abe2:	68fb      	ldr	r3, [r7, #12]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	0800abf5 	.word	0x0800abf5

0800abf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800abfa:	2300      	movs	r3, #0
 800abfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800abfe:	4b14      	ldr	r3, [pc, #80]	; (800ac50 <prvTaskExitError+0x5c>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac06:	d00c      	beq.n	800ac22 <prvTaskExitError+0x2e>
	__asm volatile
 800ac08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0c:	b672      	cpsid	i
 800ac0e:	f383 8811 	msr	BASEPRI, r3
 800ac12:	f3bf 8f6f 	isb	sy
 800ac16:	f3bf 8f4f 	dsb	sy
 800ac1a:	b662      	cpsie	i
 800ac1c:	60fb      	str	r3, [r7, #12]
}
 800ac1e:	bf00      	nop
 800ac20:	e7fe      	b.n	800ac20 <prvTaskExitError+0x2c>
	__asm volatile
 800ac22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac26:	b672      	cpsid	i
 800ac28:	f383 8811 	msr	BASEPRI, r3
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	b662      	cpsie	i
 800ac36:	60bb      	str	r3, [r7, #8]
}
 800ac38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac3a:	bf00      	nop
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d0fc      	beq.n	800ac3c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac42:	bf00      	nop
 800ac44:	bf00      	nop
 800ac46:	3714      	adds	r7, #20
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr
 800ac50:	2000000c 	.word	0x2000000c
	...

0800ac60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac60:	4b07      	ldr	r3, [pc, #28]	; (800ac80 <pxCurrentTCBConst2>)
 800ac62:	6819      	ldr	r1, [r3, #0]
 800ac64:	6808      	ldr	r0, [r1, #0]
 800ac66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6a:	f380 8809 	msr	PSP, r0
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f04f 0000 	mov.w	r0, #0
 800ac76:	f380 8811 	msr	BASEPRI, r0
 800ac7a:	4770      	bx	lr
 800ac7c:	f3af 8000 	nop.w

0800ac80 <pxCurrentTCBConst2>:
 800ac80:	20000a38 	.word	0x20000a38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac84:	bf00      	nop
 800ac86:	bf00      	nop

0800ac88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac88:	4808      	ldr	r0, [pc, #32]	; (800acac <prvPortStartFirstTask+0x24>)
 800ac8a:	6800      	ldr	r0, [r0, #0]
 800ac8c:	6800      	ldr	r0, [r0, #0]
 800ac8e:	f380 8808 	msr	MSP, r0
 800ac92:	f04f 0000 	mov.w	r0, #0
 800ac96:	f380 8814 	msr	CONTROL, r0
 800ac9a:	b662      	cpsie	i
 800ac9c:	b661      	cpsie	f
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	df00      	svc	0
 800aca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800acaa:	bf00      	nop
 800acac:	e000ed08 	.word	0xe000ed08

0800acb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800acb6:	4b37      	ldr	r3, [pc, #220]	; (800ad94 <xPortStartScheduler+0xe4>)
 800acb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	22ff      	movs	r2, #255	; 0xff
 800acc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	b2db      	uxtb	r3, r3
 800acce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800acd0:	78fb      	ldrb	r3, [r7, #3]
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800acd8:	b2da      	uxtb	r2, r3
 800acda:	4b2f      	ldr	r3, [pc, #188]	; (800ad98 <xPortStartScheduler+0xe8>)
 800acdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800acde:	4b2f      	ldr	r3, [pc, #188]	; (800ad9c <xPortStartScheduler+0xec>)
 800ace0:	2207      	movs	r2, #7
 800ace2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ace4:	e009      	b.n	800acfa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ace6:	4b2d      	ldr	r3, [pc, #180]	; (800ad9c <xPortStartScheduler+0xec>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	3b01      	subs	r3, #1
 800acec:	4a2b      	ldr	r2, [pc, #172]	; (800ad9c <xPortStartScheduler+0xec>)
 800acee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800acf0:	78fb      	ldrb	r3, [r7, #3]
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	005b      	lsls	r3, r3, #1
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800acfa:	78fb      	ldrb	r3, [r7, #3]
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad02:	2b80      	cmp	r3, #128	; 0x80
 800ad04:	d0ef      	beq.n	800ace6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad06:	4b25      	ldr	r3, [pc, #148]	; (800ad9c <xPortStartScheduler+0xec>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f1c3 0307 	rsb	r3, r3, #7
 800ad0e:	2b04      	cmp	r3, #4
 800ad10:	d00c      	beq.n	800ad2c <xPortStartScheduler+0x7c>
	__asm volatile
 800ad12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad16:	b672      	cpsid	i
 800ad18:	f383 8811 	msr	BASEPRI, r3
 800ad1c:	f3bf 8f6f 	isb	sy
 800ad20:	f3bf 8f4f 	dsb	sy
 800ad24:	b662      	cpsie	i
 800ad26:	60bb      	str	r3, [r7, #8]
}
 800ad28:	bf00      	nop
 800ad2a:	e7fe      	b.n	800ad2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad2c:	4b1b      	ldr	r3, [pc, #108]	; (800ad9c <xPortStartScheduler+0xec>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	021b      	lsls	r3, r3, #8
 800ad32:	4a1a      	ldr	r2, [pc, #104]	; (800ad9c <xPortStartScheduler+0xec>)
 800ad34:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad36:	4b19      	ldr	r3, [pc, #100]	; (800ad9c <xPortStartScheduler+0xec>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad3e:	4a17      	ldr	r2, [pc, #92]	; (800ad9c <xPortStartScheduler+0xec>)
 800ad40:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad4a:	4b15      	ldr	r3, [pc, #84]	; (800ada0 <xPortStartScheduler+0xf0>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a14      	ldr	r2, [pc, #80]	; (800ada0 <xPortStartScheduler+0xf0>)
 800ad50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad56:	4b12      	ldr	r3, [pc, #72]	; (800ada0 <xPortStartScheduler+0xf0>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a11      	ldr	r2, [pc, #68]	; (800ada0 <xPortStartScheduler+0xf0>)
 800ad5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ad60:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad62:	f000 f8dd 	bl	800af20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad66:	4b0f      	ldr	r3, [pc, #60]	; (800ada4 <xPortStartScheduler+0xf4>)
 800ad68:	2200      	movs	r2, #0
 800ad6a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ad6c:	f000 f8fc 	bl	800af68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ad70:	4b0d      	ldr	r3, [pc, #52]	; (800ada8 <xPortStartScheduler+0xf8>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a0c      	ldr	r2, [pc, #48]	; (800ada8 <xPortStartScheduler+0xf8>)
 800ad76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ad7a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ad7c:	f7ff ff84 	bl	800ac88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ad80:	f7fe ff48 	bl	8009c14 <vTaskSwitchContext>
	prvTaskExitError();
 800ad84:	f7ff ff36 	bl	800abf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	e000e400 	.word	0xe000e400
 800ad98:	20001064 	.word	0x20001064
 800ad9c:	20001068 	.word	0x20001068
 800ada0:	e000ed20 	.word	0xe000ed20
 800ada4:	2000000c 	.word	0x2000000c
 800ada8:	e000ef34 	.word	0xe000ef34

0800adac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
	__asm volatile
 800adb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb6:	b672      	cpsid	i
 800adb8:	f383 8811 	msr	BASEPRI, r3
 800adbc:	f3bf 8f6f 	isb	sy
 800adc0:	f3bf 8f4f 	dsb	sy
 800adc4:	b662      	cpsie	i
 800adc6:	607b      	str	r3, [r7, #4]
}
 800adc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800adca:	4b10      	ldr	r3, [pc, #64]	; (800ae0c <vPortEnterCritical+0x60>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	3301      	adds	r3, #1
 800add0:	4a0e      	ldr	r2, [pc, #56]	; (800ae0c <vPortEnterCritical+0x60>)
 800add2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800add4:	4b0d      	ldr	r3, [pc, #52]	; (800ae0c <vPortEnterCritical+0x60>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b01      	cmp	r3, #1
 800adda:	d111      	bne.n	800ae00 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800addc:	4b0c      	ldr	r3, [pc, #48]	; (800ae10 <vPortEnterCritical+0x64>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00c      	beq.n	800ae00 <vPortEnterCritical+0x54>
	__asm volatile
 800ade6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adea:	b672      	cpsid	i
 800adec:	f383 8811 	msr	BASEPRI, r3
 800adf0:	f3bf 8f6f 	isb	sy
 800adf4:	f3bf 8f4f 	dsb	sy
 800adf8:	b662      	cpsie	i
 800adfa:	603b      	str	r3, [r7, #0]
}
 800adfc:	bf00      	nop
 800adfe:	e7fe      	b.n	800adfe <vPortEnterCritical+0x52>
	}
}
 800ae00:	bf00      	nop
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr
 800ae0c:	2000000c 	.word	0x2000000c
 800ae10:	e000ed04 	.word	0xe000ed04

0800ae14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae1a:	4b13      	ldr	r3, [pc, #76]	; (800ae68 <vPortExitCritical+0x54>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d10c      	bne.n	800ae3c <vPortExitCritical+0x28>
	__asm volatile
 800ae22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae26:	b672      	cpsid	i
 800ae28:	f383 8811 	msr	BASEPRI, r3
 800ae2c:	f3bf 8f6f 	isb	sy
 800ae30:	f3bf 8f4f 	dsb	sy
 800ae34:	b662      	cpsie	i
 800ae36:	607b      	str	r3, [r7, #4]
}
 800ae38:	bf00      	nop
 800ae3a:	e7fe      	b.n	800ae3a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ae3c:	4b0a      	ldr	r3, [pc, #40]	; (800ae68 <vPortExitCritical+0x54>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	3b01      	subs	r3, #1
 800ae42:	4a09      	ldr	r2, [pc, #36]	; (800ae68 <vPortExitCritical+0x54>)
 800ae44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae46:	4b08      	ldr	r3, [pc, #32]	; (800ae68 <vPortExitCritical+0x54>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d105      	bne.n	800ae5a <vPortExitCritical+0x46>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	f383 8811 	msr	BASEPRI, r3
}
 800ae58:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae5a:	bf00      	nop
 800ae5c:	370c      	adds	r7, #12
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	2000000c 	.word	0x2000000c
 800ae6c:	00000000 	.word	0x00000000

0800ae70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae70:	f3ef 8009 	mrs	r0, PSP
 800ae74:	f3bf 8f6f 	isb	sy
 800ae78:	4b15      	ldr	r3, [pc, #84]	; (800aed0 <pxCurrentTCBConst>)
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	f01e 0f10 	tst.w	lr, #16
 800ae80:	bf08      	it	eq
 800ae82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ae86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8a:	6010      	str	r0, [r2, #0]
 800ae8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ae90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ae94:	b672      	cpsid	i
 800ae96:	f380 8811 	msr	BASEPRI, r0
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	b662      	cpsie	i
 800aea4:	f7fe feb6 	bl	8009c14 <vTaskSwitchContext>
 800aea8:	f04f 0000 	mov.w	r0, #0
 800aeac:	f380 8811 	msr	BASEPRI, r0
 800aeb0:	bc09      	pop	{r0, r3}
 800aeb2:	6819      	ldr	r1, [r3, #0]
 800aeb4:	6808      	ldr	r0, [r1, #0]
 800aeb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeba:	f01e 0f10 	tst.w	lr, #16
 800aebe:	bf08      	it	eq
 800aec0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aec4:	f380 8809 	msr	PSP, r0
 800aec8:	f3bf 8f6f 	isb	sy
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop

0800aed0 <pxCurrentTCBConst>:
 800aed0:	20000a38 	.word	0x20000a38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aed4:	bf00      	nop
 800aed6:	bf00      	nop

0800aed8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
	__asm volatile
 800aede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee2:	b672      	cpsid	i
 800aee4:	f383 8811 	msr	BASEPRI, r3
 800aee8:	f3bf 8f6f 	isb	sy
 800aeec:	f3bf 8f4f 	dsb	sy
 800aef0:	b662      	cpsie	i
 800aef2:	607b      	str	r3, [r7, #4]
}
 800aef4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aef6:	f7fe fdd1 	bl	8009a9c <xTaskIncrementTick>
 800aefa:	4603      	mov	r3, r0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d003      	beq.n	800af08 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af00:	4b06      	ldr	r3, [pc, #24]	; (800af1c <xPortSysTickHandler+0x44>)
 800af02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af06:	601a      	str	r2, [r3, #0]
 800af08:	2300      	movs	r3, #0
 800af0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	f383 8811 	msr	BASEPRI, r3
}
 800af12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af14:	bf00      	nop
 800af16:	3708      	adds	r7, #8
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	e000ed04 	.word	0xe000ed04

0800af20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af20:	b480      	push	{r7}
 800af22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af24:	4b0b      	ldr	r3, [pc, #44]	; (800af54 <vPortSetupTimerInterrupt+0x34>)
 800af26:	2200      	movs	r2, #0
 800af28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af2a:	4b0b      	ldr	r3, [pc, #44]	; (800af58 <vPortSetupTimerInterrupt+0x38>)
 800af2c:	2200      	movs	r2, #0
 800af2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af30:	4b0a      	ldr	r3, [pc, #40]	; (800af5c <vPortSetupTimerInterrupt+0x3c>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a0a      	ldr	r2, [pc, #40]	; (800af60 <vPortSetupTimerInterrupt+0x40>)
 800af36:	fba2 2303 	umull	r2, r3, r2, r3
 800af3a:	099b      	lsrs	r3, r3, #6
 800af3c:	4a09      	ldr	r2, [pc, #36]	; (800af64 <vPortSetupTimerInterrupt+0x44>)
 800af3e:	3b01      	subs	r3, #1
 800af40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af42:	4b04      	ldr	r3, [pc, #16]	; (800af54 <vPortSetupTimerInterrupt+0x34>)
 800af44:	2207      	movs	r2, #7
 800af46:	601a      	str	r2, [r3, #0]
}
 800af48:	bf00      	nop
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	e000e010 	.word	0xe000e010
 800af58:	e000e018 	.word	0xe000e018
 800af5c:	20000000 	.word	0x20000000
 800af60:	10624dd3 	.word	0x10624dd3
 800af64:	e000e014 	.word	0xe000e014

0800af68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800af68:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800af78 <vPortEnableVFP+0x10>
 800af6c:	6801      	ldr	r1, [r0, #0]
 800af6e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800af72:	6001      	str	r1, [r0, #0]
 800af74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800af76:	bf00      	nop
 800af78:	e000ed88 	.word	0xe000ed88

0800af7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800af82:	f3ef 8305 	mrs	r3, IPSR
 800af86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2b0f      	cmp	r3, #15
 800af8c:	d916      	bls.n	800afbc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800af8e:	4a19      	ldr	r2, [pc, #100]	; (800aff4 <vPortValidateInterruptPriority+0x78>)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	4413      	add	r3, r2
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800af98:	4b17      	ldr	r3, [pc, #92]	; (800aff8 <vPortValidateInterruptPriority+0x7c>)
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	7afa      	ldrb	r2, [r7, #11]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d20c      	bcs.n	800afbc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800afa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa6:	b672      	cpsid	i
 800afa8:	f383 8811 	msr	BASEPRI, r3
 800afac:	f3bf 8f6f 	isb	sy
 800afb0:	f3bf 8f4f 	dsb	sy
 800afb4:	b662      	cpsie	i
 800afb6:	607b      	str	r3, [r7, #4]
}
 800afb8:	bf00      	nop
 800afba:	e7fe      	b.n	800afba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800afbc:	4b0f      	ldr	r3, [pc, #60]	; (800affc <vPortValidateInterruptPriority+0x80>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800afc4:	4b0e      	ldr	r3, [pc, #56]	; (800b000 <vPortValidateInterruptPriority+0x84>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d90c      	bls.n	800afe6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800afcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd0:	b672      	cpsid	i
 800afd2:	f383 8811 	msr	BASEPRI, r3
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	b662      	cpsie	i
 800afe0:	603b      	str	r3, [r7, #0]
}
 800afe2:	bf00      	nop
 800afe4:	e7fe      	b.n	800afe4 <vPortValidateInterruptPriority+0x68>
	}
 800afe6:	bf00      	nop
 800afe8:	3714      	adds	r7, #20
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	e000e3f0 	.word	0xe000e3f0
 800aff8:	20001064 	.word	0x20001064
 800affc:	e000ed0c 	.word	0xe000ed0c
 800b000:	20001068 	.word	0x20001068

0800b004 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b08a      	sub	sp, #40	; 0x28
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b00c:	2300      	movs	r3, #0
 800b00e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b010:	f7fe fc74 	bl	80098fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b014:	4b5b      	ldr	r3, [pc, #364]	; (800b184 <pvPortMalloc+0x180>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b01c:	f000 f91a 	bl	800b254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b020:	4b59      	ldr	r3, [pc, #356]	; (800b188 <pvPortMalloc+0x184>)
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4013      	ands	r3, r2
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f040 8092 	bne.w	800b152 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d01f      	beq.n	800b074 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800b034:	2208      	movs	r2, #8
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4413      	add	r3, r2
 800b03a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f003 0307 	and.w	r3, r3, #7
 800b042:	2b00      	cmp	r3, #0
 800b044:	d016      	beq.n	800b074 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f023 0307 	bic.w	r3, r3, #7
 800b04c:	3308      	adds	r3, #8
 800b04e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f003 0307 	and.w	r3, r3, #7
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00c      	beq.n	800b074 <pvPortMalloc+0x70>
	__asm volatile
 800b05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05e:	b672      	cpsid	i
 800b060:	f383 8811 	msr	BASEPRI, r3
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	f3bf 8f4f 	dsb	sy
 800b06c:	b662      	cpsie	i
 800b06e:	617b      	str	r3, [r7, #20]
}
 800b070:	bf00      	nop
 800b072:	e7fe      	b.n	800b072 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d06b      	beq.n	800b152 <pvPortMalloc+0x14e>
 800b07a:	4b44      	ldr	r3, [pc, #272]	; (800b18c <pvPortMalloc+0x188>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	429a      	cmp	r2, r3
 800b082:	d866      	bhi.n	800b152 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b084:	4b42      	ldr	r3, [pc, #264]	; (800b190 <pvPortMalloc+0x18c>)
 800b086:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b088:	4b41      	ldr	r3, [pc, #260]	; (800b190 <pvPortMalloc+0x18c>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b08e:	e004      	b.n	800b09a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800b090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b092:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d903      	bls.n	800b0ac <pvPortMalloc+0xa8>
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1f1      	bne.n	800b090 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b0ac:	4b35      	ldr	r3, [pc, #212]	; (800b184 <pvPortMalloc+0x180>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d04d      	beq.n	800b152 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b0b6:	6a3b      	ldr	r3, [r7, #32]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2208      	movs	r2, #8
 800b0bc:	4413      	add	r3, r2
 800b0be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	6a3b      	ldr	r3, [r7, #32]
 800b0c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ca:	685a      	ldr	r2, [r3, #4]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	1ad2      	subs	r2, r2, r3
 800b0d0:	2308      	movs	r3, #8
 800b0d2:	005b      	lsls	r3, r3, #1
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d921      	bls.n	800b11c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4413      	add	r3, r2
 800b0de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	f003 0307 	and.w	r3, r3, #7
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00c      	beq.n	800b104 <pvPortMalloc+0x100>
	__asm volatile
 800b0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ee:	b672      	cpsid	i
 800b0f0:	f383 8811 	msr	BASEPRI, r3
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	f3bf 8f4f 	dsb	sy
 800b0fc:	b662      	cpsie	i
 800b0fe:	613b      	str	r3, [r7, #16]
}
 800b100:	bf00      	nop
 800b102:	e7fe      	b.n	800b102 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b106:	685a      	ldr	r2, [r3, #4]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	1ad2      	subs	r2, r2, r3
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b116:	69b8      	ldr	r0, [r7, #24]
 800b118:	f000 f8fe 	bl	800b318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b11c:	4b1b      	ldr	r3, [pc, #108]	; (800b18c <pvPortMalloc+0x188>)
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	1ad3      	subs	r3, r2, r3
 800b126:	4a19      	ldr	r2, [pc, #100]	; (800b18c <pvPortMalloc+0x188>)
 800b128:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b12a:	4b18      	ldr	r3, [pc, #96]	; (800b18c <pvPortMalloc+0x188>)
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	4b19      	ldr	r3, [pc, #100]	; (800b194 <pvPortMalloc+0x190>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	429a      	cmp	r2, r3
 800b134:	d203      	bcs.n	800b13e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b136:	4b15      	ldr	r3, [pc, #84]	; (800b18c <pvPortMalloc+0x188>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a16      	ldr	r2, [pc, #88]	; (800b194 <pvPortMalloc+0x190>)
 800b13c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b140:	685a      	ldr	r2, [r3, #4]
 800b142:	4b11      	ldr	r3, [pc, #68]	; (800b188 <pvPortMalloc+0x184>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	431a      	orrs	r2, r3
 800b148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14e:	2200      	movs	r2, #0
 800b150:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b152:	f7fe fbe1 	bl	8009918 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	f003 0307 	and.w	r3, r3, #7
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00c      	beq.n	800b17a <pvPortMalloc+0x176>
	__asm volatile
 800b160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b164:	b672      	cpsid	i
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	b662      	cpsie	i
 800b174:	60fb      	str	r3, [r7, #12]
}
 800b176:	bf00      	nop
 800b178:	e7fe      	b.n	800b178 <pvPortMalloc+0x174>
	return pvReturn;
 800b17a:	69fb      	ldr	r3, [r7, #28]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3728      	adds	r7, #40	; 0x28
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	20004c74 	.word	0x20004c74
 800b188:	20004c80 	.word	0x20004c80
 800b18c:	20004c78 	.word	0x20004c78
 800b190:	20004c6c 	.word	0x20004c6c
 800b194:	20004c7c 	.word	0x20004c7c

0800b198 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d04c      	beq.n	800b244 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b1aa:	2308      	movs	r3, #8
 800b1ac:	425b      	negs	r3, r3
 800b1ae:	697a      	ldr	r2, [r7, #20]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	685a      	ldr	r2, [r3, #4]
 800b1bc:	4b23      	ldr	r3, [pc, #140]	; (800b24c <vPortFree+0xb4>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10c      	bne.n	800b1e0 <vPortFree+0x48>
	__asm volatile
 800b1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ca:	b672      	cpsid	i
 800b1cc:	f383 8811 	msr	BASEPRI, r3
 800b1d0:	f3bf 8f6f 	isb	sy
 800b1d4:	f3bf 8f4f 	dsb	sy
 800b1d8:	b662      	cpsie	i
 800b1da:	60fb      	str	r3, [r7, #12]
}
 800b1dc:	bf00      	nop
 800b1de:	e7fe      	b.n	800b1de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00c      	beq.n	800b202 <vPortFree+0x6a>
	__asm volatile
 800b1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ec:	b672      	cpsid	i
 800b1ee:	f383 8811 	msr	BASEPRI, r3
 800b1f2:	f3bf 8f6f 	isb	sy
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	b662      	cpsie	i
 800b1fc:	60bb      	str	r3, [r7, #8]
}
 800b1fe:	bf00      	nop
 800b200:	e7fe      	b.n	800b200 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	685a      	ldr	r2, [r3, #4]
 800b206:	4b11      	ldr	r3, [pc, #68]	; (800b24c <vPortFree+0xb4>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4013      	ands	r3, r2
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d019      	beq.n	800b244 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d115      	bne.n	800b244 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	685a      	ldr	r2, [r3, #4]
 800b21c:	4b0b      	ldr	r3, [pc, #44]	; (800b24c <vPortFree+0xb4>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	43db      	mvns	r3, r3
 800b222:	401a      	ands	r2, r3
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b228:	f7fe fb68 	bl	80098fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	685a      	ldr	r2, [r3, #4]
 800b230:	4b07      	ldr	r3, [pc, #28]	; (800b250 <vPortFree+0xb8>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4413      	add	r3, r2
 800b236:	4a06      	ldr	r2, [pc, #24]	; (800b250 <vPortFree+0xb8>)
 800b238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b23a:	6938      	ldr	r0, [r7, #16]
 800b23c:	f000 f86c 	bl	800b318 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b240:	f7fe fb6a 	bl	8009918 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b244:	bf00      	nop
 800b246:	3718      	adds	r7, #24
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	20004c80 	.word	0x20004c80
 800b250:	20004c78 	.word	0x20004c78

0800b254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b25a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b25e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b260:	4b27      	ldr	r3, [pc, #156]	; (800b300 <prvHeapInit+0xac>)
 800b262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f003 0307 	and.w	r3, r3, #7
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00c      	beq.n	800b288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	3307      	adds	r3, #7
 800b272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f023 0307 	bic.w	r3, r3, #7
 800b27a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	4a1f      	ldr	r2, [pc, #124]	; (800b300 <prvHeapInit+0xac>)
 800b284:	4413      	add	r3, r2
 800b286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b28c:	4a1d      	ldr	r2, [pc, #116]	; (800b304 <prvHeapInit+0xb0>)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b292:	4b1c      	ldr	r3, [pc, #112]	; (800b304 <prvHeapInit+0xb0>)
 800b294:	2200      	movs	r2, #0
 800b296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	4413      	add	r3, r2
 800b29e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b2a0:	2208      	movs	r2, #8
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	1a9b      	subs	r3, r3, r2
 800b2a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f023 0307 	bic.w	r3, r3, #7
 800b2ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	4a15      	ldr	r2, [pc, #84]	; (800b308 <prvHeapInit+0xb4>)
 800b2b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b2b6:	4b14      	ldr	r3, [pc, #80]	; (800b308 <prvHeapInit+0xb4>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b2be:	4b12      	ldr	r3, [pc, #72]	; (800b308 <prvHeapInit+0xb4>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	1ad2      	subs	r2, r2, r3
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b2d4:	4b0c      	ldr	r3, [pc, #48]	; (800b308 <prvHeapInit+0xb4>)
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	4a0a      	ldr	r2, [pc, #40]	; (800b30c <prvHeapInit+0xb8>)
 800b2e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	4a09      	ldr	r2, [pc, #36]	; (800b310 <prvHeapInit+0xbc>)
 800b2ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b2ec:	4b09      	ldr	r3, [pc, #36]	; (800b314 <prvHeapInit+0xc0>)
 800b2ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b2f2:	601a      	str	r2, [r3, #0]
}
 800b2f4:	bf00      	nop
 800b2f6:	3714      	adds	r7, #20
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr
 800b300:	2000106c 	.word	0x2000106c
 800b304:	20004c6c 	.word	0x20004c6c
 800b308:	20004c74 	.word	0x20004c74
 800b30c:	20004c7c 	.word	0x20004c7c
 800b310:	20004c78 	.word	0x20004c78
 800b314:	20004c80 	.word	0x20004c80

0800b318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b320:	4b28      	ldr	r3, [pc, #160]	; (800b3c4 <prvInsertBlockIntoFreeList+0xac>)
 800b322:	60fb      	str	r3, [r7, #12]
 800b324:	e002      	b.n	800b32c <prvInsertBlockIntoFreeList+0x14>
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	60fb      	str	r3, [r7, #12]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	429a      	cmp	r2, r3
 800b334:	d8f7      	bhi.n	800b326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	68ba      	ldr	r2, [r7, #8]
 800b340:	4413      	add	r3, r2
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	429a      	cmp	r2, r3
 800b346:	d108      	bne.n	800b35a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	685a      	ldr	r2, [r3, #4]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	441a      	add	r2, r3
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	441a      	add	r2, r3
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d118      	bne.n	800b3a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	4b15      	ldr	r3, [pc, #84]	; (800b3c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	429a      	cmp	r2, r3
 800b378:	d00d      	beq.n	800b396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	685a      	ldr	r2, [r3, #4]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	441a      	add	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	601a      	str	r2, [r3, #0]
 800b394:	e008      	b.n	800b3a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b396:	4b0c      	ldr	r3, [pc, #48]	; (800b3c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	e003      	b.n	800b3a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d002      	beq.n	800b3b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3b6:	bf00      	nop
 800b3b8:	3714      	adds	r7, #20
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	20004c6c 	.word	0x20004c6c
 800b3c8:	20004c74 	.word	0x20004c74

0800b3cc <__libc_init_array>:
 800b3cc:	b570      	push	{r4, r5, r6, lr}
 800b3ce:	4d0d      	ldr	r5, [pc, #52]	; (800b404 <__libc_init_array+0x38>)
 800b3d0:	4c0d      	ldr	r4, [pc, #52]	; (800b408 <__libc_init_array+0x3c>)
 800b3d2:	1b64      	subs	r4, r4, r5
 800b3d4:	10a4      	asrs	r4, r4, #2
 800b3d6:	2600      	movs	r6, #0
 800b3d8:	42a6      	cmp	r6, r4
 800b3da:	d109      	bne.n	800b3f0 <__libc_init_array+0x24>
 800b3dc:	4d0b      	ldr	r5, [pc, #44]	; (800b40c <__libc_init_array+0x40>)
 800b3de:	4c0c      	ldr	r4, [pc, #48]	; (800b410 <__libc_init_array+0x44>)
 800b3e0:	f000 f82e 	bl	800b440 <_init>
 800b3e4:	1b64      	subs	r4, r4, r5
 800b3e6:	10a4      	asrs	r4, r4, #2
 800b3e8:	2600      	movs	r6, #0
 800b3ea:	42a6      	cmp	r6, r4
 800b3ec:	d105      	bne.n	800b3fa <__libc_init_array+0x2e>
 800b3ee:	bd70      	pop	{r4, r5, r6, pc}
 800b3f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3f4:	4798      	blx	r3
 800b3f6:	3601      	adds	r6, #1
 800b3f8:	e7ee      	b.n	800b3d8 <__libc_init_array+0xc>
 800b3fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3fe:	4798      	blx	r3
 800b400:	3601      	adds	r6, #1
 800b402:	e7f2      	b.n	800b3ea <__libc_init_array+0x1e>
 800b404:	0800b59c 	.word	0x0800b59c
 800b408:	0800b59c 	.word	0x0800b59c
 800b40c:	0800b59c 	.word	0x0800b59c
 800b410:	0800b5a0 	.word	0x0800b5a0

0800b414 <memcpy>:
 800b414:	440a      	add	r2, r1
 800b416:	4291      	cmp	r1, r2
 800b418:	f100 33ff 	add.w	r3, r0, #4294967295
 800b41c:	d100      	bne.n	800b420 <memcpy+0xc>
 800b41e:	4770      	bx	lr
 800b420:	b510      	push	{r4, lr}
 800b422:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b42a:	4291      	cmp	r1, r2
 800b42c:	d1f9      	bne.n	800b422 <memcpy+0xe>
 800b42e:	bd10      	pop	{r4, pc}

0800b430 <memset>:
 800b430:	4402      	add	r2, r0
 800b432:	4603      	mov	r3, r0
 800b434:	4293      	cmp	r3, r2
 800b436:	d100      	bne.n	800b43a <memset+0xa>
 800b438:	4770      	bx	lr
 800b43a:	f803 1b01 	strb.w	r1, [r3], #1
 800b43e:	e7f9      	b.n	800b434 <memset+0x4>

0800b440 <_init>:
 800b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b442:	bf00      	nop
 800b444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b446:	bc08      	pop	{r3}
 800b448:	469e      	mov	lr, r3
 800b44a:	4770      	bx	lr

0800b44c <_fini>:
 800b44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44e:	bf00      	nop
 800b450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b452:	bc08      	pop	{r3}
 800b454:	469e      	mov	lr, r3
 800b456:	4770      	bx	lr
